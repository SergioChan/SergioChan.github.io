<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Sergio Chan]]></title>
  <subtitle><![CDATA[Born hacker, Full-stack Developer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sergiochan.github.io/"/>
  <updated>2016-08-30T07:01:08.000Z</updated>
  <id>http://sergiochan.github.io/</id>
  
  <author>
    <name><![CDATA[Sergio Chan]]></name>
    <email><![CDATA[cyh9211@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS Airplay 中的 Airtunes Server 服务协议和机制详解以及 Android Demo 的实现]]></title>
    <link href="http://sergiochan.github.io/2016/08/29/iOS-Airplay-%E4%B8%AD%E7%9A%84-Airtunes-Server-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A-Android-Demo-%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sergiochan.github.io/2016/08/29/iOS-Airplay-中的-Airtunes-Server-服务协议和机制详解以及-Android-Demo-的实现/</id>
    <published>2016-08-29T02:03:22.000Z</published>
    <updated>2016-08-30T07:01:08.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 Android 设备上搭建一个 Airplay Server 其实是一件很浩大的工程，因为这需要逆向苹果的 Airplay 协议流程啊格式啊什么的，万幸这件事情已经由许许多多国外的大神们帮我们做好了，因此我们只要基于他们逆向出来的 Airplay 协议来搭建一个服务就可以了。话虽如此，整个过程中的工作量和需要掌握的知识点还是非常非常多的。</p>
<p>在局域网中实现流媒体传输的主流协议有两种，一种是苹果封闭的 Airplay 协议，一种是 DLNA 。</p>
<blockquote>
<p><strong>D</strong>IGITAL <strong>L</strong>IVING <strong>N</strong>ETWORK <strong>A</strong>LLIANCE 数字生活网络联盟，是索尼、英特尔、微软等发起的一套 PC、移动设备、消费电器之间互联互通的协议。它们的宗旨是“随时随地享受音乐、照片和视频”。据说苹果当时也是 DLNA 联盟的成员，而后来退出了并自立门户。</p>
</blockquote>
<p>对于 iOS 系统来说，对用户最友好且体验最好的方式自然还是通过 Airplay 协议了（其实我是不太喜欢在每个单独的视频或者音乐播放器里面去找到 DLNA 或者 Airplay 的按钮然后切换模式，系统级的服务体验还是更好一些，因此我更倾向使用 Airplay）。因此在很多场景下，你需要让你的<strong>安卓硬件</strong>或者<strong>设备</strong>支持 Airplay 服务，本文就是通过一步步解释和分析这个基于 DroidPlay 改出的稳定可用的 Airtunes 服务，给大家展示一个比较清晰的 Airplay 中的 Airtunes 的机制和服务流程。</p>
<blockquote>
<p>代码在 GitHub 上开放给大家学习和改动。地址在<a href="https://github.com/SergioChan/Android-Airplay-Server" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h2 id="u9996_u5148_uFF0C_u5982_u4F55_u8BA9_iOS__u8BBE_u5907_u53D1_u73B0_u4F60"><a href="#u9996_u5148_uFF0C_u5982_u4F55_u8BA9_iOS__u8BBE_u5907_u53D1_u73B0_u4F60" class="headerlink" title="首先，如何让 iOS 设备发现你"></a>首先，如何让 iOS 设备发现你</h2><p>这是万事开头的第一步：你需要让自己的安卓设备出现在 iOS 设备 Airplay 的设备列表中。由于 Airplay 是基于局域网的，苹果设备会在当前局域网里搜寻支持 Airplay 服务的设备，因此在这里你就需要通过 mDNS 服务向局域网发送一个组播来让 iOS 设备能够在内网中发现你。在 Android 上你可以使用 <strong>jmDNS</strong> 库来实现这个功能:</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">final JmDNS jmDNS = JmDNS.create(addr, hostName + <span class="string">"-jmdns"</span>);</span><br><span class="line">jmDNSInstances.add(jmDNS);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span> Publish RAOP service <span class="keyword">*</span>/</span><br><span class="line">final ServiceInfo airTunesServiceInfo = ServiceInfo.create(</span><br><span class="line">AIR_TUNES_SERVICE_TYPE,</span><br><span class="line">hardwareAddressString + <span class="string">"@"</span> + hostName,</span><br><span class="line">getRtspPort(),</span><br><span class="line">0 /<span class="keyword">*</span> weight <span class="keyword">*</span>/, 0 /<span class="keyword">*</span> priority <span class="keyword">*</span>/,</span><br><span class="line">AIRTUNES_SERVICE_PROPERTIES</span><br><span class="line">);</span><br><span class="line">jmDNS.registerService(airTunesServiceInfo);</span><br></pre></td></tr></table></figure>
<p>这个注册的服务类型和参数都是固定的，服务类型为 <code>_raop._tcp.local.</code>，参数列表如下:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"txtvers"</span>, <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"tp"</span>, <span class="string">"UDP"</span>,</span><br><span class="line"><span class="string">"ch"</span>, <span class="string">"2"</span>,</span><br><span class="line"><span class="string">"ss"</span>, <span class="string">"16"</span>,</span><br><span class="line"><span class="string">"sr"</span>, <span class="string">"44100"</span>,</span><br><span class="line"><span class="string">"pw"</span>, <span class="string">"false"</span>,</span><br><span class="line"><span class="string">"sm"</span>, <span class="string">"false"</span>,</span><br><span class="line"><span class="string">"sv"</span>, <span class="string">"false"</span>,</span><br><span class="line"><span class="string">"ek"</span>, <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"et"</span>, <span class="string">"0,1"</span>,</span><br><span class="line"><span class="string">"cn"</span>, <span class="string">"0,1"</span>,</span><br><span class="line"><span class="string">"vn"</span>, <span class="string">"3"</span></span><br></pre></td></tr></table></figure>
<p>通过注册上这个 mDNS 服务，现在你应该可以在你的 iOS 设备上的 Airplay 列表里看到一个名字为你设置的 <code>hostName</code> 的设备了。当然，现在点击连接应该是没有任何反应的，因为接下来需要进行好几次的  RTSP 请求来进行校验和连接，我们要做的也主要就是接下来这几个步骤了。</p>
<blockquote>
<p><strong>Airplay 连接一开始的延迟貌似是没有办法解决的</strong>。参考这篇<a href="http://stackoverflow.com/questions/9997882/detecting-the-airplay-latency" target="_blank" rel="external">SO回答</a>，里面明确指出，Airplay 连接的延迟来源于发送方需要多次 RTSP 请求握手，大概在<strong>两秒左右</strong>，当然，如果你在客户端层面去做自己的传输协议当然是没有问题的，但是你并不能按照 Airplay 的包格式来实现系统级的 Airplay 到其他不论是原生的 iOS 设备还是支持了 Airplay 的 Android 设备上去，这会被苹果 Reject。所以如果在之后的开发中最后遇到了一点几秒的延迟没法解决的时候，记住不要钻进坑里了。实际测试中延迟大概在 1.6 秒左右。</p>
</blockquote>
<h2 id="u5F00_u542F_u4F60_u7684_u670D_u52A1_u7AEF"><a href="#u5F00_u542F_u4F60_u7684_u670D_u52A1_u7AEF" class="headerlink" title="开启你的服务端"></a>开启你的服务端</h2><p>告知了 iOS 设备你的端口信息之后，接下来就是在指定的端口开启你的服务端等候 iOS 设备传来的包了。在这里我们使用的是 Netty 库的 bootstrap 来搭建一个服务器，关于 Netty 你可以在百度和谷歌上找到更多介绍。总之它的机制是每一个新的 TCP 连接都会建立一个子的 channel 然后每一个 channel 的处理都是一个 pipeline 的处理模式，接收到消息的时候消息会在 pipeline 中流动，直到不再往下流动，发送消息反之亦然。</p>
<p>苹果的 Airplay 协议主要是通过 RTSP 协议的 Header 中的几个参数来进行身份的验证和包的校验，所以为了满足苹果自己需要的校验规则，我们需要在 pipeline 中加上这几个处理校验的 Handler：</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">pipeline.addLast(<span class="string">"challengeResponse"</span>, new <span class="type">RaopRtspChallengeResponseHandler</span>(<span class="type">NetworkUtils</span>.getInstance<span class="literal">()</span>.getHardwareAddress<span class="literal">()</span>));</span><br><span class="line">pipeline.addLast(<span class="string">"header"</span>, new <span class="type">RaopRtspHeaderHandler</span><span class="literal">()</span>);</span><br><span class="line">pipeline.addLast(<span class="string">"options"</span>, new <span class="type">RaopRtspOptionsHandler</span><span class="literal">()</span>);</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>由 iOS 设备向 Android 设备发送的 Request 的 Header 中 （注意这里你的 Android 是作为服务端的）包含一个叫做 <code>Apple-Challenge</code> 的字段，它的值需要经过 Base64 解密之后获得一个凭证，这个凭证是要在每一次的 Response 中使用到的。</li>
<li>由 Android 设备向 iOS 设备发送的 Response 的 Header 中需要包含一个叫做 <code>Apple-Response</code> 的字段，它的值需要经过一层 RSA 加密和一层 Base64 加密，原始数据则是 16 位 <code>Apple-Challenge</code> 解密后的凭证 + 16位 InetAddress.getAddress() 获取到的 byte 数组 + 6 位 硬件地址。分别是从 Request 中，<code>InetAddress.getAddress()</code> 和下面这段代码中的 <code>NetworkInterface</code> 来获得硬件地址。带有 <code>Apple-Challenge</code> Header 的包只会在 RTSP 连接建立的时候发送一次，因此稍微判断一下是否需要返回 <code>Apple-Response</code> 的 Header 就可以了。另外，在这里的 RSA 加密中用到的秘钥是一个私钥，也就是双方提前约定好的一个串，这个串会不定期的更新，破解的事情应该只有少数大神才做的了吧……对于我们主要还是从国外的一些博客和网站上经常去关注是否有私钥更新比较靠谱。这个私钥在所有的 RSA 解密操作中都要用到。</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">final</span> NetworkInterface iface: Collections.list(NetworkInterface.getNetworkInterfaces())) &#123;</span><br><span class="line"><span class="keyword">if</span> (iface.isLoopback())&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (iface.isPointToPoint())&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] ifaceMacAddress = iface.getHardwareAddress();</span><br><span class="line"><span class="keyword">if</span> ((ifaceMacAddress != <span class="keyword">null</span>) &amp;&amp; (ifaceMacAddress.length == <span class="number">6</span>) &amp;&amp; !isBlockedHardwareAddress(ifaceMacAddress)) &#123;</span><br><span class="line"><span class="function"><span class="keyword">return</span> Arrays.<span class="title">copyOfRange</span><span class="params">(ifaceMacAddress, <span class="number">0</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">final</span> Throwable e) &#123;</span><br><span class="line"><span class="comment">/* Ignore */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于 RTSP Header 的处理，每个 RTSP 包都会带有 <code>CSeq</code> 的头，这个头需要在 Response 和 Request 中保持一致。它指定了 RTSP 请求回应对的序列号，在每个请求或回应中都必须包括这个头字段。对每个包含一个给定序列号的请求消息，都会有一个相同序列号的回应消息。</li>
<li>每个 RTSP Header 还要带上一个值为 <code>connected; type=analog</code> 的头 <code>Audio-Jack-Status</code>。</li>
<li>你还要响应 RTSP 的 OPTION 请求，这个请求是由客户端向服务端发起，要求服务端告知支持的所有请求类型，因此这里我们需要将所有的 RTSP 请求方法带在 Response 中返回给客户端。</li>
</ul>
<h2 id="u63A5_u6536_u5E76_u5904_u7406_u4F60_u7684_u6570_u636E_u6D41"><a href="#u63A5_u6536_u5E76_u5904_u7406_u4F60_u7684_u6570_u636E_u6D41" class="headerlink" title="接收并处理你的数据流"></a>接收并处理你的数据流</h2><p>当请求经过了上面几层 Handler 还在往下传递的时候，这个时候数据包应该就到了 RTSP 的正常处理流程中了。而这些所有的关于 RTSP 的处理都是在 <code>AudioHandler</code> 中来完成的。我们会收到下面这几种请求</p>
<ul>
<li>ANNOUNCE 初始化步骤，传输媒体信息，编码和加密秘钥</li>
<li>SETUP 连接步骤</li>
<li>RECORD 不需要做什么，在这里所有的工作都在前两步里面完成了</li>
<li>FLUSH 当客户端终止了 Airtunes 传输的时候发送，用来清空数据队列</li>
<li>TEARDOWN 直接关闭连接</li>
</ul>
<h3 id="ANNOUNCE"><a href="#ANNOUNCE" class="headerlink" title="ANNOUNCE"></a>ANNOUNCE</h3><p>ANNOUNCE 中主要是带来了一些 RTP 数据的参数，Android 可以根据这些参数来初始化相应的 <strong>RTP 处理队列</strong>，<strong>ALAC Decoder</strong> 和 <strong>AES 解密处理器</strong>（注意所有之后的 RTP 包都是 AES 加密过的，需要用这里初始化的解密处理器解一遍，但是 RTSP 包不是 ）。ANNOUNCE 在传输的时候遵循 <strong>SDP 描述格式</strong>来传输媒体信息：</p>
<blockquote>
<p><strong>关于 SDP</strong></p>
<p>SDP 是一种会话描述格式，它不属于传输协议。</p>
<p>SDP协议是基于文本的协议，这样就能保证协议的可扩展性比较强。SDP 不支持会话内容或媒体编码的协商，所以在流媒体中只用来描述媒体信息。</p>
<p>SDP描述由许多文本行组成，文本行的格式为:</p>
<p><strong>类型 = 值</strong></p>
<p>其中，类型是一个字母，值是结构化的文本串，其格式依类型而定。</p>
<p><strong>sdp的格式:</strong></p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">&gt; v=<span class="variable">&lt;version&gt;</span></span><br><span class="line">&gt; o=<span class="variable">&lt;username&gt;</span> <span class="variable">&lt;session id&gt;</span> <span class="variable">&lt;version&gt;</span> <span class="variable">&lt;network type&gt;</span> <span class="variable">&lt;address type&gt;</span> <span class="variable">&lt;address&gt;</span></span><br><span class="line">&gt; s=<span class="variable">&lt;session name&gt;</span></span><br><span class="line">&gt; i=<span class="variable">&lt;session description&gt;</span></span><br><span class="line">&gt; u=<span class="variable">&lt;URI&gt;</span></span><br><span class="line">&gt; e=<span class="variable">&lt;email address&gt;</span></span><br><span class="line">&gt; p=<span class="variable">&lt;phone number&gt;</span></span><br><span class="line">&gt; c=<span class="variable">&lt;network type&gt;</span> <span class="variable">&lt;address type&gt;</span> <span class="variable">&lt;connection address&gt;</span></span><br><span class="line">&gt; b=<span class="variable">&lt;modifier&gt;</span>:<span class="variable">&lt;bandwidth-value&gt;</span></span><br><span class="line">&gt; t=<span class="variable">&lt;start time&gt;</span> <span class="variable">&lt;stop time&gt;</span></span><br><span class="line">&gt; r=<span class="variable">&lt;repeat interval&gt;</span> <span class="variable">&lt;active duration&gt;</span> <span class="variable">&lt;list of offsets from start-time&gt;</span></span><br><span class="line">&gt; z=<span class="variable">&lt;adjustment time&gt;</span> <span class="variable">&lt;offset&gt;</span> <span class="variable">&lt;adjustment time&gt;</span> <span class="variable">&lt;offset&gt;</span> ....</span><br><span class="line">&gt; k=<span class="variable">&lt;method&gt;</span></span><br><span class="line">&gt; k=<span class="variable">&lt;method&gt;</span>:<span class="variable">&lt;encryption key&gt;</span></span><br><span class="line">&gt; a=<span class="variable">&lt;attribute&gt;</span></span><br><span class="line">&gt; a=<span class="variable">&lt;attribute&gt;</span>:<span class="variable">&lt;value&gt;</span></span><br><span class="line">&gt; m=<span class="variable">&lt;media&gt;</span> <span class="variable">&lt;port&gt;</span> <span class="variable">&lt;transport&gt;</span> <span class="variable">&lt;fmt list&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; v = (协议版本)</span><br><span class="line">&gt; o = (所有者/创建者和会话标识符)</span><br><span class="line">&gt; s = (会话名称)</span><br><span class="line">&gt; i = <span class="keyword">*</span> (会话信息)</span><br><span class="line">&gt; u = <span class="keyword">*</span> (URI 描述)</span><br><span class="line">&gt; e = <span class="keyword">*</span> (Email 地址)</span><br><span class="line">&gt; p = <span class="keyword">*</span> (电话号码)</span><br><span class="line">&gt; c = <span class="keyword">*</span> (连接信息)</span><br><span class="line">&gt; b = <span class="keyword">*</span> (带宽信息)</span><br><span class="line">&gt; z = <span class="keyword">*</span> (时间区域调整)</span><br><span class="line">&gt; k = <span class="keyword">*</span> (加密密钥)</span><br><span class="line">&gt; a = <span class="keyword">*</span> (0 个或多个会话属性行)</span><br><span class="line">&gt;</span><br><span class="line">&gt; 时间描述: </span><br><span class="line">&gt; t = (会话活动时间)</span><br><span class="line">&gt; r = <span class="keyword">*</span> (0或多次重复次数)</span><br><span class="line">&gt;</span><br><span class="line">&gt; 媒体描述: </span><br><span class="line">&gt; m = (媒体名称和传输地址)</span><br><span class="line">&gt; i = <span class="keyword">*</span> (媒体标题)</span><br><span class="line">&gt; c = <span class="keyword">*</span> (连接信息 — 如果包含在会话层则该字段可选)</span><br><span class="line">&gt; b = <span class="keyword">*</span> (带宽信息)</span><br><span class="line">&gt; k = <span class="keyword">*</span> (加密密钥)</span><br><span class="line">&gt; a = <span class="keyword">*</span> (0 个或多个媒体属性行)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Airplay 服务所定义的 ANNOUNCE 包的 SDP 格式如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Sample sdp content:</span><br><span class="line">* </span><br><span class="line"><span class="constant">v</span>=0</span><br><span class="line"><span class="constant">o</span>=iTunes 3413821438 0 IN IP4 fe80::217:f2ff:fe0f:e0f6</span><br><span class="line"><span class="constant">s</span>=iTunes</span><br><span class="line"><span class="constant">c</span>=IN IP4 fe80::5a55:caff:fe1a:e187</span><br><span class="line"><span class="constant">t</span>=0 0</span><br><span class="line"><span class="constant">m</span>=audio 0 RTP/AVP 96</span><br><span class="line"><span class="constant">a</span>=rtpmap:96 AppleLossless</span><br><span class="line"><span class="constant">a</span>=fmtp:96 352 0 16 40 10 14 2 255 0 0 44100</span><br><span class="line"><span class="constant">a</span>=fpaeskey:RlBMWQECAQAAAAA8AAAAAPFOnNe+zWb5/n4L5KZkE2AAAAAQlDx69reTdwHF9LaNmhiRURTAbcL4brYAceAkZ49YirXm62N4</span><br><span class="line"><span class="constant">a</span>=aesiv:5b+YZi9Ikb845BmNhaVo+Q</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>根据样例格式我们可以解析出 AES 解密的<strong>秘钥</strong>和<strong>初始化矩阵IV</strong>以及流的数据格式，从而初始化 <strong>ALAC Decoder</strong>。其中，参数 m 的最后一个值和 rtpmap 的第一个值需要保持一致，rtpmap 的第一个值和 fmtp 的第一个值需要保持一致，他们都是 <strong>payload type</strong> 的值，因此在解析完包的数据之后要进行校验。fmtp 第一个参数之后的所有参数表示的都是媒体格式的指定参数。我们用这些参数来初始化 ALAC Decoder。<em>关于 SDP 的详细参数描述你可以在谷歌上找到更多</em>。</p>
<blockquote>
<p>a=fmtp:<format> <format specific="" parameters=""><br>​       This attribute allows parameters that are specific to a particular format to be conveyed in a way that SDP doesn’t have to understand them.  The format must be one of the formats specified for the media.  Format-specific parameters may be any set of parameters required to be conveyed by SDP and given unchanged to the media tool that will use this format.</format></format></p>
<p>​       It is a media attribute, and is not dependent on charset.</p>
</blockquote>
<p>接下来是 AES 解密的秘钥和初始化矩阵 IV：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"rsaaeskey"</span>.equals(key)) &#123;</span><br><span class="line"><span class="comment">/* Sets the AES key required to decrypt the audio data. The key is</span><br><span class="line">* encrypted wih the AirTunes private key</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">byte</span>[] aesKeyRaw;</span><br><span class="line"></span><br><span class="line">rsaPkCS1OaepCipher.init(Cipher.DECRYPT_MODE, AirTunesCryptography.PrivateKey);</span><br><span class="line">aesKeyRaw = rsaPkCS1OaepCipher.doFinal(Base64.decodeUnpadded(<span class="keyword">value</span>));</span><br><span class="line"></span><br><span class="line">aesKey = <span class="keyword">new</span> SecretKeySpec(aesKeyRaw, <span class="string">"AES"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params"><span class="string">"aesiv"</span>.equals(key</span>)) </span>&#123;</span><br><span class="line"><span class="comment">/* Sets the AES initialization vector */</span></span><br><span class="line">aesIv = <span class="keyword">new</span> IvParameterSpec(Base64.decodeUnpadded(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个值都是用 Base64 加密过的，所以我们要先 Base64 解密得到原始数据，然后 <strong>AES Key</strong> 需要再通过 Airtunes 的秘钥来 RSA 解密，最后得到 AES 解密需要的 Key。</p>
<h3 id="SETUP"><a href="#SETUP" class="headerlink" title="SETUP"></a>SETUP</h3><p>在 ANNOUNCE 中我们主要是得到了数据格式，数据解密的方法参数这些基本信息，那么 SETUP 的时候客户端就是在和我们交换一些连接信息：主要也就是三个 port 的信息，对应三个 channel，分别是 <strong>control port -&gt; control channel</strong>，<strong>timing port -&gt; timing channel</strong> 和 <strong>server port -&gt; audio channel</strong>，这是三个 <strong>UDP 连接</strong>的端口。这也是整个 Airtunes 服务结构中最重要的部分了：</p>
<ul>
<li><strong>control port</strong> 是用来发送 resendTransmitRequest 的 channel，也就是当 Android 这边发现我收到的音乐流数据包中有丢失帧的时候，可以通过 control port 发送 resendTransmit 的 request 给 iOS 设备，设备收到后会将帧在 response 中补发回来</li>
<li><strong>timing port</strong> 用来传输 Airplay 的时间同步包，同时也可以主动向 iOS 设备请求当前的时间戳来校准流的时间戳</li>
<li><strong>server port</strong> 则是用来传输最主要的音乐流数据包</li>
</ul>
<blockquote>
<p>在这里我们将 control 和 timing 的包统一 reroute 到 audio 的 channel 上来处理。接收到的 UpStream 将包从 control 和 timing 集中到 audio 来处理，而发送出去的 DownStream 则是将指定类型的包从 audio 分发到 control 和 timing 去发送和接收 response。下面会详细展开。</p>
</blockquote>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Split Transport header into individual options and prepare response options list */</span></span><br><span class="line"><span class="keyword">final</span> Deque&lt;<span class="keyword">String</span>&gt; requestOptions = <span class="keyword">new</span> java.util.LinkedList&lt;<span class="keyword">String</span>&gt;(Arrays.asList(req.getHeader(HEADER_TRANSPORT).<span class="built_in">split</span>(<span class="string">";"</span>)));</span><br><span class="line"><span class="keyword">final</span> List&lt;<span class="keyword">String</span>&gt; responseOptions = <span class="keyword">new</span> java.util.LinkedList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Transport header. Protocol must be RTP/AVP/UDP */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> requestProtocol = requestOptions.removeFirst();</span><br><span class="line"><span class="keyword">if</span> ( ! <span class="string">"RTP/AVP/UDP"</span>.equals(requestProtocol))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Transport protocol must be RTP/AVP/UDP, but was "</span> + requestProtocol);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">responseOptions.<span class="built_in">add</span>(requestProtocol);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HEADER 中 key 为 <strong>Transport</strong> 的字段值必须为 <code>RTP/AVP/UDP</code> 。</p>
</blockquote>
<p>首先对 SETUP 的参数列表进行解析，解出来的 <code>requestOptions</code> 仍然是用正则匹配的形式获取到 key - value 对：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Parse incoming transport options and build response options */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">final</span> <span class="keyword">String</span> requestOption: requestOptions) &#123;</span><br><span class="line"><span class="comment">/* Split option into key and value */</span></span><br><span class="line"><span class="keyword">final</span> Matcher transportOption = PATTERN_TRANSPORT_OPTION.matcher(requestOption);</span><br><span class="line"><span class="keyword">if</span> ( ! transportOption.matches() )&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Cannot parse Transport option "</span> + requestOption);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> <span class="variable">key</span> = transportOption.group(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> value = transportOption.group(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>其中我们只要对指定几个 key 进行 response 就可以了，其中，除了 <code>interleaved</code> 和 <code>mode</code> 返回的参数是固定的之外，<code>control_port</code> 和 <code>timing_port</code> 在 request 中所对应的 value 是客户端的端口，而 response 中需要带上服务端的端口。同时，这两个 UDP 连接由服务端发起去连接客户端对应的端口。最后再告知客户端 <code>server_port</code> 的端口。</p>
<p><strong>interleaved</strong> 指的是由于这条 TCP 连接 RTP 和 RTCP 都要使用，因此两个连接的数据包会交叉传输在同一个 TCP 连接上，每个包都会再加一层标识，而标识 Channel 的值就由这里的 interleaved 后面的值 0-1 来决定，表示有 0 和 1 两种交叉混用的 Channel 类型。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Probably means that two channels are interleaved in the stream. Included in the response options */</span></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="string">"0-1"</span>.equals(<span class="keyword">value</span>))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Unsupported Transport option, interleaved must be 0-1 but was "</span> + <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">responseOptions.add(<span class="string">"interleaved=0-1"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>mode</strong> 则是校验客户端要求我们做的事情，这是 RTSP 协议中规定的一部分，在 Airplay 中，Server 永远承担的是接收数据的工作，因此 mode 的值也应当保持为 <strong>record</strong> 。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Means the we're supposed to receive audio data, not send it. Included in the response options */</span></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="string">"record"</span>.equals(<span class="keyword">value</span>))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Unsupported Transport option, mode must be record but was "</span> + <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">responseOptions.add(<span class="string">"mode=record"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>control_port</strong> 是 control channel 对应的客户端的端口号，而我们返回的 response 中需要改成服务端的端口号。可以随便分配一个比较大的端口号就行。</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">/* <span class="type">Port</span> number <span class="keyword">of</span> the client's control socket. <span class="type">Response</span> includes port number <span class="keyword">of</span> *our* control port */</span><br><span class="line">final <span class="built_in">int</span> clientControlPort = <span class="type">Integer</span>.valueOf(value);</span><br><span class="line"></span><br><span class="line">controlChannel = createRtpChannel(</span><br><span class="line">substitutePort((<span class="type">InetSocketAddress</span>)ctx.getChannel<span class="literal">()</span>.getLocalAddress<span class="literal">()</span>, <span class="number">53670</span>),</span><br><span class="line">substitutePort((<span class="type">InetSocketAddress</span>)ctx.getChannel<span class="literal">()</span>.getRemoteAddress<span class="literal">()</span>, clientControlPort),</span><br><span class="line"><span class="type">RaopRtpChannelType</span>.<span class="type">Control</span></span><br><span class="line">);</span><br><span class="line">responseOptions.add(<span class="string">"control_port="</span> + ((<span class="type">InetSocketAddress</span>)controlChannel.getLocalAddress<span class="literal">()</span>).getPort<span class="literal">()</span>);</span><br></pre></td></tr></table></figure>
<p><strong>timing_port</strong> 则是 timing channel 对应的客户端的端口号。</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">/* <span class="type">Port</span> number <span class="keyword">of</span> the client's timing socket. <span class="type">Response</span> includes port number <span class="keyword">of</span> *our* timing port */</span><br><span class="line">final <span class="built_in">int</span> clientTimingPort = <span class="type">Integer</span>.valueOf(value);</span><br><span class="line"></span><br><span class="line">timingChannel = createRtpChannel(</span><br><span class="line">substitutePort((<span class="type">InetSocketAddress</span>)ctx.getChannel<span class="literal">()</span>.getLocalAddress<span class="literal">()</span>, <span class="number">53669</span>),</span><br><span class="line">substitutePort((<span class="type">InetSocketAddress</span>)ctx.getChannel<span class="literal">()</span>.getRemoteAddress<span class="literal">()</span>, clientTimingPort),</span><br><span class="line"><span class="type">RaopRtpChannelType</span>.<span class="type">Timing</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">responseOptions.add(<span class="string">"timing_port="</span> + ((<span class="type">InetSocketAddress</span>)timingChannel.getLocalAddress<span class="literal">()</span>).getPort<span class="literal">()</span>);</span><br></pre></td></tr></table></figure>
<p><strong>server_port</strong> 这个 key 并不在 SETUP 的参数列表中，但是你需要在 response 中带上，告知客户端你在哪个端口打开了你的 audio 数据接收。因此它不需要主动去连接客户端的端口。</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">/* <span class="type">Create</span> audio socket <span class="keyword">and</span> <span class="keyword">include</span> it's port <span class="keyword">in</span> our response */</span><br><span class="line">audioChannel = createRtpChannel(</span><br><span class="line">substitutePort((<span class="type">InetSocketAddress</span>)ctx.getChannel<span class="literal">()</span>.getLocalAddress<span class="literal">()</span>, <span class="number">53671</span>),</span><br><span class="line">null,</span><br><span class="line"><span class="type">RaopRtpChannelType</span>.<span class="type">Audio</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">responseOptions.add(<span class="string">"server_port="</span> + ((<span class="type">InetSocketAddress</span>)audioChannel.getLocalAddress<span class="literal">()</span>).getPort<span class="literal">()</span>);</span><br></pre></td></tr></table></figure>
<p>其中的 <code>createRtpChannel</code> 方法中，我们同样也为每一个端口新建一个 bootstrap 实例，添加 pipeline Handler，然后将 timing 和 control 两个 port 连接到 SETUP 包带来的 iOS 客户端端口上去。连接成功后 SETUP 也就处理完毕了。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Set pipeline factory for the RTP channel */</span></span><br><span class="line">bootstrap.setPipelineFactory(<span class="keyword">new</span> ChannelPipelineFactory() &#123;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">ChannelPipeline <span class="title">getPipeline</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> AirPlayServer airPlayServer = AirPlayServer.getIstance();</span><br><span class="line"></span><br><span class="line">pipeline.addLast(<span class="string">"executionHandler"</span>, airPlayServer.getChannelExecutionHandler());</span><br><span class="line">pipeline.addLast(<span class="string">"exceptionLogger"</span>, exceptionLoggingHandler);</span><br><span class="line">pipeline.addLast(<span class="string">"decoder"</span>, decodeHandler);</span><br><span class="line">pipeline.addLast(<span class="string">"encoder"</span>, encodeHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* We pretend that all communication takes place on the audio channel,</span><br><span class="line">* and simply re-route packets from and to the control and timing channels</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">if</span> ( ! channelType.equals(RaopRtpChannelType.Audio)) &#123;</span><br><span class="line">pipeline.addLast(<span class="string">"inputToAudioRouter"</span>, inputToAudioRouterDownstreamHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Must come *after* the router, otherwise incoming packets are logged twice */</span></span><br><span class="line">pipeline.addLast(<span class="string">"packetLogger"</span>, packetLoggingHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* Must come *before* the router, otherwise outgoing packets are logged twice */</span></span><br><span class="line">pipeline.addLast(<span class="string">"packetLogger"</span>, packetLoggingHandler);</span><br><span class="line">pipeline.addLast(<span class="string">"audioToOutputRouter"</span>, audioToOutputRouterUpstreamHandler);</span><br><span class="line">pipeline.addLast(<span class="string">"timing"</span>, timingHandler);</span><br><span class="line">pipeline.addLast(<span class="string">"resendRequester"</span>, resendRequestHandler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (decryptionHandler != <span class="keyword">null</span>)&#123;</span><br><span class="line">pipeline.addLast(<span class="string">"decrypt"</span>, decryptionHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioDecodeHandler != <span class="keyword">null</span>)&#123;</span><br><span class="line">pipeline.addLast(<span class="string">"audioDecode"</span>, audioDecodeHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pipeline.addLast(<span class="string">"enqueue"</span>, audioEnqueueHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pipeline;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里的 pipeline 模型如图，也是三个 channel 处理流程的结构图，接下来的小节会展开说明：</p>
<p><img src="https://ooo.0o0.ooo/2016/08/28/57c300b59b89e.png" alt=""></p>
<h2 id="Audio_Pipeline__u548C__u4E09_u4E2A_Channel__u4E4B_u95F4_u7684_u5173_u7CFB"><a href="#Audio_Pipeline__u548C__u4E09_u4E2A_Channel__u4E4B_u95F4_u7684_u5173_u7CFB" class="headerlink" title="Audio Pipeline 和 三个 Channel 之间的关系"></a>Audio Pipeline 和 三个 Channel 之间的关系</h2><p>SETUP 结束之后就会开始收到 Audio 的数据包了。那么正式的处理就要开始了。</p>
<p>根据上面这张我总结出来的流程图，Airplay Service 可以根据 bootstrap 的 pipeline 的特性可以分为 <code>Up Stream</code> 和 <code>Down Stream</code>，一个是从客户端向服务端传递的消息，一个是从服务端向客户端传递的消息。</p>
<h5 id="Up_Stream"><a href="#Up_Stream" class="headerlink" title="Up Stream"></a>Up Stream</h5><p>首先不论是 Up 还是 Down Stream，都要先经过一个 Executor Handler，这个 Handler 中包括了一个线程池 Executor，当收到新的 UpStream 的数据包的时候，都会交给这个线程池来分配线程处理，在这里声明的线程池是一个 <code>OrderedMemoryAwareThreadPoolExecutor</code>。至于为什么在 Netty 的 pipeline 处理中要用到线程池来分配任务，可以参考<a href="http://www.techv5.com/topic/85/" target="_blank" rel="external">这篇文章</a>。简要地说就是由于 Handler 处理的工作量很大，为了不堵塞线程，Netty 会开好几个线程来处理，并且 <code>OrderedMemoryAwareThreadPoolExecutor</code> 能够保证处理的事件流的顺序，所以这里要加这一层。</p>
<p>数据进入 pipeline 之后，先是按照 RTP Packet 的格式进行 decode。在 Airplay 协议中，总共有如下几种 Packet Type：</p>
<ul>
<li>TimingRequest</li>
<li>TimingResponse</li>
<li>Sync</li>
<li>RetransmitRequest</li>
<li>AudioRetransmit</li>
<li>AudioTransmit</li>
</ul>
<p>其中 <code>TimingRequest</code>，<code>TimingResponse</code> 和 <code>Sync</code> 三种包类型都是属于 timing channel的，<code>RetransmitRequest</code> 是由 control channel 发起的对丢失包重传的请求，而 <code>AudioRetransmit</code> 和 <code>AudioTransmit</code> 都是由 audio channel 处理的包含了音乐数据的包。</p>
<p>消息继续往下传递，过了 Logger 之后就到了 router。router 维护了 audio channel 和另外两个 channel 之间的关系：router 将另外两个 channel 应该处理的包发送给对应的 Handler 去处理。</p>
<p>timing channel 不仅处理 Sync 数据包，同时在 channel 启动的时候也会启动一个单独的线程，每三秒钟执行一次 timing request，来确认本地时钟和客户端时钟的同步。而 control channel 做的事情则是在<strong>每收到一个</strong>新的 audio 数据包的时候都会<strong>确认一次数据包的 sequence number 是否和当前的是连续的</strong>，如果不是连续的，则将中间缺失的 number 标记为 missing 的数据包，并且向客户端发送一个 resend 的请求。当客户端发来了 <code>AudioRetransmit</code> 类型的数据包后，它的内容其实也是由 audio channel 接收的，control channcel 只是负责将刚才标记为 missing 的 sequence number 清除掉。</p>
<p>这两个 channel 在发送 request 的时候，也会发回到 audio channel 的 Handler 上来，通过 audio channel 这边的 encode 之后再发送出去。</p>
<p>而音乐数据包，则需要经过 AES 解密，这个解密器我们已经在 ANNOUNCE 的时候初始化好了，再经过 ALACDecoder，也是在 ANNOUNCE 的时候根据获得的媒体信息初始化的音频解码器，最后在 EnqueueHandler 中决定是否进入音频输出队列。</p>
<h5 id="Down_Stream"><a href="#Down_Stream" class="headerlink" title="Down Stream"></a>Down Stream</h5><p>往客户端发送的信息主要就是 timine 和 control 两个 channel 发起的一些请求了，audio channel 没有参与 down stream 的传递。</p>
<h2 id="EnqueueHandler__u97F3_u4E50_u6570_u636E_u961F_u5217_Handler"><a href="#EnqueueHandler__u97F3_u4E50_u6570_u636E_u961F_u5217_Handler" class="headerlink" title="EnqueueHandler 音乐数据队列 Handler"></a>EnqueueHandler 音乐数据队列 Handler</h2><p>当一个数据包经过层层解密和解析进入队列 Handler 之后，还要进行一大堆的时间戳合法性校验。<strong>每一个数据包都包含了很多帧，每一个帧都包含了一个帧序号，而每一个包也都有一个开始的帧序号。</strong>这里涉及到好几个地方的时间和与时间相对应的帧序列：</p>
<ul>
<li>Android 上  Audio Track 当前的 time</li>
<li>服务端队列中当前的 frame time</li>
<li>audio channel 中客户端传来的数据包中的 frame time</li>
<li>timing channel 中客户端传来的 Sync 和 timing response 包中的 frame time</li>
</ul>
<p>首先，我们允许一定范围的延迟，因为数据的传输，最开始的握手包括 iOS 端 Airplay 的机制都可能导致一定的延迟，因此 <strong>timing channel 最重要的作用之一就是维护和当前主队列最新 frame time的 offset</strong>。在每一个 timing response 的包中，我可以知道当前客户端的帧序号和服务端已经播放到的帧序号的 offset，在每解析一个数据包的时候，都要使用当前的 offset 来将客户端的帧序号转换成服务端的帧序号。每个包所带的 frame time 都可能有下面三种情况：</p>
<p>{0}. <strong>太迟了</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/08/29/57c42046195f6.png" alt=""></p>
<p>太迟了的情况如图所示，Line Time 这条轴就是 Audio Track ，<strong>Now Time</strong> 指的是当前音乐数据已经播放到什么时间了，这时候服务端接收到的一个 Packet，在包中的开始帧序列为 frame time，将这个帧序列转换为本地 Audio Track 对应的 Line Time，加上整个 Packet 包含的帧数，这个值与 Now Time 的差距<strong>转化成时间</strong>就是它的 Delay，当这个 delay 大于一个包长度的时候，由于它已经是播放过的时间线了，因此当一个包迟到了一个包的长度以上，它就不再被需要了，这时候这个包也就不会被加进 queue 了。</p>
<ul>
<li><strong>太早</strong></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/08/29/57c42030293f6.png" alt=""></p>
<p>太早的情况如图所示。有别于迟到的包，提前来的包其实是件好事，但是提前来的太早的包也不一定是件好事，它很可能要么是个错误的包，要么是个传输错误的包。因此对于提前到来的包一般都有一个时间长度的阈值，提前了大于多少秒到来的包才会被认定是 too early 然后被丢掉。在这个项目中这个阈值为 10 秒。</p>
<ul>
<li><strong>正正好，还行</strong></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/08/29/57c42013d2672.png" alt=""></p>
<p>正正好的情况如图所示。当一个数据包上述两种情况都不满足的时候，那就说明这个包的时间戳和帧序列是我们可以接受的，于是我们将这个包加进最后的音频处理队列。</p>
<p>进入了队列之后，我们还要将数据从这个队列中按顺序写到 Audio Track 上去。首先确保 Audio Track 的模式为 <strong>MODE_STREAM</strong> ，然后按照先进先出的顺序处理队列。其实在这里的处理中对于每一个包的开始帧的序列号又做了一次校验，类似上面对于 Delay 的做法，在这里又会从队列中再次筛选掉一些无用帧。接下去在将帧最后添加到 Audio Track 上去的时候，由于我们添加到队列中的包只是上面的<strong>正正好，还行</strong>的情况，很有可能会出现下一个包的开始和当前 Audio Track 的 Line Time 无法完全吻合的情况出现，这时候我们就需要在缺少帧的地方补上空帧，在多余帧的地方等待一会直到帧的序号完全对上，然后再将帧写入 Audio Track，这样能够保证最终播放的帧一定是序列正确的。</p>
<h2 id="u66F4_u591A"><a href="#u66F4_u591A" class="headerlink" title="更多"></a>更多</h2><p>其实这篇博客没有涉及太多安卓相关的东西，说白了也只是 Airplay Server 的一种 Java 实现。在实现的基础上，掌握了 Airplay 实现的原理的话，在不论是什么平台上都可以按照相应的原理来实现一个 Airplay Server。用这个将你闲置废弃的安卓手机变成你的无线音箱吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 Android 设备上搭建一个 Airplay Server 其实是一件很浩大的工程，因为这需要逆向苹果的 Airplay 协议流程啊格式啊什么的，万幸这件事情已经由许许]]>
    </summary>
    
      <category term="Airplay" scheme="http://sergiochan.github.io/tags/Airplay/"/>
    
      <category term="Android" scheme="http://sergiochan.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://sergiochan.github.io/tags/iOS/"/>
    
      <category term="细心写的技术博客" scheme="http://sergiochan.github.io/categories/%E7%BB%86%E5%BF%83%E5%86%99%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leetcode - Database 刷题记录]]></title>
    <link href="http://sergiochan.github.io/2016/08/26/Leetcode-Database-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://sergiochan.github.io/2016/08/26/Leetcode-Database-刷题记录/</id>
    <published>2016-08-26T07:50:59.000Z</published>
    <updated>2016-08-26T09:16:34.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>偶然被 Cee 酱吸引打开了 Leetcode，这个大一的时候觉得自己一辈子都不会去做的事情……居然。发现 OJ 竟然有 Database 模块了，想当年大学学数据库的时候最想有的就是一个和 OJ 一样的 SQL 在线运行平台，不然数据库上机只会教你安装 SQL Server = = 想想都想哭，时间都浪费在那了。而且做了之后发现好多自己在生产环境都不会遇到的神奇的坑……因此抽着空闲做了大部分，留下此篇笔记。</p>
<p>浮生若梦。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li><a href="#175_-_Combine_Two_Tables">175 . Combine Two Tables</a></li>
<li><a href="#177_-_Nth_Highest_Salary">177 . Nth Highest Salary</a></li>
<li><a href="#181_-_Employees_Earning_More_Than_Their_Managers">181 . Employees Earning More Than Their Managers</a></li>
<li><a href="#182_-_Duplicate_Emails">182 . Duplicate Emails</a></li>
<li><a href="#183_-_Customers_Who_Never_Order">183 . Customers Who Never Order</a></li>
<li><a href="#185_-_Department_Top_Three_Salaries">185 . Department Top Three Salaries</a></li>
<li><a href="#196_-_Delete_Duplicate_Emails">196 . Delete Duplicate Emails</a></li>
<li><a href="#197_-_Rising_Temperature">197 . Rising Temperature</a></li>
</ul>
<h3 id="175_-_Combine_Two_Tables"><a href="#175_-_Combine_Two_Tables" class="headerlink" title="175 . Combine Two Tables"></a>175 . Combine Two Tables</h3><p>Table: <code>Person</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line"><span class="header">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span></span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line"><span class="header">| LastName    | varchar |</span><br><span class="line">+-------------+---------+</span></span><br><span class="line">PersonId is the primary key column for this table.</span><br></pre></td></tr></table></figure>
<p>Table: <code>Address</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line"><span class="header">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span></span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line"><span class="header">| State       | varchar |</span><br><span class="line">+-------------+---------+</span></span><br><span class="line">AddressId is the primary key column for this table.</span><br></pre></td></tr></table></figure>
<p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A"><a href="#SQL__3A" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">SELECT Person<span class="class">.FirstName</span> AS FirstName ,Person<span class="class">.LastName</span> AS LastName ,Address<span class="class">.City</span> AS City,Address<span class="class">.State</span> AS State</span><br><span class="line">FROM Person</span><br><span class="line">LEFT JOIN Address ON (Person<span class="class">.PersonId</span> = Address.PersonId)</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A"><a href="#Comment__3A" class="headerlink" title="Comment :"></a>Comment :</h4><p>其实这题看起来很简单，但是要注意一个是用 <strong>LEFT JOIN</strong>，这样即使没有地址的 Person 也会被选出来，另一个是在 Select 的时候要按照它的要求命名选出来的列（由于这题老是遇到 Internal Error，相同的语句运行三遍通过一遍有两遍都是 Internal Error，因此并不是特别明白这个是不是必须的）但是 <strong>LEFT JOIN</strong> 是一定要有的，用 where 连接两个表的话也要特别注意到不存在的情况，因此本题还是用 JOIN 做连接好过用 where 做多表连接</p>
<h3 id="177_-_Nth_Highest_Salary"><a href="#177_-_Nth_Highest_Salary" class="headerlink" title="177 . Nth Highest Salary"></a>177 . Nth Highest Salary</h3><p>Write a SQL query to get the <em>n</em>th highest salary from the <code>Employee</code> table.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>--------+</span><br><span class="line"><span class="header">| Id | Salary |</span><br><span class="line">+----+--------+</span></span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line"><span class="header">| 3  | 300    |</span><br><span class="line">+----+--------+</span></span><br></pre></td></tr></table></figure>
<p>For example, given the above Employee table, the <em>n</em>th highest salary where <em>n</em> = 2 is <code>200</code>. If there is no <em>n</em>th highest salary, then the query should return <code>null</code>.</p>
<h4 id="SQL__3A-1"><a href="#SQL__3A-1" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">CREATE <span class="keyword">FUNCTION</span> getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  <span class="keyword">DECLARE</span> l INT;</span><br><span class="line">  <span class="keyword">DECLARE</span> r INT;</span><br><span class="line">  <span class="keyword">DECLARE</span> c INT;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SET</span> l = N-<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> COUNT(<span class="keyword">DISTINCT</span>(Salary)) <span class="keyword">INTO</span> c <span class="keyword">FROM</span> Employee;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">IF</span> N &gt; c <span class="keyword">THEN</span> </span><br><span class="line">    <span class="keyword">RETURN</span> (null);</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SELECT</span> Salary <span class="keyword">INTO</span> r <span class="keyword">FROM</span> Employee <span class="keyword">GROUP</span> <span class="keyword">BY</span> Salary <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary DESC LIMIT l, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">RETURN</span> (r);</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-1"><a href="#Comment__3A-1" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题简直变态。</p>
<p><img src="https://ooo.0o0.ooo/2016/08/26/57bfebf246fe0.png" alt=""></p>
<p>有这时间不如用 Python 什么的取出想要的数据在内存里排个序就完事了，非得整个 SQL Function，简直不知道说什么好。之前也写过 Function，但是主要是在 SQL 的 Procedure 编程里面会用到，而且基本不会写到复杂的逻辑 = = 复杂逻辑写个脚本什么的不好么……言归正传，这题考察了 Function 中的多个基本语法，包括 <strong>DECLARE</strong>, <strong>SET</strong>, <strong>SELECT 的结果赋值</strong>，<strong>IF…THEN…ELSE…END IF 逻辑</strong>。（这里其实题目没交代清楚，懒得吐槽了）如果遇到相同 Salary 的数据怎么办，其实题目的意思是如果两个人的 Salary 都为 200，一个人 Salary 为 300，那就只有第一 300 第二 200 而没有第三，他最后需要你返回的也只是 Salary 的值，因此我们需要先去重一遍得到 DISTINCT 的 Salary 值的数量，如果要获取的第 N 位并不存在，则返回 null，如果存在则用 <strong>GROUP BY 套 ORDER BY 套 LIMIT</strong> 来获取分组排序后的第 N - 1 位，记住要获取的第 N 位的 index 是 N - 1，所以这儿才要重新 DECLARE 一个 l 。</p>
<h3 id="181_-_Employees_Earning_More_Than_Their_Managers"><a href="#181_-_Employees_Earning_More_Than_Their_Managers" class="headerlink" title="181 . Employees Earning More Than Their Managers"></a>181 . Employees Earning More Than Their Managers</h3><p>The <code>Employee</code> table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> Name  </span>|<span class="string"> Salary </span>|<span class="string"> ManagerId </span>|</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string"> Joe   </span>|<span class="string"> 70000  </span>|<span class="string"> 3         </span>|</span><br><span class="line">|<span class="string"> 2  </span>|<span class="string"> Henry </span>|<span class="string"> 80000  </span>|<span class="string"> 4         </span>|</span><br><span class="line">|<span class="string"> 3  </span>|<span class="string"> Sam   </span>|<span class="string"> 60000  </span>|<span class="string"> NULL      </span>|</span><br><span class="line">|<span class="string"> 4  </span>|<span class="string"> Max   </span>|<span class="string"> 90000  </span>|<span class="string"> NULL      </span>|</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure>
<p>Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----------+</span></span><br><span class="line"><span class="header">| Employee |</span><br><span class="line">+----------+</span></span><br><span class="line"><span class="header">| Joe      |</span><br><span class="line">+----------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-2"><a href="#SQL__3A-2" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> a.<span class="keyword">Name</span> <span class="keyword">as</span> Employee </span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> a </span><br><span class="line"><span class="keyword">WHERE</span> a.ManagerId <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">NULL</span> <span class="keyword">AND</span> a.Salary &gt; </span><br><span class="line">(<span class="keyword">SELECT</span> b.Salary </span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">WHERE</span> b.<span class="keyword">Id</span> = a.ManagerId);</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-2"><a href="#Comment__3A-2" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题简单，不多解释。有 JOIN 的解法应该也行。</p>
<h3 id="182_-_Duplicate_Emails"><a href="#182_-_Duplicate_Emails" class="headerlink" title="182 . Duplicate Emails"></a>182 . Duplicate Emails</h3><p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>---------+</span><br><span class="line"><span class="header">| Id | Email   |</span><br><span class="line">+----+---------+</span></span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line"><span class="header">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span></span><br></pre></td></tr></table></figure>
<p>For example, your query should return the following for the above table:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+---------+</span></span><br><span class="line"><span class="header">| Email   |</span><br><span class="line">+---------+</span></span><br><span class="line"><span class="header">| a@b.com |</span><br><span class="line">+---------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-3"><a href="#SQL__3A-3" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> Person.Email </span><br><span class="line"><span class="keyword">FROM</span> Person </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Person.Email </span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(Person.<span class="keyword">Id</span>) &gt; <span class="number">1</span>;</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-3"><a href="#Comment__3A-3" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题简单的不能再简单了，然而还是有一个蛋疼的坑：<strong>COUNT 的用法</strong>。这题如果你在 <strong>having COUNT()</strong> 括号中写 * 号，是不能通过的，原因就在于 <strong>COUNT(*)</strong> 统计的是表中数据的总条数，而 <strong>COUNT(Person.Id)</strong> 统计的则是除去表中 Id 不等于 NULL 的记录的总条数。因此很可能它有某个 testcase 中有 NULL 的数据来考察对于 COUNT 的理解吧。</p>
<h3 id="183_-_Customers_Who_Never_Order"><a href="#183_-_Customers_Who_Never_Order" class="headerlink" title="183 . Customers Who Never Order"></a>183 . Customers Who Never Order</h3><p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>
<p>Table: <code>Customers</code>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>-------+</span><br><span class="line"><span class="header">| Id | Name  |</span><br><span class="line">+----+-------+</span></span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line"><span class="header">| 4  | Max   |</span><br><span class="line">+----+-------+</span></span><br></pre></td></tr></table></figure>
<p>Table: <code>Orders</code>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------------+</span><br><span class="line"><span class="header">| Id | CustomerId |</span><br><span class="line">+----+------------+</span></span><br><span class="line">| 1  | 3          |</span><br><span class="line"><span class="header">| 2  | 1          |</span><br><span class="line">+----+------------+</span></span><br></pre></td></tr></table></figure>
<p>Using the above tables as example, return the following:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-----------+</span></span><br><span class="line"><span class="header">| Customers |</span><br><span class="line">+-----------+</span></span><br><span class="line">| Henry     |</span><br><span class="line"><span class="header">| Max       |</span><br><span class="line">+-----------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-4"><a href="#SQL__3A-4" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> a.<span class="keyword">Name</span> <span class="keyword">AS</span> Customers </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> a </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders <span class="keyword">AS</span> b </span><br><span class="line"><span class="keyword">ON</span> (a.<span class="keyword">Id</span> = b.CustomerId) </span><br><span class="line"><span class="keyword">WHERE</span> a.<span class="keyword">Id</span> <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> b.CustomerId <span class="keyword">IS</span> <span class="literal">NULL</span>;</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-4"><a href="#Comment__3A-4" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题如果不用 Left Join 而用 Not in 的话也是可以的，只是效率方面 Not in 的话运行时间是排在百分之八十多，如果用了上面的 Left Join 则会好一些 （ runtime 每次运行会有微妙的差距，可能几十毫秒就是百分之几十的差距）。</p>
<p><img src="https://ooo.0o0.ooo/2016/08/26/57bfeb47b9186.png" alt=""></p>
<h3 id="185_-_Department_Top_Three_Salaries"><a href="#185_-_Department_Top_Three_Salaries" class="headerlink" title="185 . Department Top Three Salaries"></a>185 . Department Top Three Salaries</h3><p>The <code>Employee</code> table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> Name  </span>|<span class="string"> Salary </span>|<span class="string"> DepartmentId </span>|</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string"> Joe   </span>|<span class="string"> 70000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">|<span class="string"> 2  </span>|<span class="string"> Henry </span>|<span class="string"> 80000  </span>|<span class="string"> 2            </span>|</span><br><span class="line">|<span class="string"> 3  </span>|<span class="string"> Sam   </span>|<span class="string"> 60000  </span>|<span class="string"> 2            </span>|</span><br><span class="line">|<span class="string"> 4  </span>|<span class="string"> Max   </span>|<span class="string"> 90000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">|<span class="string"> 5  </span>|<span class="string"> Janet </span>|<span class="string"> 69000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">|<span class="string"> 6  </span>|<span class="string"> Randy </span>|<span class="string"> 85000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure>
<p>The <code>Department</code> table holds all departments of the company.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>----------+</span><br><span class="line"><span class="header">| Id | Name     |</span><br><span class="line">+----+----------+</span></span><br><span class="line">| 1  | IT       |</span><br><span class="line"><span class="header">| 2  | Sales    |</span><br><span class="line">+----+----------+</span></span><br></pre></td></tr></table></figure>
<p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows.</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">|<span class="string"> Department </span>|<span class="string"> Employee </span>|<span class="string"> Salary </span>|</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">|<span class="string"> IT         </span>|<span class="string"> Max      </span>|<span class="string"> 90000  </span>|</span><br><span class="line">|<span class="string"> IT         </span>|<span class="string"> Randy    </span>|<span class="string"> 85000  </span>|</span><br><span class="line">|<span class="string"> IT         </span>|<span class="string"> Joe      </span>|<span class="string"> 70000  </span>|</span><br><span class="line">|<span class="string"> Sales      </span>|<span class="string"> Henry    </span>|<span class="string"> 80000  </span>|</span><br><span class="line">|<span class="string"> Sales      </span>|<span class="string"> Sam      </span>|<span class="string"> 60000  </span>|</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-5"><a href="#SQL__3A-5" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> <span class="keyword">d</span>.<span class="keyword">Name</span> <span class="keyword">as</span> Department, a.<span class="keyword">Name</span> <span class="keyword">as</span> Employee, a.Salary <span class="keyword">as</span> Salary </span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">as</span> a,Department <span class="keyword">as</span> <span class="keyword">d</span> </span><br><span class="line"><span class="keyword">where</span> (<span class="keyword">select</span> <span class="keyword">count</span>(b.Salary) </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">e</span>.Salary <span class="keyword">as</span> Salary,<span class="keyword">e</span>.DepartmentId <span class="keyword">as</span> DepartmentId </span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">as</span> <span class="keyword">e</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">e</span>.Salary,<span class="keyword">e</span>.DepartmentId) <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">where</span> b.Salary &gt; a.Salary <span class="keyword">and</span> b.DepartmentId = a.DepartmentId) &lt;= <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">d</span>.<span class="keyword">Id</span> = a.DepartmentId </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.DepartmentId,a.Salary <span class="keyword">desc</span>;</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-5"><a href="#Comment__3A-5" class="headerlink" title="Comment :"></a>Comment :</h4><p>变态。这道题无愧是 Hard。上面这个解法虽然套了三层 Select ，但是它的运行时间都能排在前 15%</p>
<p><img src="https://ooo.0o0.ooo/2016/08/26/57bfea0296548.jpeg" alt=""></p>
<p>可见这题本来就是计算量很大的一次查询。主要考察了 <strong>group by  的用法</strong>，group by 的用法其实比较特殊，比如 Salary 相同但其他列不同的情况下，如果 group by Salary，那就只能 select salary，否则 salary 相同的项目会无法合并。（当然在你自己的 MySQL 环境下你可以配一个 full group mode 参数来强制允许 MySQL 能够执行这样的语句）因此在最中间我们先是将用户分组排序过后的数据分进一个单独的表 b ，这里的数据由于 group by Salary 和 DepartmentId，因此同部门相同 Salary 的数据已经被合并到一项去了，那么接着就确认当前同部门的工资比自己高的等级是否小于 3 个，如果是的话就取出来。</p>
<p><em>PS . 这句 SQL 主要就是长长长，其实也没什么 = =</em></p>
<h3 id="196_-_Delete_Duplicate_Emails"><a href="#196_-_Delete_Duplicate_Emails" class="headerlink" title="196 . Delete Duplicate Emails"></a>196 . Delete Duplicate Emails</h3><p>Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its <em>smallest</em> <strong>Id</strong>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line"><span class="header">| Id | Email            |</span><br><span class="line">+----+------------------+</span></span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line"><span class="header">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span></span><br><span class="line">Id is the primary key column for this table.</span><br></pre></td></tr></table></figure>
<p>For example, after running your query, the above <code>Person</code> table should have the following rows:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line"><span class="header">| Id | Email            |</span><br><span class="line">+----+------------------+</span></span><br><span class="line">| 1  | john@example.com |</span><br><span class="line"><span class="header">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-6"><a href="#SQL__3A-6" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">delete</span> <span class="keyword">from</span> Person <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ( </span><br><span class="line"><span class="keyword">select</span> b.<span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> Person) <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">d</span>.* </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> Person) <span class="keyword">as</span> <span class="keyword">d</span> </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">d</span>.<span class="keyword">Id</span> &lt; b.<span class="keyword">Id</span> <span class="keyword">and</span> b.Email = <span class="keyword">d</span>.Email)) <span class="keyword">as</span> <span class="keyword">test</span>);</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-6"><a href="#Comment__3A-6" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题考察的是 <strong>delete + where + in</strong> 的套路。delete where in 后面跟着的 select 里面的表不能是 delete 的 target，这个规则 delete 和 update 同理，要在 delete where in 后面加上 target 表的查询，你就需要套一层 select * … as … 就可以了。效率略低，但是实用。</p>
<h3 id="197_-_Rising_Temperature"><a href="#197_-_Rising_Temperature" class="headerlink" title="197 . Rising Temperature"></a>197 . Rising Temperature</h3><p>Given a <code>Weather</code> table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+---------+</span>------------<span class="code">+------------------+</span></span><br><span class="line"><span class="header">| Id(INT) | Date(DATE) | Temperature(INT) |</span><br><span class="line">+---------+------------+------------------+</span></span><br><span class="line">|       1 | 2015-01-01 |               10 |</span><br><span class="line">|       2 | 2015-01-02 |               25 |</span><br><span class="line">|       3 | 2015-01-03 |               20 |</span><br><span class="line"><span class="header">|       4 | 2015-01-04 |               30 |</span><br><span class="line">+---------+------------+------------------+</span></span><br></pre></td></tr></table></figure>
<p>For example, return the following Ids for the above Weather table:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span></span><br><span class="line"><span class="header">| Id |</span><br><span class="line">+----+</span></span><br><span class="line">|  2 |</span><br><span class="line"><span class="header">|  4 |</span><br><span class="line">+----+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-7"><a href="#SQL__3A-7" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> a.<span class="keyword">Id</span> </span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">AS</span> a </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> b.Temperature </span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">AS</span> b </span><br><span class="line"><span class="keyword">WHERE</span> b.<span class="built_in">Date</span> = <span class="keyword">SUBDATE</span>(a.<span class="built_in">Date</span>,<span class="number">1</span>) <span class="keyword">and</span> b.Temperature &lt; a.Temperature);</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-7"><a href="#Comment__3A-7" class="headerlink" title="Comment :"></a>Comment :</h4><p>此题又是看起来简单的不能再简单了。然而坑就在 Date 类型的数据操作上，第一，几乎少有人在实际生产环境中用 Date 这种不靠谱的数据格式，我还没见过谁生产环境不用时间戳的 = =，第二，这个坑谁知道啊…… Date 提供了加减的操作，看起来你好像可以直接 update 一个 date + 1 等于第二天的日期，然而碰到月份的边界这个加减就挂了啊（黑人问号.jpg） 碰到 01-01，减 1 之后等于 01-00，因此其实 SQL 是有日期操作<strong>函数</strong>的， SUBDATE(DATE, INTERVAL) 就可以实现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>偶然被 Cee 酱吸引打开了 Leetcode，这个大一的时候觉得自己一辈子都不会去做的事情……居然。发现 OJ 竟然有 Database 模块了，想当年大学学数据库的时候最]]>
    </summary>
    
      <category term="Leetcode" scheme="http://sergiochan.github.io/tags/Leetcode/"/>
    
      <category term="MySQL" scheme="http://sergiochan.github.io/tags/MySQL/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Photon 在 Unity 里快速搭建一个多人联机游戏]]></title>
    <link href="http://sergiochan.github.io/2016/08/18/%E4%BD%BF%E7%94%A8-Photon-%E5%9C%A8-Unity-%E9%87%8C%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E8%81%94%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    <id>http://sergiochan.github.io/2016/08/18/使用-Photon-在-Unity-里快速搭建一个多人联机游戏/</id>
    <published>2016-08-18T08:17:02.000Z</published>
    <updated>2016-08-24T15:39:42.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>如何最快的搭建一个 Unity 上的多人游戏？答案也许是自己搭建一个游戏服务器，也许是 LAN 解决方案，但是最快的解决方案还是使用成熟的第三方后端服务，我找到了 <a href="https://www.photonengine.com/en-US/Photon" target="_blank" rel="external">Photon</a>，一个看起来不错最后证实也挺靠谱的游戏后端解决方案。</p>
<p>一个游戏服务器，最主要的就是对不同参与者的事件同步和世界状态的同步，所以根本还是在于和服务器的长连接上，至于游戏中的用户体系，积分体系，货币体系这些，就是属于大后端的范畴了，也是可以独立于游戏同步服务器存在的系统。</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>首先你需要集成 <strong>Photon SDK For Unity</strong>，下载地址在<a href="https://www.photonengine.com/en-US/Realtime/Download" target="_blank" rel="external">这里</a>。</p>
<p><img src="/image/photon_1.png" alt="图1"> </p>
<p>你需要将下载下来的 <code>PhotoAssets</code> 中的所有文件都拖到你的项目的 <code>Assets</code> 文件夹里面，注意在 <code>Plugins</code> 里面有两个 <code>Photon3Unity3D.dll</code>，需要将 <code>Metro</code> 文件夹删掉，保留一个，否则在 Unity 编译的时候会报错。</p>
<p>拖进去之后只要 Unity 中 Compile 没有问题那第一步就大功告成了。</p>
<h3 id="u811A_u672C_u521B_u5EFA"><a href="#u811A_u672C_u521B_u5EFA" class="headerlink" title="脚本创建"></a>脚本创建</h3><p>创建一个你用来维护游戏网络逻辑的脚本，例如命名为 <code>GameNetworkClient.cs</code>，然后你需要在头部加上这几个引用：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections;</span><br><span class="line"><span class="keyword">using</span> ExitGames.Client.Photon;</span><br><span class="line"><span class="keyword">using</span> ExitGames.Client.Photon.LoadBalancing;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> Hashtable = ExitGames.Client.Photon.Hashtable;</span><br></pre></td></tr></table></figure>
<p>接着声明一个私有的 <code>LoadBalancingClient</code>对象，你的脚本中的所有网络逻辑都会通过这个 <code>client</code> 对象来发起和回调。我们这样在 Start 中初始化 <code>client</code> 对象：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">client</span> = <span class="keyword">new</span> LoadBalancingClient();</span><br><span class="line"><span class="keyword">client</span>.AppId = <span class="string">"&#123;你的 App_id&#125;"</span>;  </span><br><span class="line"><span class="keyword">client</span>.OnStateChangeAction += <span class="keyword">this</span>.OnStateChanged;</span><br><span class="line"><span class="keyword">client</span>.OnOpResponseAction += <span class="keyword">this</span>.OnRespAction;</span><br><span class="line"><span class="keyword">client</span>.OnEventAction += <span class="keyword">this</span>.OnEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">client</span>.ConnectToRegionMaster(<span class="string">"asia"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你的 App_id 可以在 Photon 官网注册完免费账户后在账户详情页获取，免费的账户拥有 <strong>20</strong> 个同时在线人数的限额，对于小范围好友间的游戏和测试足够了。</p>
</blockquote>
<p>其中，最后一行代码就是 <code>client</code> 去连接 MasterServer 的方法，这里面传入的参数要根据你的游戏所在地区来确定， Photon 在全球有很多分散的数据中心，因此支持很多区域的连接，具体支持的地区和代码如下：</p>
<table>
<thead>
<tr>
<th>Region</th>
<th>Hosted in</th>
<th>Token</th>
</tr>
</thead>
<tbody>
<tr>
<td>Asia</td>
<td>Singapore</td>
<td>asia</td>
</tr>
<tr>
<td>Australia</td>
<td>Melbourne</td>
<td>au</td>
</tr>
<tr>
<td>Canada, East</td>
<td>Montreal</td>
<td>cae</td>
</tr>
<tr>
<td>Europe</td>
<td>Amsterdam</td>
<td>eu</td>
</tr>
<tr>
<td>Japan</td>
<td>Tokyo</td>
<td>jp</td>
</tr>
<tr>
<td>South America</td>
<td>Sao Paulo</td>
<td>sa</td>
</tr>
<tr>
<td>USA, East</td>
<td>Washington</td>
<td>us</td>
</tr>
<tr>
<td>USA, West</td>
<td>San José</td>
<td>usw</td>
</tr>
</tbody>
</table>
<p>所以在这里我改成了 <code>asia</code>，事实证明新加坡的服务器是比较稳定的。</p>
<h3 id="u72B6_u6001_u7EF4_u62A4"><a href="#u72B6_u6001_u7EF4_u62A4" class="headerlink" title="状态维护"></a>状态维护</h3><p><code>client</code> 的状态主要就是根据上面初始化的时候给的三个 Action 来维护的，你需要在你的脚本里为这三个 Action 都加上你自己的 Handler。当然，如果你想按照他的 demo 里示范的那样去继承 <code>client</code> 并且 override 这三个 Action 的回调都是可以的。</p>
<h4 id="OnStateChanged"><a href="#OnStateChanged" class="headerlink" title="OnStateChanged"></a>OnStateChanged</h4><p>返回的是一个 <code>ClientState</code> 枚举值，主要就是一些 client 状态的值，例如</p>
<p> <code>connecting</code>，<code>connected</code>，<code>joining</code>之类的。</p>
<h4 id="OnRespAction"><a href="#OnRespAction" class="headerlink" title="OnRespAction"></a>OnRespAction</h4><p>返回的是一个 <code>OperationResponse</code> 对象，它会在每次你用 <code>client</code> 对象调用一些方法并且获得 response 之后调用，分别有下面这些类型的 Operation:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OperationCode</span> &#123;</span><br><span class="line">        [Obsolete(<span class="string">"Exchanging encrpytion keys is done internally in the lib now. Don't expect this operation-result."</span>)]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> ExchangeKeysForEncryption = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(255) Code for OpJoin, to get into a room.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Join = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(230) Authenticates this peer and connects to a virtual application<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Authenticate = <span class="number">230</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(229) Joins lobby (on master)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> JoinLobby = <span class="number">229</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(228) Leaves lobby (on master)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> LeaveLobby = <span class="number">228</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(227) Creates a game (or fails if name exists)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> CreateGame = <span class="number">227</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(226) Join game (by name)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> JoinGame = <span class="number">226</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(225) Joins random game (on master)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> JoinRandomGame = <span class="number">225</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public const byte CancelJoinRandom = 224; // obsolete, cause JoinRandom no longer is a "process". now provides result immediately</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(254) Code for OpLeave, to get out of a room.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Leave = (<span class="keyword">byte</span>)<span class="number">254</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(253) Raise event (in a room, for other actors/players)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> RaiseEvent = (<span class="keyword">byte</span>)<span class="number">253</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(252) Set Properties (of room or actor/player)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> SetProperties = (<span class="keyword">byte</span>)<span class="number">252</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(251) Get Properties<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GetProperties = (<span class="keyword">byte</span>)<span class="number">251</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(248) Operation code to change interest groups in Rooms (Lite application and extending ones).<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> ChangeGroups = (<span class="keyword">byte</span>)<span class="number">248</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(222) Request the rooms and online status for a list of friends (by name, which should be unique).<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> FindFriends = <span class="number">222</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(221) Request statistics about a specific list of lobbies (their user and game count).<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GetLobbyStats = <span class="number">221</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(220) Get list of regional servers from a NameServer.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GetRegions = <span class="number">220</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(219) WebRpc Operation.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> WebRpc = <span class="number">219</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，例如 <code>rasieEvent</code>，<code>setProperties</code> 或者加入离开游戏这些请求都是会有服务器的 response 的，你可以根据返回对象的 <code>ReturnCode</code> 来判断请求是否成功并且是否执行一些错误后的处理，<code>ReturnCode</code> 为 0 成功，不为 0 则失败，如果需要也可以从 <code>DebugMessage</code> 中获取错误提示信息。</p>
<h4 id="OnEventAction"><a href="#OnEventAction" class="headerlink" title="OnEventAction"></a><strong>OnEventAction</strong></h4><p>返回的是一个 <code>EventData</code> 对象，它会在每次 <code>client</code> 接收到新的 Event 的时候调用，具体的 Event 类型根据<code>EventData</code> 的 <code>EventCode</code> 来确定，分别有下面这些类型的 <code>EventCode</code>:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventCode</span> &#123;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(230) Initial list of RoomInfos (in lobby on Master)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GameList = <span class="number">230</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(229) Update of RoomInfos to be merged into "initial" list (in lobby on Master)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GameListUpdate = <span class="number">229</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(228) Currently not used. State of queueing in case of server-full<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> QueueState = <span class="number">228</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(227) Currently not used. Event for matchmaking<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Match = <span class="number">227</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(226) Event with stats about this application (players, rooms, etc)<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> AppStats = <span class="number">226</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(224) This event provides a list of lobbies with their player and game counts.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> LobbyStats = <span class="number">224</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(210) Internally used in case of hosting by Azure<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        [Obsolete(<span class="string">"TCP routing was removed after becoming obsolete."</span>)]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> AzureNodeInfo = <span class="number">210</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(255) Event Join: someone joined the game. The new actorNumber is provided as well as the properties of that actor (if set in OpJoin).<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Join = (<span class="keyword">byte</span>)<span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(254) Event Leave: The player who left the game can be identified by the actorNumber.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Leave = (<span class="keyword">byte</span>)<span class="number">254</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(253) When you call OpSetProperties with the broadcast option "on", this event is fired. It contains the properties being set.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> PropertiesChanged = (<span class="keyword">byte</span>)<span class="number">253</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(253) When you call OpSetProperties with the broadcast option "on", this event is fired. It contains the properties being set.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        [Obsolete(<span class="string">"Use PropertiesChanged now."</span>)]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> SetProperties = (<span class="keyword">byte</span>)<span class="number">253</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(252) When player left game unexpected and the room has a playerTtl &gt; 0, this event is fired to let everyone know about the timeout.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> Obsolete. Replaced by Leave. public const byte Disconnect = LiteEventCode.Disconnect;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(251) Sent by Photon Cloud when a plugin-call or webhook-call failed. Usually, the execution on the server continues, despite the issue. Contains: ParameterCode.Info.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;seealso cref="https://doc.photonengine.com/en/realtime/current/reference/webhooks"/&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> ErrorInfo = <span class="number">251</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>(250) Sent by Photon whent he event cache slice was changed. Done by OpRaiseEvent.<span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> CacheSliceChanged = <span class="number">250</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>EventCode</code> 你是可以自己定义的，这个 code 是个 <strong>byte 类型的整数</strong>，因此不能大于255，Photon 将从 0 开始的一大段值域都留给开发者用来自定义事件了。Photon 默认提供了 <code>GameList</code>，或者说 RoomList 的功能，你可以创建 <code>Room</code> 并且加入，<code>Room</code> 也有他自己的 Option，可以作为 Lobby，也就是所有人默认进入的 <code>Room</code>，当然也可以根据各种条件来查找 <code>Room</code>。</p>
<p>这里的 <strong>253 PropertiesChanged</strong> 是一个非常重要的 Event，在上面我提到过，联机游戏的后端最重要的部分之一就是世界状态的同步，在这里也就是<strong>房间的状态 Room Properties</strong>，因此在 Photon SDK 中，当你调用 <code>client</code> 对当前加入的 <code>Room</code> 的某个属性做出了改变，这就会产生一个事件通知到整个 <code>Room</code> 里的所有玩家，这通常用来同步一些全局的属性，例如光线，地形，怪物的血量之类的。</p>
<p>当然，你还可以自定义 Event，在我实现的 demo 中我就是用到了自定义 Event 来告知其他玩家我的状态。比如，整个地图 （可以看做就是一个 <code>Room</code>）中的玩家列表和位置是可以用全局状态来同步的，但是例如单个玩家的一些事件（使用物品，使用技能之类的）可能就需要由发起的用户向全 <code>Room</code> 的其他玩家发送一个同步事件。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> eventCode = <span class="number">1</span>; </span><br><span class="line">Hashtable evData = <span class="keyword">new</span> Hashtable (); </span><br><span class="line">evData.Add (<span class="string">"player_id"</span>, random_playerid);</span><br><span class="line">evData.Add (<span class="string">"pos_x"</span>, position.x);</span><br><span class="line">evData.Add (<span class="string">"pos_y"</span>, position.y);</span><br><span class="line"></span><br><span class="line">bool sendReliable = <span class="keyword">true</span>; </span><br><span class="line"><span class="keyword">if</span> (isConnected) &#123;</span><br><span class="line">	<span class="keyword">client</span>.OpRaiseEvent (eventCode, evData, sendReliable, RaiseEventOptions.Default);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后这个事件就会在除了发送者自己的其他玩家的客户端被回调。</p>
</blockquote>
<p><strong>这个时候收到的数据包怎么解出来呢？</strong></p>
<p>最后再说说坑了我半天的 <code>EventData</code> 中的数据抽取，在 <code>EventData</code> 中的数据格式十分蛋疼，例如上面这段代码里发送的数据，当你在其他客户端收到的时候，它的数据其实是存在 <code>EventData</code> 的 <code>Parameters</code> 这个属性变量里面，这是一个 <code>Dictionary&lt;byte,object&gt;</code> 类型的对象，通过 <code>ParameterCode.Data</code> 这个 key 将 data 取出来之后，里面才是我们传入的 Hashtable ，然而现在已经变成了一个 <code>Dictionary&lt;object,object&gt;</code> 对象了。在没有仔细查看源码的情况下，它的官方 demo 和文档并没有提及如何解包 <code>EventData</code> ,因此我是通过 Debug 的方式才最终摸清了里面的数据格式。当然后来又看了下它的头文件，才看到 <code>ParameterCode.Data</code> 😂。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>如何最快的搭建一个 Unity 上的多人游戏？答案也许是自己搭建一个游戏服务器，也许是 LAN 解决方案，但是最快的解决方案还是使用成熟的第三方后端服务，我找到了 <a hr]]>
    </summary>
    
      <category term="Photon" scheme="http://sergiochan.github.io/tags/Photon/"/>
    
      <category term="Unity" scheme="http://sergiochan.github.io/tags/Unity/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AVAudioPlayer的几个细节]]></title>
    <link href="http://sergiochan.github.io/2016/08/13/AVAudioPlayer%E7%9A%84%E5%87%A0%E4%B8%AA%E7%BB%86%E8%8A%82/"/>
    <id>http://sergiochan.github.io/2016/08/13/AVAudioPlayer的几个细节/</id>
    <published>2016-08-13T01:24:52.000Z</published>
    <updated>2016-08-13T01:25:39.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天在做 iOS 上的声波传输的时候，倒是遇到了几个和  AVAudioPlayer 有关的有趣问题，这种问题一般情况下我们都注意不到，只要踩过了才知道。</p>
<h3 id="u5173_u4E8E_PCM_Data"><a href="#u5173_u4E8E_PCM_Data" class="headerlink" title="关于 PCM Data"></a>关于 PCM Data</h3><p><code>AVAudioPlayer</code> 有一个初始化方法 <code>initWithData:error:</code>，这个方法的 API 说明是</p>
<blockquote>
<p>/<em> all data must be in the form of an audio file understood by CoreAudio </em>/</p>
</blockquote>
<p>在苹果的文档里，我们看到 AVAudioPlayer并不能支持 Stream 播放，它支持的文件格式有下面这些：</p>
<table>
<thead>
<tr>
<th>Format name</th>
<th>Format filename extensions</th>
</tr>
</thead>
<tbody>
<tr>
<td>AIFF</td>
<td><code>.aif</code>, <code>.aiff</code></td>
</tr>
<tr>
<td>CAF</td>
<td><code>.caf</code></td>
</tr>
<tr>
<td>MPEG-1, layer 3</td>
<td><code>.mp3</code></td>
</tr>
<tr>
<td>MPEG-2 or MPEG-4 ADTS</td>
<td><code>.aac</code></td>
</tr>
<tr>
<td>MPEG-4</td>
<td><code>.m4a</code>, <code>.mp4</code></td>
</tr>
<tr>
<td>WAV</td>
<td><code>.wav</code></td>
</tr>
</tbody>
</table>
<p>Stream 类型的音乐流只能被 AudioQueue 或者 AudioUnit 支持。因此要用 <code>AVAudioPlayer</code> 来播放 PCM 数据的话，注意要为这个 PCM 包加上 WAV 的 HEADER，然后将完整的 NSData 传给它。</p>
<h3 id="u5173_u4E8E_Play"><a href="#u5173_u4E8E_Play" class="headerlink" title="关于 Play"></a>关于 Play</h3><p><code>AVAudioPlayer</code> 还有个有趣的现象，我暂时没有找到官方文档的证据，那就是它的 <code>play</code> 不会对自身有一个引用来保持自己是活着的。<strong>只要它的父类之上有一个对象被释放了，那它也就被一起释放掉了</strong>。因此无论你是在第一层直接声明 self.audioPlayer play 还是 self.A.audioPlayer.play ，它的最上层父类必须有一个和 VC 相关或者全局相关的强引用，否则就会在 play 的时候就已经被释放掉了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天在做 iOS 上的声波传输的时候，倒是遇到了几个和  AVAudioPlayer 有关的有趣问题，这种问题一般情况下我们都注意不到，只要踩过了才知道。</p>
<h3 i]]>
    </summary>
    
      <category term="AVAudioPlayer" scheme="http://sergiochan.github.io/tags/AVAudioPlayer/"/>
    
      <category term="AVFoundation" scheme="http://sergiochan.github.io/tags/AVFoundation/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的 GayHub - 2016]]></title>
    <link href="http://sergiochan.github.io/2016/07/14/%E6%88%91%E7%9A%84-GayHub-2016/"/>
    <id>http://sergiochan.github.io/2016/07/14/我的-GayHub-2016/</id>
    <published>2016-07-14T11:05:27.000Z</published>
    <updated>2016-07-14T11:08:08.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>As the number of my repos keeps increasing, I have to create this new repo in order to create some kinds of <strong>index</strong> for all the repos that I have written.</p>
</blockquote>
<p><img src="/image/2016-gayhub.png" alt=""></p>
<h1 id="Get_to_know_me"><a href="#Get_to_know_me" class="headerlink" title="Get to know me"></a>Get to know me</h1><p>Sergio Chan, Born Hacker, Currently works at <em>RavenTech. Inc</em> as a Researcher and Hacker</p>
<p><a href="http://sergiochan.xyz" target="_blank" rel="external">My blog</a>  |  <a href="https://cn.linkedin.com/pub/sergio-chan/42/14b/a6" target="_blank" rel="external">Linkedin</a> | <a href="http://weibo.com/3089081773/profile?topnav=1&amp;wvr=6" target="_blank" rel="external">Weibo</a> </p>
<h1 id="Below__08is_the_list_of_most_of_my_repos"><a href="#Below__08is_the_list_of_most_of_my_repos" class="headerlink" title="Below is the list of most of my repos"></a>Below is the list of most of my repos</h1><blockquote>
<p>下面是我大部分的个人仓库的分类列表</p>
</blockquote>
<h3 id="Algorithm_Test__u7B97_u6CD5_u6D4B_u8BD5_u5B9E_u73B0_u7C7B"><a href="#Algorithm_Test__u7B97_u6CD5_u6D4B_u8BD5_u5B9E_u73B0_u7C7B" class="headerlink" title="Algorithm Test 算法测试实现类"></a>Algorithm Test 算法测试实现类</h3><ul>
<li><a href="https://github.com/SergioChan/Monty-Hall-Problem-Swift" target="_blank" rel="external">Monty-Hall-Problem</a> 三门问题的Swift验证演示Playground</li>
<li><a href="https://github.com/SergioChan/LinkedListSwift" target="_blank" rel="external">LinkedListSwift</a> Swift写的链表实现和各种基本操作</li>
<li><a href="https://github.com/SergioChan/SCPythonSudoku" target="_blank" rel="external">SCPythonSudoku</a> A Python Sudoku solved program. Python写的深度优先搜索解数独程序</li>
</ul>
<h3 id="Kit_or_Framework_for_iOS__u5B9E_u7528_u63A7_u4EF6_u7C7B"><a href="#Kit_or_Framework_for_iOS__u5B9E_u7528_u63A7_u4EF6_u7C7B" class="headerlink" title="Kit or Framework for iOS 实用控件类"></a>Kit or Framework for iOS 实用控件类</h3><ul>
<li><a href="https://github.com/SergioChan/SCBlueToothKit" target="_blank" rel="external">SCBlueToothKit</a> Blue Tooth Kit based on Core BlueTooth brings you to fly dealing with Blue Tooth development</li>
<li><a href="https://github.com/SergioChan/SCAwesomeNetworking" target="_blank" rel="external">SCAwesomeNetworking</a> An optimized networking framework based on AFNetworking and ProtoBuffer</li>
<li><a href="https://github.com/SergioChan/ImagePicker" target="_blank" rel="external">SCImagePicker</a> A highly encapsulated and fully functional open-source image picker written in Objc based on Photokit. Including album list, asset list, selection preview, camera and short video taking</li>
<li><a href="https://github.com/SergioChan/SCTableViewCell" target="_blank" rel="external">SCTableViewCell</a> Swipe-to-Delete Effects like iOS Native Mail App。一个模仿iOS8中的邮箱里面的cell删除动效以及滑动右侧菜单按钮效果的开源库</li>
<li><a href="https://github.com/SergioChan/SCNavigationControlCenter" target="_blank" rel="external">SCNavigationControlCenter</a> This is an advanced navigation control center on iOS that can allow you to navigate to whichever view controller you want. iOS上的改进的导航栏控制中心。</li>
<li><a href="https://github.com/SergioChan/SCActivityIndicatorView" target="_blank" rel="external">SCActivityIndicatorView</a> An indicator view providing you more freedom to control and customize it.一个魔性的菊花控件，助你摆脱系统菊花的各种烦恼</li>
<li><a href="https://github.com/SergioChan/SCRealm2SQLORM" target="_blank" rel="external">SCRealm2SQLORM</a> A realm ORM kit transferring realm usage to traditional SQLite usage. Just for learning and practicing.这是一个简单的realm的类似sqlite的数据库接口库。可以给熟悉sql语法，新入门realm的新手参考</li>
<li><a href="https://github.com/SergioChan/SCTagWriteView" target="_blank" rel="external">SCTagWriteView</a> An input custom view providing you ability to add and remove tags</li>
<li><a href="https://github.com/SergioChan/TUCalender" target="_blank" rel="external">TUCalender</a> 根据业务需要基于JTCalendar改写的日历控件</li>
<li><a href="https://github.com/SergioChan/UILabel-AttributedText" target="_blank" rel="external">UILabel-AttributedText</a> This is a solution category for UILabel to deal with the issue about special chracters.</li>
</ul>
<h3 id="Test_on_iOS_Basic_Frameworks_iOS_u57FA_u7840_u6846_u67B6_u7684_u6D4B_u8BD5_u5B9E_u73B0_u7C7B"><a href="#Test_on_iOS_Basic_Frameworks_iOS_u57FA_u7840_u6846_u67B6_u7684_u6D4B_u8BD5_u5B9E_u73B0_u7C7B" class="headerlink" title="Test on iOS Basic Frameworks iOS基础框架的测试实现类"></a>Test on iOS Basic Frameworks iOS基础框架的测试实现类</h3><ul>
<li><a href="https://github.com/SergioChan/RunloopTest" target="_blank" rel="external">RunloopTest</a>  This is a demo project for one of my blogs</li>
<li><a href="https://github.com/SergioChan/id-NSObjectDemo" target="_blank" rel="external">id-NSObjectDemo</a> This is a demo project for one of my blogs</li>
</ul>
<h3 id="Animations_on_iOS__u52A8_u753B_u7C7B"><a href="#Animations_on_iOS__u52A8_u753B_u7C7B" class="headerlink" title="Animations on iOS 动画类"></a>Animations on iOS 动画类</h3><ul>
<li><a href="https://github.com/SergioChan/SCTrelloNavigation" target="_blank" rel="external">SCTrelloNavigation</a> An iOS native implementation of a Trello Animated Navagation. iOS上类似trello的导航动效控件实现。</li>
<li><a href="https://github.com/SergioChan/SCCatWaitingHUD" target="_blank" rel="external">SCCatWaitingHUD</a> This is a cute and simple loading HUD on iOS :-P 这是一个可爱清新简单的加载HUD控件</li>
<li><a href="https://github.com/SergioChan/SCCinemaAnimation" target="_blank" rel="external">SCCinemaAnimation</a>  An iOS native implementation of a Cinema Animation Application. iOS上电影购票的动效实现</li>
</ul>
<h3 id="Apps__u72EC_u7ACB_u5E94_u7528_u7C7B"><a href="#Apps__u72EC_u7ACB_u5E94_u7528_u7C7B" class="headerlink" title="Apps 独立应用类"></a>Apps 独立应用类</h3><ul>
<li><a href="https://github.com/SergioChan/SCSelfAgile" target="_blank" rel="external">SCSelfAgile</a> A Project for my daily life and well…obviously for fun.<strong>(未上架)</strong></li>
<li><a href="https://github.com/SergioChan/PasswordTerminator" target="_blank" rel="external">PasswordTerminator</a> Simple random password generator and manager. <strong>(已上架)</strong></li>
<li><a href="https://github.com/SergioChan/MorningHorn" target="_blank" rel="external">MorningHorn</a>  This is a warm and simple Alarm App.<strong>(已上架)</strong></li>
</ul>
<h3 id="Others__u5176_u4ED6_u7C7B"><a href="#Others__u5176_u4ED6_u7C7B" class="headerlink" title="Others 其他类"></a>Others 其他类</h3><ul>
<li><a href="https://github.com/SergioChan/SCTornadoTCP" target="_blank" rel="external">SCTornadoTCP</a> A TCP Server and Client based on tornado</li>
</ul>
<h1 id="Organizations"><a href="#Organizations" class="headerlink" title="Organizations"></a>Organizations</h1><blockquote>
<p>参与和发起的一些组织和信息</p>
</blockquote>
<h3 id="hACKbUSTER"><a href="#hACKbUSTER" class="headerlink" title="hACKbUSTER"></a><a href="https://github.com/hACKbUSTER" target="_blank" rel="external">hACKbUSTER</a></h3><p>A hack team for hackathons, consists of the best hackers and designers. Top requirement, top idea, top tech level.</p>
<ul>
<li><a href="https://github.com/hACKbUSTER/FixPlusPlus" target="_blank" rel="external">FixPlusPlus</a>  First Prize For SegmentFault Hackathon Beijing. FIX++ (FixPlusPlus) is a professional display solution for future guidelines and instruction manuals. 更专业的拆解拼装展示方案，可应用于乐高玩具，宜家家具，苹果电脑等领域。</li>
<li><a href="https://github.com/hACKbUSTER/Renaissance" target="_blank" rel="external">Renaissance</a> First Prize for Art Hackathon 2015 China, Data becomes music. 数据听觉化的尝试。</li>
<li><a href="https://github.com/hACKbUSTER/UberGuide-iOS" target="_blank" rel="external">UberGuide</a> Third Prize for Uber Hackathon China 2016. Source code for iOS client of UberGuide Project. 用Uber API 让背包客通过Uber探索新的城市和文化。</li>
<li><a href="https://github.com/hACKbUSTER/ProjectDaVinci" target="_blank" rel="external">ProjectDaVinci</a> First Prize of SegmentFault ✖️ AngelHack Shenzhen Hackathon 2016</li>
<li><a href="https://github.com/hACKbUSTER/ProjectM-SafariExtension" target="_blank" rel="external">ProjectM</a> First Prize of SegmentFault ✖️ AngelHack Beijing Hackathon 2016</li>
</ul>
<h3 id="Animatious"><a href="#Animatious" class="headerlink" title="Animatious"></a><a href="https://github.com/Animatious" target="_blank" rel="external">Animatious</a></h3><ul>
<li><a href="https://github.com/Animatious/awesome-animation" target="_blank" rel="external">awesome-animation</a> A great list of open sourced UI Motion Library produced by Animatious Group.</li>
</ul>
<h3 id="@Conf"><a href="#@Conf" class="headerlink" title="@Conf"></a><a href="https://github.com/atConf" target="_blank" rel="external">@Conf</a></h3><p>@Conf 团队，做开发者自己的技术大会</p>
<ul>
<li><a href="https://github.com/atConf/atswift-2016-resources" target="_blank" rel="external">atswift-2016</a> Resource files for atswift conference 2016, including keynote, pdf, source projects or playgrounds. 2016中国Swift开发者大会</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>As the number of my repos keeps increasing, I have to create this new repo]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[“人工智能”邪教]]></title>
    <link href="http://sergiochan.github.io/2016/05/28/%E2%80%9C%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E2%80%9D%E9%82%AA%E6%95%99/"/>
    <id>http://sergiochan.github.io/2016/05/28/“人工智能”邪教/</id>
    <published>2016-05-28T07:06:50.000Z</published>
    <updated>2016-08-25T01:51:20.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我觉得现在的不论是全社会还是整个互联网圈，都弥漫着一股对于人工智能的狂热崇拜，就像是一种人工智能邪教一样，深深地蛊惑着每一个圈外人或者是无知者的心智。大家都觉得，人工智能好牛逼啊，人工智能可以比人还聪明，人工智能可以做到一切。Excuse me？作为一个微小的人类你却妄想把自己幻想中的，注意是幻想中的造物主创造出来，Excuse me？这是一些算法能解决的吗？充其量，造出来的不过是深蓝，不过是Alpha Go这种在我看来<strong>只能定义为机器的所谓“智能”</strong>。</p>
<blockquote>
<p>这里你可以移步<a href="http://baike.baidu.com/link?url=EP2EGmEI_HCXGn-iz4sLNr8dtbOsZ-eL_tSmQSk_4GCmdw5yiS-gkmJgSyJtJi5HEKSna62nvccqNG98RL-e1xE-PZBWqT9QAmH00609Ho_" target="_blank" rel="external">百度百科</a>来看看什么是智能：</p>
<p>从感觉到记忆到思维这一过程，称为“智慧”，智慧的结果就产生了行为和语言，将行为和语言的表达过程称为“能力”，两者合称“智能”，将<strong>感觉、记忆、回忆、思维、语言、行为的整个过程称为智能过程</strong>，它是智力和能力的表现。它们分别又可以用“智商”和“能商”来描述其在个体中发挥智能的程度。“情商”可以调整智商和能商的正确发挥，或控制二者恰到好处地发挥它们的作用。</p>
<p>它的定义是：</p>
<p>智能及智能的本质是古今中外许多哲学家、脑科学家一直在努力探索和研究的问题，但至今仍然没有完全了解，以致智能的发生与物质的本质、宇宙的起源、生命的本质一起被列为自然界四大奥秘。</p>
<p>近些年来，随着脑科学、神经心理学等研究的进展，人们对人脑的结构和功能有了初步认识，但对整个神经系统的内部结构和作用机制，特别是脑的功能原理还没有认识清楚，有待进一步的探索。因此，<strong>很难对智能给出确切的定义</strong>。而在仿生和模拟、超级计算机方面也有其特定含义。</p>
</blockquote>
<p>我们先来想想人类和机器所不同的地方在哪，以及我们为什么莫名其妙会产生这种对于人工智能的狂热崇拜。首先，<strong>机器需要规范的输入</strong>，机器只会根据输入去得到输出，对，无论是工厂里的生产机器，亦或是计算机，说白了都是机器，他需要对应的输入来产生输出，因此，当输入不对的时候，机器就炸了。就像你不能把一盘菜端到Alpha Go面前让他尝尝是什么味道一样，所以它充其量就是个机器。那么什么是智能呢？可以这么说，<strong>就目前的人类认知来说，整个宇宙里，唯一具有智能的生物或者是物体，只有人类</strong>。因为<strong>智能包括了很复杂的语言，情感，道德认知体系</strong>，我们可以根据任意的输入，或者进一步说，我们的感官能够接受的全部格式，来理解，转化为我们甚至都不能理解的输入，最后产生输出。这种输入我们现在所能了解到的就是，他可能是一种激素，也可能是一种神经电流，最后的输出也是非常复杂多样化的，具体表现为<strong>行为</strong>，例如我可以现在在电脑上写下这些文字，这就是我的智能的一种输出。正是因为智能的高级，所以才产生了复杂的社会结构和科学体系，正是因为智能，才有了我们，才有了我们存在的意义。</p>
<p>那么，我们接下去理解这件事情。我们其实是在<strong>试图创造一个否定自己存在意义的事物</strong>。这无关造物主不造物主的事情，毕竟造物主只是个比喻，只是说，<strong>我们的存在正是由我们的智能自我定义的</strong>，但是当更高级的智能存在之后，世界会以“他们”的定义而存在，那么我们的存在的意义就不复存在了，这是一种很矛盾的悖论。当然，简易起来理解，就是一些科学家所担心的，既然有了“他们”，那我们就没有存在的必要了，“他们”迟早会把我们从这个世界上抹去。然而这也并不会构成什么实质性的威胁，就像蚂蚁在地球上不也活的好好的 =。= 我这么理解自然是更加的以我们人类自我出发的视角去思考的。</p>
<p>这里我忽然想到前几天和哥们聊到的一个非常有意思的新闻，讲的是俄罗斯还是哪有一个小伙因为大脑里某个运动控制中枢坏掉了，导致了下半身瘫痪还是什么，决定接受换头手术。我记得我也在百度新闻里看到过这个雷人的新闻，还说接受的那颗头来自于中国什么的。在这里我们不去考究新闻的真实性，我们就单纯的来思考，如果有一个人因为大脑的病变导致全身都不听使唤了，这时候他要接受换头手术，假设换了一个健康的头之后他的身体能够被新的头所控制，那么这个行为本身是不是二？<strong>我们的存在不是由我们的身体来定义的</strong>，医学上定义一个人的死亡也是以脑死亡，即意识的活动来判定一个“人”的死亡，所以这下就有趣了，我们忽然发现我们的存在是由我们的大脑来决定的，我们身体上的任何一个部件都可以更换，唯独大脑不能更换，即使你长得和之前一模一样，一旦换了脑袋，你也不存在了。所以我从这联想到了上一段我提到的否定自身存在意义的想法，这是类似的，我们可以更换眼睛，鼻子，身体的各个部位，用机器来代替，但是如果用人工智能来替代了大脑，那你就不存在了，因为<strong>他会以他的存在来定义你的存在</strong>。当然，这里我只是想进一步证明我们的大脑或者说我们的智能才是我们存在的意义，而非肉身。<strong>我们的存在正是因为我们的存在而定义的</strong>，所以这个问题才会没有答案。</p>
<p>回到实际，刨除玄学问题来说，虽然我们对于人工智能的实现有了一定把握，我们通过对大脑运行机制的“猜测”来设计出了神经网络，就像 Alpha Go 所实现的那样，通过不断地深度学习来让智能自我进化。但是，表面上一路坦途，语义理解，语音识别，光学识别，模式识别 blahblah，各种算法都有各种团队在不断的创新，然而，(也可能因为我是个在这方面的悲观主义者)，我认为我们离真正的研究透彻差了十万八千里，甚至我们的方向就不对。我可以随便举几个例子，用光学识别来实现各种面部识别，手势识别，且不说光线的问题，就说干扰源的问题，你怎么解决，我戴上人皮面具，我拿来几个仿真手的模型来混淆你，没有几家公司哪几个算法能做到这种地步的……因为人都会判断错误的东西，你妄想机器能够判断对，也就是说，我们总是觉得，我们一定要造出比自己牛逼的事物，对，没错，但是我们永远造不出识别能力比人类牛逼的事物，为什么？因为我们本身的认知就十分有限，我们受自身条件的限制，只能通过我们有限的感官来感知世界。我会展开解释这一点。当然，这里为了防止被喷，我需要加上一个先提条件，那就是在<strong>有限样本量的情况下，机器算法通过大量训练是可以超过人类的识别能力的</strong>，但是这是在有限样本量的情况下，现实生活中，除非你把世界上每一个人都算进样本里，否则你的算法只要稍微用在一个特征远离你的样本库的人身上，算法识别能力就会远低于人类。</p>
<p>其实当你仔细思考，你就会明白，人类对于人工智能的狂热其实是来自千百年以来人类对于自身各种感官和器官限制的一种恐惧或者说是对于更强的个体的一种追求。当我们发现所谓的进化在几千年里并没有让人们进化出一双火眼金睛，其实现在的人类对于自身的进化速度是十分的怀疑和担忧的。且不论生物学界对于进化论的不断质疑，如果你不承认对于整个种族的怀疑，你会发现几乎全部的围绕人工智能的讨论，都是集中在如何创造一个进化速度是我们人类的几千几万倍的智能。所以说，我们如今所看见和了解的几乎所有人工智能，无一例外都是对于人体一些机能和感官的加强，例如远场识别麦克风，满足了人们千里耳的生理限制；计算机，满足了人脑记忆机制的缺陷和运算能力的缺陷；还有各种红外，高清，全景摄像头，满足了人们视觉上的局限性，能够同时识别更多物体。（虽然在嗅觉和味觉上人类并没有什么不满足的，这是极其有趣的一点，人类反而对这两种感官十分的自得其乐 =。=）这里提到了计算机，我想你应该会承认，人脑的运算速度远没有计算机快，对吧？但那仅仅是局限于计算，人脑的可贵和重要之处在于理解和识别，而这一点正是现在所有的人工智能所欠缺的。几乎所有的看起来名气挺大的人工智能，拉出来，涉及到最核心的人脑中执行理解的这块区域，基本上都是在打哈哈。</p>
<p>从Siri，到Cortana，到谷歌前段时间推出的人工智能，再到亚马逊的Echo，他们无一例外都扮演着助理的角色，或者说，在有限的场景下做出有限的反应执行有限的操作，你会很经常的遇到Siri用奇怪的口气告诉你她在互联网上为你查到以下信息，这其实只是一个语音搜索，这只是在弥补人脑对于信息获取途径的缺乏以及信息的存储缺陷。如果有一天你的大脑能够连上互联网，你能够在你的思维里通过搜索引擎去搜索信息，我想，这些“人工智能“就已经可以去吃土了。所以问题的根源是在于我们对于信息获取的途径，在于我们对信息的存储。</p>
<p>除了所谓“快速”的信息获取，如今这些大厂搞出来的人工智能还有一些或多或少方便到人们的功能，对，这些都只能算是功能。例如可以控制智能家居，控制播放器，控制blahblah，给你定闹钟，也有一些格式比较规范的内容他们可以为你梳理，例如音乐，新闻，比赛的实时比分，这些内容在互联网上大多数都是以一些固定的格式存在，因此他可以实时的为你从互联网上去抓取这些信息。然而正是由于功能的固定，和语义理解的局限，目前的，我敢说所有，所有这类人工智能，其实<strong>都相当于一个语音输入的DOS机</strong>，而且这也是我为什么反感过多的炒作人工智能的原因之首。  </p>
<p>由于人类的表达方式是没有办法被穷举的，这个先提条件我们必须先达成一致，所以当你只是在用一个有限的指令集去实现这个所谓的智能，或者说在我们可以预见的未来都没有办法摆脱一个大的句式库或者语法库的形式，那么这个指令集其实就是DOS指令一样，是需要用户去学习的。你也许会说，任何交互都有学习成本，只不过现在的交互在不断演进罢了，所以学习成本不应该作为首要考虑的因素。确实，现在的语音助理类软件有非常多，我暂且不称呼他们为人工智能，用户接触他们的时间也已经挺长的了，我们也在慢慢发现我们适应了他们的局限性，我们会按照Siri能听懂的格式告诉他 几点几分给谁谁谁发短信，然后他问你要发送什么，然后你就一个字一个字的把你要发的短信读给她听。这种情况下，当你的所谓智能真正带来了一些方便的时候，用户其实是愿意也自动的会去付出这个学习成本的。但是，第一，这仍然不能称之为智能，第二，我们可能陷入了和DOS时代类似的误区。  </p>
<p>我到过一些在中国可以算得上三四线的城市，那么更别说中亚，非洲大片大片的地区了，这些地方的人口，虽然一直在享受着计算机时代带来的红利，但是同时他们也没办法过多的接触计算机。仔细想想，其实在讨论，追求和渴望，甚至去创造人工智能的人群里，基本上大多数人所从事的行业都和计算机相关，或者说日常较为频繁的接触计算机。这类人群确实已经在图形操作系统的时代里完成了进化。但是如果我们放眼整个人类文明，这个进程仍然是非常缓慢的，根本原因一个是在于早先的计算机硬件成本，一个还是在于图形界面操作系统的学习成本仍然存在（你敢说Windows的学习成本低我跟你急，如果你是个学计算机的，你被多少人找你重装过系统了？）。图形操作系统的普及很大意义上就是因为当时的世界上只有极少极少数的极客会将一整张DOS命令表背的滚瓜烂熟轻车熟路然后完全通过指令来控制整个系统，这些人封闭在自己的世界里，认为自己正在创造新世界，认为自己很酷，不可否认，对于开发者来说，命令行是非常方便和高效的一个方法，然而对于消费者，对于Entire Human Species，这无疑是一个封闭，自我的群体。而我认为由于互联网浪潮的兴起，现在的整个社会正有这个趋势，而且由于如今互联网能够在其他行业看来更轻而易举的融资，这个原本是负面的效应反而被钱洗了个脸，成为了一个新的社会生产力。我们封闭的有理，我们酷的有理，因为我们更有钱，而且，更重要的是，技术这个事情，相比于传统行业，更容易白手起家，这对于社会阶层流动等等等等都是有积极作用的（这里如果是经济学家应该能分析出个长篇大论吧），因此种种外界因素作用之下，使得我见过很多代码狂人，整天就是写代码研究算法，并且觉得自己非常屌。<strong>这个社会在助长他们的封闭性。</strong></p>
<p>可以说，乔布斯热衷于图形操作系统，是希望解放人类的创造力和生产力，然而如今？我们需要新的突破。现在的操作系统，完全可以和Flow一样存在于云端，而客户端，也就是过去意义上的电脑，只有显示的设备和网络连接的设备，以及一个麦克风，它的成本可以做到极低，这在硬件的实现上已经没有了理论障碍。然而在软件层面，这仍然是一个没有解开的坎。</p>
<p>当然，在这里我并不是认为类似Siri，Cortana或者Echo，Rokit之流没有什么意义，相反，他们在这个时代是一个勇敢的先驱者，只不过他们的意义没有那么夸张罢了。我所认为的下一个时代，也就是未来的时代，<strong>现在还没有到来</strong>。可以肯定的是<strong>下一个时代的来临不是光靠一群程序员天天写着什么O2O什么打车软件就可以创造出来的，也不是一群程序员今天写个电商网站明天写个论坛就能创造出来的</strong>，这些都只是商业模式，都只是创造财富的一种手段，做的极少数顶尖的独角兽和巨头也不过就是在或多或少的改变人类生活，却并不足以成为推动人类文明进化的重要力量（Ps. 写完之后校对的时候发现这句话也许有些过激，然而却是真真的反映了当下互联网时代缺乏真正的革命性创新的现状，读者不必太过较真）。所以，程序员们，有些时候不要老是被大家在做什么或者大公司在做什么所蒙蔽了双眼，有些时候冷静下来好好思考一下自己所处的时代，也许你会明白其实我们还有更大的使命去完成，更伟大的事情等着被创造。也许你就会明白，大部分人不过都是在重复别人走过的路，如果可以为整个人类去踩出一条新路，那岂不是此生无憾了？</p>
<p>当我们用代码，算法，想去实现一个所谓的人工智能的时候，其实这和造物主创造我们是一样的过程。我们尚且无法明白人类是如何被创造出来的，我们尚且只能用基因进化论来搪塞，但是不能否认的是，生物学界并无法定义人类的意识是什么时候，什么条件下，具体又是如何产生的。尼安德特人？得了吧。所以我们的基因，我们的造物主为我们写下的基因，其实就和我们现在写的代码一样，都是去定义一个物体，并且教会它各种基本的方法，例如我们人类的肌肉运动，看，听，吃，拉屎，就相当于一个程序里的基本方法加减乘除开方等等。当有了这些之后，基因又继续教会了我们去思考，去学习，去识别，从而诞生了人类，而现在我们教会了我们要创造的这个“事物”去学习，但是还没有人能够真正教会它去思考和识别（当然如果那样一天已经到来了现在的世界可能就面目全非了）。所以我觉得，想要真正的，或者说最正确最合理的去创造一个人工智能的方式，如果你真的想要这么做的话，不是从你的行为出发，也不是从你想要它帮你放一首歌会如何说的话出发，而应该从我们的大脑和基因出发，去理解和反编译我们自己的代码，去明白我们的基因是如何变成控制我们成长，控制我们生老病死七情六欲的代码，这才是让我感觉真正热血沸腾的事情。当然，如果有一天这个技术能够获得突破，那就真的算是人类文明进化的一大步了吧。</p>
<p>最后声明：<strong>通篇扯淡，说的都是废话，不要相信，仅博一乐</strong>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我觉得现在的不论是全社会还是整个互联网圈，都弥漫着一股对于人工智能的狂热崇拜，就像是一种人工智能邪教一样，深深地蛊惑着每一个圈外人或者是无知者的心智。大家都觉得，人工智能好牛]]>
    </summary>
    
      <category term="哲学" scheme="http://sergiochan.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="扯淡" scheme="http://sergiochan.github.io/tags/%E6%89%AF%E6%B7%A1/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016-04-11 去战斗]]></title>
    <link href="http://sergiochan.github.io/2016/04/11/2016-04-11-%E5%8E%BB%E6%88%98%E6%96%97/"/>
    <id>http://sergiochan.github.io/2016/04/11/2016-04-11-去战斗/</id>
    <published>2016-04-11T08:55:11.000Z</published>
    <updated>2016-08-19T06:35:03.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>遇到的挑战越大，获得的快感也越强</p>
<p>– 著名黑客凯文·米特尼克（Kevin Mitnick）</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>遇到的挑战越大，获得的快感也越强</p>
<p>– 著名黑客凯文·米特尼克（Kevin Mitnick）</p>
</blockquote>
]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我是怎么踩过在 OSX 上录屏的坑的]]></title>
    <link href="http://sergiochan.github.io/2016/03/23/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E8%B8%A9%E8%BF%87%E5%9C%A8-OSX-%E4%B8%8A%E5%BD%95%E5%B1%8F%E7%9A%84%E5%9D%91%E7%9A%84/"/>
    <id>http://sergiochan.github.io/2016/03/23/我是怎么踩过在-OSX-上录屏的坑的/</id>
    <published>2016-03-23T15:55:44.000Z</published>
    <updated>2016-03-23T16:03:40.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天开始在研究 OSX 上的屏幕录制并且实时获取视频流或图像帧的实现。遇到了非常大的阻力，各种问题，昨晚纠结了一整晚，终于在小萌的启发下慢慢找到了解决办法，把谷歌和 stackoverflow 都翻了个底朝天，最后的解决有点意外，中间还是有一些细节需要求证，然而除了 Apple Doc 已经没有任何参考文献了，而有些机制 Apple Doc 中都不会涉及。所以此刻迫不及待的想要写一篇博客，来纪念万里长征的第一步。</p>
<p>要实现录屏，有两种途径，一种是通过 <code>Core Graphic</code>， 一种是通过 <code>AVFoundation</code>。 <code>Core Graphic</code> 的话，你可以找到苹果官方的一份 <a href="https://developer.apple.com/library/mac/samplecode/SonOfGrab/Introduction/Intro.html" target="_blank" rel="external">SampleCode</a>，如果使用了 </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> screenShot = <span class="built_in">CGWindowListCreateImage</span>(<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, [<span class="keyword">self</span> screenRect]<span class="variable">.size</span><span class="variable">.width</span>, [<span class="keyword">self</span> screenRect]<span class="variable">.size</span><span class="variable">.height</span>), k<span class="built_in">CGWindowListOptionOnScreenOnly</span>, k<span class="built_in">CGNullWindowID</span>, k<span class="built_in">CGWindowImageDefault</span> |k<span class="built_in">CGWindowImageNominalResolution</span>);</span><br></pre></td></tr></table></figure>
<p>它的优点在于你可以根据 <code>WindowID</code> 来获取<strong>指定窗口</strong>的图像，并且可以通过 <code>ListOption</code> 来设定各种包括桌面图标，去除桌面图标，去除桌面，这些七七八八的设置，所以微信 Mac 端的截屏功能应该就是使用了上面这行代码。<strong>所以我们也可以设置一个 NSTimer， 来按照六十分之一秒一帧的速度来获取截图，并且形成一个流。</strong> 实践表明性能还不错，对于录屏这种事情烧一烧 CPU 是常有的事情，毕竟你需要按帧来计算像素，而且对于 Mac 而言，CPU 并不是什么特别大的问题 =。= 因此这种办法是<strong>可行的</strong>，然而我觉得不够优雅。</p>
<p>同样，Core Graphic 中还有一种实现办法：<code>CGDisplayCreateImage</code>：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> Ref = <span class="built_in">CGDisplayCreateImage</span>(display);</span><br><span class="line"><span class="comment">//NSData *data = (NSData *)CFBridgingRelease(CGDataProviderCopyData(CGImageGetDataProvider(Ref)));</span></span><br><span class="line">screenImg = [[<span class="built_in">NSImage</span> alloc] initWith<span class="built_in">CGImage</span>:Ref size:<span class="built_in">CGDisplayScreenSize</span>(display)];</span><br><span class="line"><span class="comment">//screenImg = [image mutableCopy];</span></span><br><span class="line"><span class="built_in">CGImageRelease</span>(Ref);</span><br><span class="line"><span class="built_in">CGDisplayRelease</span> (display);</span><br></pre></td></tr></table></figure>
<p>这种实现的机制和上述的是一致的，实现出来的效果和性能也都不错，但是同样的还是觉得不够优雅。</p>
<p>所以此刻就要转向 <code>AVFoundation</code> 了。在 <code>AVFoundation</code> 中，有一个 input 类叫做 <code>AVCaptureScreenInput</code> 这个 input 直接可以获得到当前屏幕的视频输入。这时候我想起两年前我做过视频追踪人脸的 sdk，简单地说就是通过 <code>AVDeviceCapture</code> 来获取相机的 input 然后打开一个 <code>AVSession</code>， 然后再将 input 里面的 buffer 读出来，对每一帧进行人脸检测的运算。然后我按照苹果官方的一个录屏的例子和一个 Github 上存在不多的这方面的仓库实现了简单的录屏，使用了 <code>AVCaptureMovieFileOutput</code> 作为 output。到这里的时候，一切都很顺利，输出到 mov 文件的录屏都是正常的。然后我开始了从缓冲区读取 buffer 的工作，简单来说，从缓冲区读帧是根据 <code>AVCaptureFileOutputDelegate</code> 里面的一个回调 </p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="pp">- <span class="params">(void)</span>captureOutput:<span class="params">(<span class="variable">AVCaptureFileOutput</span> *)</span>captureOutput didOutputSampleBuffer:<span class="params">(<span class="variable">CMSampleBufferRef</span>)</span>sampleBuffer fromConnection:<span class="params">(<span class="variable">AVCaptureConnection</span> *)</span>connection;</span></span><br></pre></td></tr></table></figure>
<p>来实现的。这里的 <code>CMSampleBuffers</code> 是一个 <code>Core Foundation</code> 的对象，它包含了零个或多个压缩或未压缩过的特定媒体类型的抽样，通常被用来传递媒体数据。一个 <code>CMSampleBuffers</code> 可以包含：</p>
<ul>
<li><code>CMBlockBuffer</code>, 可能包含一个或多个的 sample (话说 sample 可以翻译为帧么？还是取样的意思……)</li>
<li><code>CVImageBuffer</code> 包含了 buffer 层级的附件和 sample 层级的附件，还包括了包含的所有 sample 的格式，大小和时间信息</li>
</ul>
<p>按照 Apple Doc， 一个 <code>CMSampleBuffers</code> 就是这两种 buffer 之一的一个 wrapper， 因此每一个 <code>CMSampleBuffers</code> 只会包含其中之一。你需要用不同的方法来取出里面的数据。所以我就很正常的按照最正常的写法来取 buffer 了：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">CVImageBufferRef imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer)<span class="comment">;</span></span><br><span class="line">CVPixelBufferLockBaseAddress(imageBuffer,0)<span class="comment">;        // Lock the image buffer</span></span><br><span class="line">        </span><br><span class="line">uint8_t *baseAddress = (uint8_t *)CVPixelBufferGetBaseAddressOfPlane(imageBuffer, 0)<span class="comment">;   // Get information of the image</span></span><br><span class="line">size_t bytesPerRow = CVPixelBufferGetBytesPerRow(imageBuffer)<span class="comment">;</span></span><br><span class="line">size_t width = CVPixelBufferGetWidth(imageBuffer)<span class="comment">;</span></span><br><span class="line">size_t height = CVPixelBufferGetHeight(imageBuffer)<span class="comment">;</span></span><br><span class="line">CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">CGContextRef newContext = CGBitmapContextCreate(baseAddress, width, height, 8, bytesPerRow, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst)<span class="comment">;</span></span><br><span class="line">CGImageRef newImage = CGBitmapContextCreateImage(newContext)<span class="comment">;</span></span><br><span class="line">CGContextRelease(newContext)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">CGColorSpaceRelease(colorSpace)<span class="comment">;</span></span><br><span class="line">CVPixelBufferUnlockBaseAddress(imageBuffer,0)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>然而这个时候出了个小岔子，这里获取的 <code>CMSampleBuffers</code> 里面包的是 <code>CMBlockBuffer</code>！于是我开始查各种 stackoverflow， 无解， 一开始以为是视频格式的问题，需要按照 H264 的编码来解析，但是怎么可能呢…… 百思不得其解，即使我将 <code>CMBlockBuffer</code> 里面的 Data 读取了出来，也无法转换成 <code>NSImage</code>， 说明这个 Data 不是正常的 data。 那么有没有可能一帧被拆成多个 samples 来传输了呢…… 有可能，然而我尝试了仍然无果。</p>
<p>这时候我回头看看，发现我这里并没有将视频导出到文件的需求，有没有其他 output 来替代。偏巧我在 stackoverflow 上看到了<a href="http://stackoverflow.com/questions/15916808/capturing-blank-stills-from-a-avcapturescreeninput" target="_blank" rel="external">这个问题</a>，于是就用 <code>AVCaptureVideoDataOutput</code> 来尝试。尝试之前我已经有强烈预感了 - - 毕竟上一个 output 是直接输出到文件，而这个 output 明显是直接输出成 data。于是你只要这样给一个 output 就可以恢复正常了：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.output</span>  = [[<span class="built_in">AVCaptureVideoDataOutput</span> alloc] init];</span><br><span class="line">[((<span class="built_in">AVCaptureVideoDataOutput</span> *)<span class="keyword">self</span><span class="variable">.output</span>) setVideoSettings:[<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:@(kCVPixelFormatType_32BGRA),kCVPixelBufferPixelFormatTypeKey, <span class="literal">nil</span>]];</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.sergio.chan"</span>, <span class="number">0</span>);</span><br><span class="line">[(<span class="built_in">AVCaptureVideoDataOutput</span> *)<span class="keyword">self</span><span class="variable">.output</span> setSampleBufferDelegate:<span class="keyword">self</span> queue:queue];</span><br></pre></td></tr></table></figure>
<p>这时候的 sampleBuffer 已经可以正常按帧解析出来了，这里有两个问题，一个是在上面那段代码获取到一个 <code>CGImageRef</code> 的 <code>newImage</code> 对象后需要每一次都对 newImage 进行一次release，否则内存溢出就要爆炸了，一个是线程安全问题，在上面的代码里可以看出这个新的 <code>AVCaptureVideoDataOutputSampleBufferDelegate</code> 其实是在一个独立的线程上接收回调的，因此如果你要在这个 delegate 中进行 UI 操作的话，记得回到主线程操作 =。=</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@try</span> &#123;</span><br><span class="line">    CVImageBufferRef imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer);</span><br><span class="line">    CVPixelBufferLockBaseAddress(imageBuffer,<span class="number">0</span>);        <span class="comment">// Lock the image buffer</span></span><br><span class="line">    </span><br><span class="line">    uint8_t *baseAddress = (uint8_t *)CVPixelBufferGetBaseAddressOfPlane(imageBuffer, <span class="number">0</span>);   <span class="comment">// Get information of the image</span></span><br><span class="line">    size_t bytesPerRow = CVPixelBufferGetBytesPerRow(imageBuffer);</span><br><span class="line">    size_t width = CVPixelBufferGetWidth(imageBuffer);</span><br><span class="line">    size_t height = CVPixelBufferGetHeight(imageBuffer);</span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextRef</span> newContext = <span class="built_in">CGBitmapContextCreate</span>(baseAddress, width, height, <span class="number">8</span>, bytesPerRow, colorSpace, k<span class="built_in">CGBitmapByteOrder32Little</span> | k<span class="built_in">CGImageAlphaPremultipliedFirst</span>);</span><br><span class="line">    <span class="built_in">CGImageRef</span> newImage = <span class="built_in">CGBitmapContextCreateImage</span>(newContext);</span><br><span class="line">    <span class="built_in">CGContextRelease</span>(newContext);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">    CVPixelBufferUnlockBaseAddress(imageBuffer,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSImage</span> *image = [[<span class="built_in">NSImage</span> alloc] initWith<span class="built_in">CGImage</span>:newImage size:[<span class="keyword">self</span> screenRect]<span class="variable">.size</span>];</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(newImage);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">self</span><span class="variable">.imageView</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.imageView</span><span class="variable">.image</span> = image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Error at %@"</span>,exception<span class="variable">.debugDescription</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS. Cocoa 中获取 ScreenRect 的方法如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSRect</span>)screenRect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSRect</span> screenRect;</span><br><span class="line">    <span class="built_in">NSArray</span> *screenArray = [<span class="built_in">NSScreen</span> screens];</span><br><span class="line">    <span class="built_in">NSScreen</span> *screen = [screenArray objectAtIndex: <span class="number">0</span>];</span><br><span class="line">    screenRect = [screen frame];<span class="comment">//[screen visibleFrame];</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> screenRect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里后来又遇到一个小坑。如果使用的是 visibleFrame， 那么如果你的窗口处于全屏模式，获取 visibleFrame 的时候其实会把上面状态栏的那部分区域给省略了，因为计算 visibleFrame 的时候估计不考虑状态栏是否隐藏吧，所以这里用 frame 更好。</p>
</blockquote>
<p>这里从 delegate 中获取到每一帧的数据之后就可以对每一帧进行压缩，并且以 Data 的形式进行传输了。差点忘记最后介绍一下 <code>AVCaptureScreenInput</code> 的一些特性了：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.input</span><span class="variable">.capturesMouseClicks</span> = <span class="literal">YES</span>;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.input</span><span class="variable">.minFrameDuration</span> = CMTimeMake(<span class="number">1</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">self</span><span class="variable">.input</span><span class="variable">.scaleFactor</span> = <span class="number">0.5</span>f;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.input</span><span class="variable">.cropRect</span> = [<span class="keyword">self</span> screenRect];</span><br></pre></td></tr></table></figure>
<p>首先 <code>AVCaptureScreenInput</code> 可以记录下鼠标移动的轨迹，还可以记录鼠标的点击事件（自行体验），第二个属性设置的是最大帧率，也就是60帧一秒。第三个和第四个属性顾名思义分别是缩放的比例和最后输出的裁剪区域，设置这两个属性可以减少每一帧的大小，也就是说在输入的时候就已经限制过大小了，然后你再可以进行一些压缩什么的。最后其实 <code>AVCaptureScreenInput</code> 还有一个关键的属性，但是现在已经被废弃了，因为苹果已经把这个属性内置成系统默认了😂 <strong>重复帧会被自动取消</strong>，这在以前的版本是可以通过一个属性设置的，现在已经被默认采用了。</p>
<p>多余的说几点：</p>
<ul>
<li>其实 Core Media 那层有很多知识点，但是苦于文档太少，研究的人也太少，因此实在是举步维艰，感兴趣的朋友可以参考一下<a href="https://developer.apple.com/library/mac/documentation/CoreMedia/Reference/CMSampleBuffer/" target="_blank" rel="external">苹果的 Reference </a>看下这块的内容。</li>
<li>其实可能有些人知道在 <code>AVFoundation</code> 下面，<code>Core Media</code>之上还有一层叫做 <code>Video ToolBox</code>，这在2012年那会儿都是只有越狱的设备才能调用到的 Private API，但是2014年的 WWDC 苹果将这一层开放出来了，因此你可以在 <code>AVFoundation</code> 更深入的层次去做视频编码解码和流处理，这块的知识我这次只看了个大概，留下了一些资料出处：<a href="https://github.com/McZonk/VideoToolboxPlus" target="_blank" rel="external">Github</a>  <a href="https://developer.apple.com/videos/play/wwdc2014/513/" target="_blank" rel="external">WWDC</a></li>
</ul>
<p>最后，最重要的是！代码已经整理成开源库放在 <a href="https://github.com/RavenTech-GrowthHacker/RTScreenRecorder" target="_blank" rel="external">Github</a> 上了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天开始在研究 OSX 上的屏幕录制并且实时获取视频流或图像帧的实现。遇到了非常大的阻力，各种问题，昨晚纠结了一整晚，终于在小萌的启发下慢慢找到了解决办法，把谷歌和 stac]]>
    </summary>
    
      <category term="AVFoundation" scheme="http://sergiochan.github.io/tags/AVFoundation/"/>
    
      <category term="Cocoa" scheme="http://sergiochan.github.io/tags/Cocoa/"/>
    
      <category term="Cocoa入门？" scheme="http://sergiochan.github.io/categories/Cocoa%E5%85%A5%E9%97%A8%EF%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016.03.15]]></title>
    <link href="http://sergiochan.github.io/2016/03/15/2016-03-15/"/>
    <id>http://sergiochan.github.io/2016/03/15/2016-03-15/</id>
    <published>2016-03-15T09:59:28.000Z</published>
    <updated>2016-03-15T10:02:50.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>宠辱不惊。<br>努力去尝试吧，既然你能够有机会去改变世界了！</p>
<p>一步步脚踏实地走下去。<br>种下汗水。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>宠辱不惊。<br>努力去尝试吧，既然你能够有机会去改变世界了！</p>
<p>一步步脚踏实地走下去。<br>种下汗水。</p>
]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[知乎 Hackathon 之前对于知乎产品形态的一些疯狂想法]]></title>
    <link href="http://sergiochan.github.io/2016/03/08/%E7%9F%A5%E4%B9%8E-Hackathon-%E4%B9%8B%E5%89%8D%E5%AF%B9%E4%BA%8E%E7%9F%A5%E4%B9%8E%E4%BA%A7%E5%93%81%E5%BD%A2%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%AF%E7%8B%82%E6%83%B3%E6%B3%95/"/>
    <id>http://sergiochan.github.io/2016/03/08/知乎-Hackathon-之前对于知乎产品形态的一些疯狂想法/</id>
    <published>2016-03-08T03:02:40.000Z</published>
    <updated>2016-03-08T10:00:24.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>知乎的 Hackathon 又要开始了，然而不对外开放，因此也没办法参加了 =。- 实在可惜。<br>知乎一直是社区产品中比较奇葩的存在，因为同时期的其他社区都做得不是特别好，但是知乎带着并不特殊的产品形态，凭借着良好的运营，在社区类产品中鹤立鸡群。</p>
<p>然后<br>好久没参加 Hackathon 了😂<br>心里有点痒痒的</p>
<h2 id="Idea_A"><a href="#Idea_A" class="headerlink" title="Idea A"></a>Idea A</h2><p>第一个想法是一个开源的开放的人类知识库计划。互联网时代，一个革新是信息可以存在互联网上随时供大众访问，而知乎所在努力打造和维护的一种氛围，也是以知识为硬通货的共享经济。知乎通过良好的运营和口碑，积累了大量忠实用户，也有很大一部分处于社会高级知识阶层的用户愿意在这个社区里共享自己的知识。但是随着整个社区的快速扩张和开放，越来越多的知识需求方或者说知识缺乏者涌入了社区。这对于社区本来应该是好事，但是由于之前并没有对这些用户进行良好的区分，不得不说现在知乎的娱乐性越来越强，质量也没有以前那么好了。<br>所以我们需要这样一个开源的开放的人类知识库计划。为什么说是开源？因为任何人都可以申请成为贡献者，当然，贡献者会需要一定要求，比方说教授以上，论文质量，或者什么学术机构的负责人之类的，这样才可以保证进入这个知识库的知识都是得到出厂认证的。这个知识库可以以社区的形式存在，同一领域的不同专家可以各自发表意见，甚至可以互喷，要知道，人类的文明进步，可离不开辩论和争执。为什么说是开放？因为任何人都可以访问，都可以获取，它的存在形式，你可以理解为十万个为什么的进化版。在思考什么百度百科，维基百科这些所谓的同类产品的时候，我突然意识到这根本不在同一个维度上，十万个为什么忽然跳进我的脑海，一切就豁然开朗：百科是在完成对于事物的定义，而十万个为什么和这个所谓的知识库，是在完成对于知识的定义。知识的范畴可大了，才不仅仅包括事物。这也是百度经验，百度知道想做的事情吧。但是这两者的竞争力基本就可以不用考虑了。就像，你不会觉得十万个为什么会是知乎的竞争对手一样😂<br>So，十万个为什么这么伟大的存在，这个几乎所有人的知识启蒙老师，为什么现在地位越来越淡，没错，因为我们长大了啊😂，他所面对的人群和包含的知识水平都是很初级的，但是他在整个文化普及运动中起到了不可估量的作用。我觉得有兴趣的朋友可以去考证一下？（我记得以前看过类似的说法😂）所以，为了提高整个社会的知识水平，为了提高甚至整个人类文明的知识水平，同时利用互联网的优势，我觉得有必要，哪怕不是一个Hackathon能完成的东西，也应该有一家企业去完成这个艰巨的任务，抱着像谷歌那样的贡献社会，贡献人类的宗旨去努力。况且，这个知识库将是人类文明重新走上发展轨道的一块很重要的垫脚石。</p>
<blockquote>
<p>（别告诉我现在天天看新闻看到经济有多好生活有多富足你就觉得人类现在还是发展的很快了，信息革命应该已经没什么动力了，无人机VR什么的都只是很小的一部分，并不能带动一个时代，现在随着互联网创新能力的削弱，下一个科技时代的带动技术还没有出现，这才是我忧虑的地方）</p>
</blockquote>
<h2 id="Idea_B"><a href="#Idea_B" class="headerlink" title="Idea B"></a>Idea B</h2><p>第二个想法，是一个无比疯狂的想法，但是不幸的是，需要第一个想法的支撑。这也是我说<strong>「这个知识库将是人类文明重新走上发展轨道的一块很重要的垫脚石」</strong> 的原因。人类历史上所在进行的活动，一直都是在不断地将意识形态的东西转化成物质形态的东西，简单地说，就是将理论知识转化成哪怕是文字也好，产品也好的物质存在。人类在发展过程中不断地发现一些定律，发明一些理论，然后不断去打磨理论，就好比人类最后将 E=mc2 打磨成了小男孩一样。但是，没有人能够反向，也没有人想过反向。<br>我来讲一个很形象的故事吧。我想造一台手机，我需要先去了解各种手机厂商的历史，设计原理，我需要去学习工业设计，需要去学习什么人体工程学，然后我还要学习大量的硬件知识，或者说了解不同的硬件应该如何去组合来构成一个能够工作的机器，毕竟一些基本的组件现在都已经不用你去关心了，再然后你还要去学习各种材料化学方面的知识，来制作外壳之类的，就算是你了解完这些，你还要去了解销售，产品，仓储物流，市场营销这些七七八八的知识，从而把你的手机卖出去，当然，这些都没有算上手机里面的软件了。（我只是举例，所以说的不可能十分精确，毕竟我也没造过手机=。=）我们可以看到，人类历史上对于意识形态向物质形态转化的这种方式，随着我们文明的进化和物质形态复杂度的增加，已经变得十分的庞大和不可控制了。试想，如果让你去图书馆，或者更好一些，给你互联网，让你去搜索，你要花费多大的成本来获取这些所有的知识？因此我们可以试着反向去获取知识，将<strong>物质形态直接逆向解析成意识形态</strong>。我只要将这个手机拍下来，一个工具就会将它所包含的所有方面的知识都解析出来，并且以一种更直接和明显的方式显示出来。我就可以<strong>直接的</strong>获取到物质形态所包含的所有意识形态。  </p>
<p>这对于未来的教育，人类去了解世界的方式都是一个重大的变革。也就是说，通过人类文明几千年的积累和互联网技术的发展，将人类到目前为止所有的知识收集在一起，并且完成这样一个工具，让未来的人类能够更加直接的去获取知识，了解世界。我们之前所接受的教育，都是在教给我们几乎所有的基础理论知识，然后再去了解这个世界，到了大学，虽然好像是分开了专业，学习了不同的专业课，但是我们在选择专业的时候本身就是迷茫的，并且即使选择了专业，每个专业的细分领域还是非常的多，如果我们按照现有的模式去学习，那么可能我们要花4到10年的时间去循序渐进的获取知识，成为专业人才，更别说浪费在通识教育的十几年了。然而，如果有了这样一个工具，我们只需要教育未来的孩子们如何去使用这样的工具，这是几乎不用教的吧😂 然后他就可以用这个工具去学习，从最基础的数学定理到最接近用户的设计，以这种更具针对性的方式去学习，我想，就看重人的学习能力，而这样的人才，也会更早成长，更专业吧。<br>但是吧，我觉得这个工具最大的意义，还是在于完整了人类文明发展的一个循环。意识形态的知识通过实践转化为物质形态的产品，而产品可以被解析成知识，从而可以在意识形态上更好的创新。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>知乎的 Hackathon 又要开始了，然而不对外开放，因此也没办法参加了 =。- 实在可惜。<br>知乎一直是社区产品中比较奇葩的存在，因为同时期的其他社区都做得不是特别好]]>
    </summary>
    
      <category term="Hackathon" scheme="http://sergiochan.github.io/tags/Hackathon/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不要想当然的使用UITableView]]></title>
    <link href="http://sergiochan.github.io/2016/02/16/%E4%B8%8D%E8%A6%81%E6%83%B3%E5%BD%93%E7%84%B6%E7%9A%84%E5%B0%B1%E4%BD%BF%E7%94%A8UITableView/"/>
    <id>http://sergiochan.github.io/2016/02/16/不要想当然的就使用UITableView/</id>
    <published>2016-02-16T08:41:50.000Z</published>
    <updated>2016-02-17T06:07:39.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>一直想写一篇UITableView使用经验的干货，因为TableView实在是太万能了，它帮你维护了ContentSize，数据源加载，一些事件的回调还有最重要的是视图的重用，以至于有些项目（什么电商，什么O2O这类的应用）满地都是TableView，所以在一般项目中很容易出现对于TableView的滥用或者是误用。然而由于这种事情仁者见仁，智者见智，因此在一个项目组里，一些错误的风气很容易被持续甚至发扬下去。</p>
<p>我不打算在性能优化方面深入介绍，因为已经有很多关于TableView性能优化的博客了，我可能会稍微提到一些。这篇博客主要是关于整体结构，使用经验这方面的整理，让更多还没踩坑或者正在踩坑的同学们及时醒悟。</p>
<h2 id="u4E0D_u8981_u8BD5_u56FE_u8FC7_u5206_u7684_u53BB_u590D_u7528_u4E00_u4E2ATableViewController"><a href="#u4E0D_u8981_u8BD5_u56FE_u8FC7_u5206_u7684_u53BB_u590D_u7528_u4E00_u4E2ATableViewController" class="headerlink" title="不要试图过分的去复用一个TableViewController"></a>不要试图过分的去复用一个TableViewController</h2><p>想想在使用TableViewController或者包含了TableView的Controller的时候，如果遇到了如下的这类场景，我们一般会怎么做？</p>
<ol>
<li>联系人列表，有两个场景要使用，一个是好友列表，一个是手机联系人列表，甚至还有更多类型的联系人列表。好友列表中需要展示用户信息，例如头像，用户名，性别，等级之类，点击头像可以进入好友的个人主页，点击Cell可以进入聊天页面；而手机联系人列表中需要展示手机号，联系人姓名，头像等信息，需要标识是否可以发送邀请，点击Cell不会响应，点击头像进入发送邀请页面。</li>
<li>个人主页，样式基本一致，但是有三个场景要使用，分为好友个人主页，非好友个人主页和自己的个人主页。展示的基本信息都一样，例如用户名，姓名，性别，生日，等级这些信息，但是非好友和好友加载的数据源和显示的数据有略微不同，例如好友显示的是姓名，而非好友显示的是用户名。而自己的个人主页展示的数据更多，一些其他用户不可见的信息对自己全部都是可见的。同时好友个人主页可以编辑备注名或者分组，自己的个人主页能修改全部信息和上传头像，且修改要在当前页面直接修改，非好友个人主页可以发送好友请求，或者花费一些金币获取更详细的个人信息。</li>
</ol>
<p>以上这两个实例场景在基本的带一定社交功能的应用中都会普遍出现。大部分开发者对第一个场景的解决办法都是写在同一个控制器中，当然，这里也和一些产品经理对于需求顺序和需求提前预测的忽视有关。一些情况里都是先实现了好友列表然后才要加入手机联系人列表，这样，在基本结构类似的情况下，为了节约迭代工作成本，在同一个控制器中修改代码无可厚非。我们可以简单的对TableView的数据源进行区分，对TableView的delegate回调进行判断，从而将两套TableView的逻辑写在一个控制器中，实现高聚合。然而，在第一个场景里并不明显的弊端，会在我描述的这个第二个场景里丑恶毕露。在考虑复用TableView的时候，<strong>你需要考虑高聚合的性价比</strong>，如果到了一定规模或者复杂度的时候，高聚合反而会给结构带来破坏，这时候高聚合的性价比非常低，在实际项目中对于产品结构的稳定性和将来的迭代性就会开始不断的产生负面的影响。</p>
<p>在第二个场景下，我见过这些用法：用枚举来标识当前TableView的类型，在所有数据源和Delegate回调的地方加上判断；给TableView加Tag；在Cell中加判断来区分不同的显示和不同的操作响应；甚至用进入个人主页的时候传入的userID来作为不同入口的判断。这些用法听起来虽然是低效一些，但是好像没什么大的问题，因为实际上每次TableView的加载和事件回调都可以被正常响应。然而我想总结的是这么一种习惯问题：当一个控制器被你不断的以这种形式往上加代码，几套逻辑被强制塞到同一个控制器中，这就像那个靠泥土和石头垒了七层楼的哥们一样，当你再视图往上添加一些重要的，新的东西的时候，他可能就全盘崩溃了，甚至让你不知道从何下手。</p>
<p>在实际项目中，你永远想象不到随着需求的增加，这些东西可能被怎么样的复用，而每一次复用，即使是很微小的不同，也是在破坏着代码的拓展性。你看看下面这个TableView是怎么被复用的就会知道了。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    <span class="constant">DataSourceTypeAllContacts</span> = <span class="number">0</span>,          </span><br><span class="line">    <span class="constant">DataSourceTypeAllGroup</span>,                 </span><br><span class="line">    <span class="constant">DataSourceTypeFriendContacts</span>,           </span><br><span class="line">    <span class="constant">DataSourceTypeAddGroupContacts</span>,         </span><br><span class="line">    <span class="constant">DataSourceTypeAllContactsSearch</span>,        </span><br><span class="line">    <span class="constant">DataSourceTypeAllGroupSearch</span>,           </span><br><span class="line">    <span class="constant">DataSourceTypeFriendContactsSearch</span>,     </span><br><span class="line">    <span class="constant">DataSourceTypeAddGroupContactsSearch</span>,   </span><br><span class="line">&#125;<span class="constant">DataSourceType</span>;</span><br></pre></td></tr></table></figure>
<p>这只是一个简单的联系人列表，但是在实际项目中，他被以这种简单低效的形式复用了8次，这就使你的代码变得越来越难以维护，每一次加载都加入了大量的判断，对于团队的其他成员，接手或者在你的代码基础上添加功能都会变得极其蛋疼。</p>
<p>在实际项目开发中，你需要将你的代码<strong>可读性，可维护性，可拓展性</strong>放在首位，而不是想着如何用最少代码去实现一个功能。当然，如果在保证了这三件事情的基础上还能够用最少的代码，那大概就是真大神了。但是对于更大多数的开发者来说，你需要将这三件事情放在第一位。</p>
<p>对于上面的这个复用了8次的TableView来说，还是有可能的优化空间的。例如，当数据源的类型一致，只是获取的方法不同，例如获取群组成员列表和好友列表，TableView的数据源数组中的数据类型是一样的，那么这个时候只要在加载数据的时候做个区分，而不用再TableView加载数据源的时候做区分。这里的意思是，在Cell的结构可以复用的情况下，Cell也可以复用，将TableView的一些复用逻辑转移到Cell中去。当然，如果Cell结构差异很大，或者你需要用xib来定义Cell的布局，那对于Cell的复用就要更加的小心。</p>
<p>当然，说了这么多，还是标题的一句话，<strong>不要试图过分的去复用一个TableViewController</strong>，这是一个好习惯，也会让你的队友们觉得你写的结构很容易看懂。在遇到较为复杂，或在可预见时间范围内有可能出现新的附加需求的功能模块的时候，尽量分开文件写，可以把多个控制器需要共用的部件封装出来，减少重复的代码量。</p>
<h2 id="u5982_u679C_u6211_u8981_u5728_u540C_u4E00_u4E2A_u63A7_u5236_u5668_u4E2D_u590D_u7528TableView_u5462_uFF1F"><a href="#u5982_u679C_u6211_u8981_u5728_u540C_u4E00_u4E2A_u63A7_u5236_u5668_u4E2D_u590D_u7528TableView_u5462_uFF1F" class="headerlink" title="如果我要在同一个控制器中复用TableView呢？"></a>如果我要在同一个控制器中复用TableView呢？</h2><p>如果有这么一个需求：</p>
<ul>
<li>在我的个人中心页面中，要根据我的不同用户状态显示几乎完全不同的tableview。有这几种状态，例如注册未填写信息，填写信息未提交审核，正在审核，审核通过，修改信息正在审核，这些状态甚至有可能更多，这时候该怎么办？</li>
</ul>
<p>在上一小节中的第二个场景中，我们已经将几种逻辑上有区分的个人中心拆分开来了。但是如果遇到同一个控制器中的tableView仍然会出现多种情况的时候，我们无法在上层继续拆分了，否则就会做很多多余的工作。这时候我们可以有以下这么几种解决办法：</p>
<ol>
<li>根据用户状态的枚举来在tableView的delegate和datasource加上大量的switch来实现入口的区分，这时候我们其实是使用了同一个tableView，并且将多路复用的选择放到了tableView去loadData的时候。这个方法就是最简单也是最笨重的，很多开发者在不考虑持续性的时候很容易走上这条不归路。</li>
<li>采用一个通用的cellModel，在数据源加载的时候就对多路复用进行了选择，cellModel的属性里有样式的枚举类型，cell的高度，数据对象等等，而且扩展性也还行。但是弊端就在于，虽然这种方法掩盖了第一种方法笨重的外表，但是在cellForRow这些加载过程中，仍然需要对cellModel的属性进行判断。虽然这些操作也是可以被封装出来的，但是仍然很臃肿，特别是同一个控制器的复用场景不断增加的情况下，cellForRow这个方法的可读性仍然很差。</li>
<li>根据数据源，也就是用户状态来返回不同的tableView，由tableView自己来维护自己的delegate和datasource，这样把所有的加载逻辑写在tableView中，根据情况而定是否要返回一个新的tableView。这样多路复用的选择其实就发生在了返回tableView的操作里，可以避免在控制器中出现臃肿的代码。</li>
</ol>
<blockquote>
<p>我不确定第三种方法是否是最佳实践。希望能有一些探讨~</p>
</blockquote>
<h2 id="u4E0D_u8981_u8BD5_u56FE_u6EE5_u7528Cell_u7684_u91CD_u7528_u673A_u5236"><a href="#u4E0D_u8981_u8BD5_u56FE_u6EE5_u7528Cell_u7684_u91CD_u7528_u673A_u5236" class="headerlink" title="不要试图滥用Cell的重用机制"></a>不要试图滥用Cell的重用机制</h2><p>我知道TableView的重用机制让我们对于性能省了很多心思。然而有时候用的不正确其实会让程序消耗更多的性能。设想这么两个场景，一个是朋友圈的多图Cell，一个是Cell下方的点赞和评论视图，由于你将Cell从重用池中取出的时候，它所已经初始化好的ImageView数量和点赞评论视图和现在将要显示的这个数据源不一致，因此这时候你需要：</p>
<ol>
<li>还需要多少个ImageView就初始化多少个ImageView，不需要的就释放掉</li>
<li>点赞或者评论列表由于涉及到布局，可能整体都要重新初始化</li>
</ol>
<p>在滑动的过程中，视图的重新初始化是十分消耗性能的。尽量不要在layoutSubView中出现init的代码。因此如果你预先定义好10种Identifier，分别对应0到9个图片的情况的数据源，那么在相同数量图片的数据源之间复用的时候，就可以省略掉上面的第一步了。而点赞和评论列表则不可避免的需要重新布局，同样也是要减少初始化的操作。当然，对于Cell滑动的时候初始化的卡顿，我们也可以将点赞和评论的视图放在另外一个线程来绘制，然后再放回主线程来。</p>
<p>另外，Cell的复用和TableView的复用同样也是一个问题。可以说，大部分的复用其实都是用大量的ifelse来完成的。复用不是错误的，但是如果复杂度到了一定水平之后，就要慎重考虑复用的后果而不是每次都无脑的往上添砖加瓦了。</p>
<h2 id="u4E00_u4E9B_u5C0FTips_3F"><a href="#u4E00_u4E9B_u5C0FTips_3F" class="headerlink" title="一些小Tips?"></a>一些小Tips?</h2><blockquote>
<p>这些我总结出来的经验可能也许大概会和你们已有的一些经验发生冲突，我也希望能和大家有一些探讨。</p>
</blockquote>
<ol>
<li>属于Cell的逻辑最好写在Cell中，避免TableView所在的控制器臃肿冗长而复杂从而降低可维护性，适度聚合，适度耦合应该是最好的。例如Cell中的delegate就放在Cell中去处理，点击Cell中的图片需要跳转也放在Cell中去做，一些ImagePicker之类的控件也由Cell自己处理。控制器只负责数据的加载和外围事件的处理。这样可以控制每一个组件的规模，避免过分臃肿。</li>
<li>Cell的layout全部放在Cell中，在CellForRow中只做重用以及将数据传入Cell，让Cell自身去根据数据来layout，这样可以控制CellForRow这个方法的规模。一些新手很容易将大量的layout代码写在CellForRow中，导致一个方法就要滚好几屏，可读性极差。</li>
<li>不要到处写reloadData，你的队友们会把你炸了的。可以局部刷新的请用局部刷新。</li>
<li>复杂结构的Cell尽量不要用autolayout，由于autolayout会有一个视图依赖链，在Cell中更新一个约束会导致一系列视图的更新，当视图结构很复杂的时候，视图更新对性能的消耗就很大了。</li>
<li>在Cell中对CALayer的一些操作和效果，都会对性能有很大的影响。特别指出的是过多的圆角和阴影。</li>
<li>更多的可以参考objcio的<a href="https://www.objc.io/issues/1-view-controllers/table-views/" target="_blank" rel="external">这篇文章</a>。</li>
</ol>
<h2 id="u66F4_u591A_3F"><a href="#u66F4_u591A_3F" class="headerlink" title="更多?"></a>更多?</h2><p>我暂时没有想到更多，如果读者有什么要批评吐槽我的就赶紧让我一起涨姿势吧！&gt; 3 &lt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>一直]]>
    </summary>
    
      <category term="UITableView" scheme="http://sergiochan.github.io/tags/UITableView/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我们只要把事实讲清楚就好了，至于下结论是他们的事。]]></title>
    <link href="http://sergiochan.github.io/2016/02/06/%E8%BF%87%E5%B9%B4/"/>
    <id>http://sergiochan.github.io/2016/02/06/过年/</id>
    <published>2016-02-06T12:53:46.000Z</published>
    <updated>2016-08-25T03:13:58.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>过年回家果然是毫无效率可言。到处拜年，和各种长辈嘘寒问暖，见朋友，陪长辈。  </p>
<p>觉得自己现在的生活还是好脆弱，自己肩上的担子远比自己想象的更重。所错过和遗憾的大学头两年，也许并不是这么容易就能补回来的吧，那将成为我永远鞭策自己前进的一股伤痛。学是学了很多东西，但是确实转念一想，到现在也没有什么特别拿得出手的东西，现在静下心来把自己沉淀的东西开始整合成一个完整的项目了，然而又碰上过年，效率直线下跌，所以更加的烦闷。</p>
<p>年后的新一年的生活，我忽然感觉到很迷茫。显昆去真格实习来北京，Kevin公司搬到北京，我在北京到底何去何从，能够让我想要的家稳定和安宁一些，少一些风浪。2016年必定还会有更多的Hackathon等着我去挑战，我相信创意是源源不断的，能力也是一步步提升的，只要我坚持每一次都学习新技术，不论获奖与否都会是巨大的进步。所以我就更需要一个稳定的生活，来为我在各种时候的冲刺积蓄力量储备体力。</p>
<p>过年回来和父母坦白完，也狠下心来从今以后就连出国读书也要靠自己。我觉得我会为我没有在自己的人生中把自己砍得鲜血淋漓而在将来感到遗憾。我希望活的波澜壮阔，我希望哪怕是最后战死也要留下一段荡气回肠的故事，我希望我能和别人不一样，所以我继续往自己身上割出一道道伤口。从大四开始就已经完全经济独立，说实话那时候还比现在工作的我更有积蓄，毕竟在学校里，钱也没什么地方花，然而那时候也许是逆反，也许是不甘，我所努力完成的经济独立让我都为那时候的我感动了。然而现在，我有更严酷的未来要面对，真实的生活，社会，未来，这一切不再是学校那时候的水平了。我想过退缩，但是我还是不想让自己泯然众人，我还是想证明自己，证明自己能够将自己热爱的事情做到让世人都惊叹的时候。</p>
<p>所以我还是选择了，对自己更狠一点。希望一年后的自己不会辜负现在的我。就如我没有辜负一年前的我对我的期望一样。</p>
<p>听闻父母的一些朋友的孩子都准备结婚，家里买好房子办好喜酒什么的，又或者在父母身边留着，等着父母中年努力工作给他们置办未来的婚房，我忽然觉得这种人生不仅现实，而且渺小。也许和我相比，他们还是不知道高到哪里去了，毕竟人家在哪哪也有了房子，哪哪准备办喜酒，然而我还是觉得，论人生的渺小与否，在于最后留下的内容多少和精彩程度。</p>
<p>做自己最热爱的事情，并且尽全力做到最好，我觉得才是最精彩和最充实的人生，才是老年的时候，可以自豪的，欣慰的讲述给晚辈们听，告诉他们我的人生不曾遗憾过，也不曾空虚过。</p>
<p>为自己新的一年加个油吧。<br>希望自己做到最好，不去在乎别人对自己的眼光和评价。<br>很多事情，证明都摆在那里，无需我多说了。<br>别人相不相信，是他们的事情。</p>
<p>高中的时候，有一句话，从低谷的时候伴随着我走过来。<br><code>我们只要把事实讲清楚就好了，至于下结论是他们的事。</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>过年回家果然是毫无效率可言。到处拜年，和各种长辈嘘寒问暖，见朋友，陪长辈。  </p>
<p>觉得自己现在的生活还是好脆弱，自己肩上的担子远比自己想象的更重。所错过和遗憾的大]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[三件小事]]></title>
    <link href="http://sergiochan.github.io/2016/01/27/%E4%B8%89%E4%BB%B6%E5%B0%8F%E4%BA%8B/"/>
    <id>http://sergiochan.github.io/2016/01/27/三件小事/</id>
    <published>2016-01-27T13:36:18.000Z</published>
    <updated>2016-08-25T01:50:57.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>事情是这样的。<br>江南皮革厂倒闭了。于是最近有这三件小事一直困扰着我。<br>一个是id和NSObject的解释，看过很多博客，但是却一直没有一个深刻的理解，现在醒悟过来觉得大概是看的那些博客本身就讲的含糊不清吧。所以我就用我最直白的语言和解释来说明一下我对于id和NSObject的一些小见解。一开始直接就是跟着代码写的，所以非常的直接。<br>第二个是weak和assign的小事，为什么delegate需要声明weak而不是assign。<br>第三个是关于这个<code>NS_DESIGNATED_INITIALIZER</code>宏的解释。</p>
<blockquote>
<p>示例工程在<a href="https://github.com/SergioChan/id-NSObjectDemo" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h2 id="id_2C_NSObject__u90A3_u4E9B_u4E8B"><a href="#id_2C_NSObject__u90A3_u4E9B_u4E8B" class="headerlink" title="id, NSObject 那些事"></a>id, NSObject 那些事</h2><p>这里讲的关于id和NSObject的内容，最好打开你的Xcode，打开demo工程，然后就能看到一系列编译的警告。跟着警告往下看你就会对于id和NSObject的区别更加的理解了。</p>
<p>这里你可以看到，test是一个指向UIImage对象的id指针，你可以向他发送length消息。<br>然而如果他不是一个对象指针，而是一个对象，那么你向他发送length消息的话，在编译的时候编译器会无法编译，原因在下面有提到。<br>​<br><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">id test = <span class="comment">[<span class="comment">[UIImage alloc]</span> init]</span>;</span><br><span class="line"><span class="comment">[test length]</span>;</span><br><span class="line"></span><br><span class="line">NSObject *test1 = <span class="comment">[<span class="comment">[UIImage alloc]</span>init]</span>;</span><br><span class="line"><span class="comment">[test1 length]</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里你可以看到，如果引入了TestObject的头文件，对于任意id类型的对象指针，你就可以向他发送TestObject能够响应的消息了。<br>无论这个id类型指针指向的对象是不是TestObject类型，编译器并不关心这个，也无法知道。<br>然而对于NSObject，他仍然不能响应这个fuck方法，因为向一个对象发送消息的时候，编译器会在对象声明类型的方法表中去判断这个对象是否能够响应这个消息，而不是根据实际分配的对象类型。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">id test3 = <span class="comment">[<span class="comment">[UIImage alloc]</span>init]</span>;</span><br><span class="line"><span class="comment">[test3 fuck]</span>;</span><br><span class="line"></span><br><span class="line">NSObject *test2 = <span class="comment">[<span class="comment">[TestObject alloc]</span>init]</span>;</span><br><span class="line"><span class="comment">[test2 fuck]</span>;</span><br></pre></td></tr></table></figure>
<p>所以其实NSObject很少手动声明，如果要声明具体的对象，则最好声明具体的类型，或者id动态类型。<br>id之所以为动态类型，在于它所指向的对象类型是在运行时才确定的，因此使用起来更加的方便。<br>NSObject 只能响应自己的一些简单的方法，例如 copy，hash之类。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>2 <span class="built_in">hash</span>];</span><br></pre></td></tr></table></figure>
<p>下面解释了为什么delegate要用id声明而不是用NSObject</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>) <span class="keyword">id</span>&lt;TestDelegate&gt; delegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>) <span class="built_in">NSObject</span>&lt;TestDelegate&gt; *delegate;</span><br></pre></td></tr></table></figure>
<p>大部分delegate在实现的时候都需要像下面这个来调用，根据上文所说，因为delegate的方法表其实是运行时才能知道的，在编译时编译器是无法识别的，所以这种调用方式也就不能成立，因此delegate要用第一种id的声明方式来声明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NSObject *<span class="built_in">test</span>4 = [[TestObject alloc]init];</span><br><span class="line"><span class="keyword">if</span>([<span class="built_in">test</span>4 respondsToSelector:@selector(fuck)])</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">test</span>4 fuck];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id <span class="built_in">test</span>5 = [[TestObject alloc]init];</span><br><span class="line"><span class="keyword">if</span>([<span class="built_in">test</span>5 respondsToSelector:@selector(fuck)])</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">test</span>5 fuck];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然如果id所指向的对象在运行时无法响应fuck方法，运行时就会报错。<br>可以这么说吧： <strong>NSObject声明的对象类型在编译时确定，id声明的对象类型在运行时确定</strong>，因此在消息发送上会有一些区别。</p>
<h2 id="weak_2C_assign__u90A3_u4E9B_u4E8B"><a href="#weak_2C_assign__u90A3_u4E9B_u4E8B" class="headerlink" title="weak, assign 那些事"></a>weak, assign 那些事</h2><p>这个问题起源于这两种声明delegate的方式：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>  &lt;fuckDelegate&gt; delegate; </span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">id</span>  &lt;fuckDelegate&gt; delegate;</span><br></pre></td></tr></table></figure>
<p>首先第一种声明方式在我们的日常使用中十分的常见，可能都已经成为一种习惯了。但是例如已经被废弃的 <code>@property(nonatomic, assign) id&lt; UISearchDisplayDelegate &gt; delegate</code>，虽然在iOS8之后被废弃，然而它说明delegate也可以用第二种声明方式。</p>
<p>区别就在于weak和assign声明的属性虽然都是不会引起引用计数的增加，但是还是有很大不同。<a href="http://www.cocoachina.com/ios/20150605/11990.html" target="_blank" rel="external">weak的实现</a>决定了在属性的主人释放的时候，weak指针所对应的对象也会一起被释放，然而assign不会，因此这里有产生一个野delegate指针的风险。除非是在MRC的环境下，手动对delegate置为nil。这会需要额外的操作，因此后来系统的实现渐渐的也转向weak了。</p>
<p>参考<a href="http://stackoverflow.com/questions/9428500/whats-the-difference-between-weak-and-assign-in-delegate-property-declaratio" target="_blank" rel="external">这里</a>。</p>
<h2 id="NS_DESIGNATED_INITIALIZER"><a href="#NS_DESIGNATED_INITIALIZER" class="headerlink" title="NS_DESIGNATED_INITIALIZER"></a>NS_DESIGNATED_INITIALIZER</h2><p>第一次看到这个的时候，心里想的是 “WTF 这是什么鬼”。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="pp">-<span class="params">(instancetype)</span>initWithName:<span class="params">(<span class="variable">NSString</span> *)</span>name NS_DESIGNATED_INITIALIZER;</span><br><span class="line">-<span class="params">(instancetype)</span>init;</span></span><br></pre></td></tr></table></figure>
<p>这时候看看Swift就明白了 =。= 这是objc为了配合Swift的特性而诞生的一个附加宏。Swift中有designated和convenience两种初始化方法，它要求我们初始化出来的实例对象尽量是属性完整的，即使使用了convenience的初始化方法，也会要求在这个初始化方法中调用同类的designated的初始化方法完成完整的初始化。</p>
<p>像这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">- (instancetype)<span class="keyword">init</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> initWithName:@<span class="string">"fuck"</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithName:(<span class="type">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以这只是一个Swift的特性的objc版本，也是为了更好的和Swift配合开发而加上的。</p>
<p>参考<a href="http://stackoverflow.com/questions/26185239/ios-designated-initializers-using-ns-designated-initializer" target="_blank" rel="external">这里</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>事情是这样的。<br>江南皮革厂倒闭了。于是最近有这三件小事一直困扰着我。<br>一个是id和NSObject的解释，看过很多博客，但是却一直没有一个深刻的理解，现在醒悟过来]]>
    </summary>
    
      <category term="NSObject" scheme="http://sergiochan.github.io/tags/NSObject/"/>
    
      <category term="NS_DESIGNATED_INITIALIZER" scheme="http://sergiochan.github.io/tags/NS-DESIGNATED-INITIALIZER/"/>
    
      <category term="assign" scheme="http://sergiochan.github.io/tags/assign/"/>
    
      <category term="id" scheme="http://sergiochan.github.io/tags/id/"/>
    
      <category term="weak" scheme="http://sergiochan.github.io/tags/weak/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无题-20160120]]></title>
    <link href="http://sergiochan.github.io/2016/01/20/%E6%97%A0%E9%A2%98-20160120/"/>
    <id>http://sergiochan.github.io/2016/01/20/无题-20160120/</id>
    <published>2016-01-20T09:05:04.000Z</published>
    <updated>2016-01-20T09:17:22.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>忽然发现拿再多第一，再多人认可你，这个世界还是那么大，还是总会有那么些人，无法满足他们那种居高临下，那种自以为占据所有主动地屌逼感，反而会让他们更加的想要刁难你和鄙视你。如果不是一路人的话，就不会是相互吸引，而只是相互排斥。</p>
<p>最近各种遇见和感受到。<br>But whatever, 你走你的路，有那么多人支持你，再说了，未来你想要的世界是依靠和你相似，相吸引的这群人一起来创造的，而且你也不断在证明这一点，那么那些所谓的其他人，是吧。</p>
<p>最近准备重新开始读三国演义。觉得团队管理和自己未来的处世方式在里面都有很多可以借鉴的。</p>
<p>例如 纵使你有十万大军，没有一个赵子龙，你一样被人家单骑救阿斗。</p>
<p>很感谢，很感激，自己一路走来，凝聚在我周围或者对我特别在乎，特别认可的基友们。我和你们一起去创造了太多不可能的事情。<br>确实，拿第一第二第三，又有毛用，即使把全国全世界的Hackathon第一都拿遍了，该鄙视我的人还是鄙视我，该认可我的人还是认可我，这些并不能改变什么，相反，所有的事情，我能够去享受每一次的过程，和志同道合的这些基友们一起为了同一个目标热爱和奋斗，这才是我为什么走下去的原因。  </p>
<p>那些鄙视我，不珍惜我的人，请等着被打脸吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>忽然发现拿再多第一，再多人认可你，这个世界还是那么大，还是总会有那么些人，无法满足他们那种居高临下，那种自以为占据所有主动地屌逼感，反而会让他们更加的想要刁难你和鄙视你。如果]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015]]></title>
    <link href="http://sergiochan.github.io/2015/12/21/2015/"/>
    <id>http://sergiochan.github.io/2015/12/21/2015/</id>
    <published>2015-12-21T12:13:17.000Z</published>
    <updated>2015-12-29T14:03:57.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="u770B_u770B_u53BB_u5E74_u5E95_u7ED9_u81EA_u5DF1_u5B9A_u4E0B_u7684_u76EE_u6807"><a href="#u770B_u770B_u53BB_u5E74_u5E95_u7ED9_u81EA_u5DF1_u5B9A_u4E0B_u7684_u76EE_u6807" class="headerlink" title="看看去年底给自己定下的目标"></a>看看去年底给自己定下的目标</h1><p>还是觉得自己的2015年过的蛮有意义的。回头看了看去年底写的对2015年的展望，发现去年对自己的展望基本在今年8月份左右就已经实现完了，反而是在九月之后经历了又一次巨大的跌宕起伏，有了很多意外的收获。一年过得实在是太充实……</p>
<h1 id="u4E0D_u5F97_u4E0D_u8BF4_u6211_u7684_u5B9E_u4E60_u548C_u5DE5_u4F5C_u7ECF_u5386"><a href="#u4E0D_u5F97_u4E0D_u8BF4_u6211_u7684_u5B9E_u4E60_u548C_u5DE5_u4F5C_u7ECF_u5386" class="headerlink" title="不得不说我的实习和工作经历"></a>不得不说我的实习和工作经历</h1><p>首先，我是在tata度过了从大四到毕业后的十个月，这里面的感情真的没法言说，这是我第一家稳定下来的公司，也是找到了归属感的团队。在公司里认识了一大帮子朋友，学了python，搭了一套newsfeed系统，尝试着做了一套TCP服务器间内部调用的框架。习惯了Linux服务器，习惯了shell，习惯了vim，在后端技能方面长进了太多。掌握了Redis和Mongo，学会了NoSQL的设计思想，当然部署和操作什么的都是简单的部分了。准备有空读Redis源码，大致看了一下感觉还好……同时也有了一定处理并发和较大规模系统的能力，在信息流系统并发较大的时候有了一定处理经验，这是我还在学校的时候最宝贵的经验，也是我去年底给自己定下的目标里写到的。对于一个还在大四的学生，有过处理百万级用户量的数据库和相当高的并发量的后端系统的经验真的是十分宝贵的。并且从陈健那儿学到了很多架构经验，很宝贵，这些架构思想极大的提高了我的系统设计能力。<br>遇到了老曹，很耐心的CTO，对我也十分的器重。谈不上人生导师，但对我的职业生涯，和对自己的定位都起了很大的影响，我开始明白自己应该怎么成长了，也懂得对自己做更好的职业生涯规划。同时整个全栈的知识体系和技能体系也变得丰富起来。<br>九月由于一些团队的原因，想要找个更高的平台提升自己，所以当时先是傻逼的在拉钩上投了微博小米和百度。可能在那个时候，还不是特别有信心直接就找内推，而且那个时候正好赶上秋招，机会还算蛮多的，于是打算自己先试试。第一个去的是微博。我在微博坐了半个小时没有人理我，做了一个小时的题也没有人给我倒杯水，二面的面试官也是急匆匆的就问完走了，并且在面试的过程中对我表示了极其明显的鄙视和轻蔑。虽然我在后来拉钩的评价上给了一颗星的差评，但是这段经历对我下半年最后几个月的转变是非常重要的。我开始明白我并不能要求所有人都对我满意，但是我至少还是得被一部分人认可，这样才不会说明我的所谓能力其实纯属扯淡。当我受到这样的对待的时候，虽然很大一部分是因为我是拉钩来的社招，并且他们甚至没有重视我刚毕业这个事实，而是认为我是刚跳槽的社会人员，但是我还是认为很大一部分原因出在自己的身上。回去之后，我开始更注重在工作中对自己能力的积累，我自己研究了runtime和runloop这些运行机制之后，发现天天写业务逻辑，和不懂技术瞎扯淡的产品经理配合简直就是对自己职业生涯的浪费和埋没，我被所谓需求所蒙蔽，根本难以接触到技术的真谛，我明白我需要做出一些改变了。所以才有了后来的波澜壮阔的历程。<br>第二个去的是百度。说实话这是我对百度印象最好的一次。然而最后的结局十分的无奈和可惜，百度砸在了O2O上，全面停止了社招，于是我阴差阳错的被自己误过了发出offer的时间点，错过了去百度的机会。但是百度的那次面试，前两面的面试官，以及最后三面电话里的负责人，都给了我非常好的印象，感觉真的可能是一个适合我的团队。并且二面的小哥，是我遇见的第一个会在面试的过程中打开我的博客和Github主页逐个问我并和我聊天的面试官。<br>不过还是那句话，上帝在给你关上一扇门的时候，总会给你打开另一扇窗户。所以当百度确认无法争取到offer之后，我当时满脑子只有一个想法，10月份的segmentfault Hackathon一定要好好玩，好好地和小萌配合一次，认真地，尽力的努力一次，去追求自己热爱和快乐的事情。  </p>
<blockquote>
<p>写下这些文字的时候，我正在踏上再次去寻找小萌的旅途。圣诞节将在杭州的西湖边度过。这一次，我想，既然我们已经找到了自己真正喜欢的事情，就一定要努力地奋斗下去。再不留遗憾。</p>
</blockquote>
<h1 id="Hackathoner"><a href="#Hackathoner" class="headerlink" title="Hackathoner"></a>Hackathoner</h1><p>2015年另一个意外就是接触到了Hackathon，并且与之陷入爱河。<br>第一次参加的是北航的Dorahacks Hackathon，忘记那次的报名信息是从哪儿看的了，好像是朋友圈谁转发的，于是就报名了，并且拉上了杨大神和邓晗。虽然在那次参赛之前我根本对Hackathon没有什么了解，但是也幸运的拿了第一，这次经历使我逐渐成为了一个狂热爱好Hackathon的Geek。后来参加了大众中国的Hackathon，和一堆MBA博士们一起比赛，被虐的体无完肤，才慢慢明白Hackathon不是自己想象中的那么单纯。第三次是十月份的SegmentFault Hackathon，将我从错过百度的阴影中拯救出来，接触到了非常纯粹的Hackathon。  </p>
<blockquote>
<p>Hackathon 这部分可以参考我的<a href="http://sergiochan.xyz/2015/12/19/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9Hackathon%E7%9A%84%E7%90%86%E8%A7%A3/" target="_blank" rel="external">这篇博客</a>。</p>
</blockquote>
<h1 id="iOS_u5F00_u53D1"><a href="#iOS_u5F00_u53D1" class="headerlink" title="iOS开发"></a>iOS开发</h1><p>今年九月就是正式入坑iOS一周年，五月份把给公司产品写的第一个控件开源，来到了Github这个全球最大的男性社区，开始搞基。七月份开始写几个独立应用，除了密码管理的上架了，其他都夭折了，感觉写独立应用不是在开源社区里的成长方式，并且写独立应用对于自己的综合能力，包括设计,审美和创意之类的也都有一定要求，也许现在的我去写才会有一些感觉吧。后来总结出来的是，在开源社区的成长，要么写一个很好用的轮子，要么模仿一个很好看的应用，我肯定不想做后者……在公司里写业务写的就够累了，还花时间去模仿人家的客户端干嘛。所以也是纠结了好一段时间没东西写，一直到了九月份，还在写一些无关紧要的项目。第一个比较完整的项目就是开源了公司产品里头基于protobuf的模仿微信的网络请求框架。同时写了一个python的解数独的程序和基于TCP连接的服务器内部调用的框架。直到10月底才开始慢慢找到方向，从第一个试水的TableViewCell开始，逐渐写了一些或者好看的或者好用的或者有创意的轮子，一直到现在，也总共收获了一千多的star了，期间认识了无数开源社区里的基友，感慨时间匆匆，自己没有早点入坑。接下去还是会尽力把这些之前项目所积累的经验和开源的经验结合起来，创造更多更好用的交互模块。<br>一开始写一些开源的时候，DQ让我发到微博去获得一些关注，同时可以找到更多的人交流，于是我就尝试着进入了微博。没想到写的一些动效实现挺受欢迎的，于是就有了更多做下去和热爱的动力。我也在这个过程中认识了Martin老湿和XerLee大神，和一些比较有名的交互设计师有了更多的交流，实现了一些这些设计师做的设计，而且又有小萌和翻译组的一些小伙伴支持，于是就有了发起组织的想法。再加上马老湿又比较勤奋好学的开始写Swift并且尝试自己实现自己做的动效设计，所以就很快的搞在了一起，交流代码经验什么的。所以就慢慢步入了开源的正轨，成立了开源组，不过开头做了一点东西之后到年底了，小萌期末考，我们都忙着工作，所以有半个月对于开源组的贡献很少，毕竟每次从设计，到实现，最后产出一个完整的框架或者控件，然后还要整理出一篇通俗易懂，讲解合理生动的分享博文都是一件特别花时间和精力的事情，所以开源的工作实际上比想象中要复杂得多。</p>
<h1 id="SwiftGG"><a href="#SwiftGG" class="headerlink" title="SwiftGG"></a>SwiftGG</h1><p>正式加入swiftGG翻译组，从翻译swift官方指南，到成立翻译组，开始翻译。加入SwiftGG这个逗比组是2015年最正确的选择之一。在组里接触了Swift，业余时间开始一点点的自学，虽然基本还是没有怎么使用。最主要的还是接触了一大帮翻译组的成员，以及接触了Swift中文大会，遇见和认识了来自全国各地天南海北的基友们，忽然有了好多基友可以交流技术问题，交流代码，交流开源，这种感觉真的是超级幸福。<br>明年1月10日的大会，感觉可以和天南海北的开发者们好好面基了😂</p>
<h1 id="u535A_u5BA2"><a href="#u535A_u5BA2" class="headerlink" title="博客"></a>博客</h1><p>开始稳定写博客，大概一个月一篇，速度有点慢，但是工作也忙。<br>比较注重博客质量，因为只有原创的好博客才能吸引一些读者吧，虽然最后确实有一些人关注我的博客 :-P<br>博客的历程比较曲折，一开始是在香港的虚拟主机里搭的Wordpress，用了半年多，自从七八月份开始莫名其妙被俄罗斯和乌克兰的黑客攻击，我的流量就没下来过 -。- 所以开始着手换到了Github上，迁移过程中丢弃了一些文章，所以现在的博客文章看起来并不多。后来刚迁移到Github之后，发生了惨无人道的水淹事件，我不小心把一杯水倒在了刚买的电脑上，导致尚未更新的Github的博客源文件丢失，后来过了两周才换了新电脑，这个过程中我的博客就处于了停滞的状态。直到最近才终于又稳定下来，继续维护和优化属于自己的个人站点和技术博客。<br>而且原域名已经被我弃用了，换成了现在的sergiochan.xyz。</p>
<h1 id="u5BF9_u81EA_u5DF1_u660E_u5E74_u7684_u671F_u671B"><a href="#u5BF9_u81EA_u5DF1_u660E_u5E74_u7684_u671F_u671B" class="headerlink" title="对自己明年的期望"></a>对自己明年的期望</h1><p>我明白自己的职业生涯到了最关键的冲刺期，在这个阶段里，我的经验，能力，眼界和社交圈都会飞速的膨胀，这一年从大学中脱离出来的经历已经让我明白了我之前在大学里浪费的两年多时光是多么的遗憾，但是幸运的是从2015年开始我走上了一条我到现在还觉得是正确的道路。<br>明年首先的愿望，或者是奢望，就是能够通过更多的Hackathon和开源，认识更多和我志同道合的朋友们，继续和小萌一起结对编程下去。希望能够运气好点再捞几个奖牌回来，前几天在2015年的收官之作中，又拿了一个第一，为我和小萌2015年的成长划上了一个完美的句号。<br>第二个愿望，就是好好把一起动画开源组给做起来。最近年末这段时间，由于自己刚搬家，比赛，大会什么的事情，马老师那里又有很多要忙的，小萌要考试，所以开源组一直没有产出新的好东西。但是等到新的一年开始之后，这些事情都要走到正轨上来了。我也希望这次面基大会认识的这一大帮国内走在前列的开发者，以后能够踊跃的交流，一起来把开源做好。<br>第三个期望，还是好好过日子吧。好好过着现在这样的稳定的小日子，这大概是一切以上所述事情的根基了吧。当感情开始漂泊，生活开始流浪的时候，事业就没有了稳定的基础。所以，珍惜眼前的一切，才是最重要的。</p>
<p>当然，我明白，这些期望，最后，肯定远不及明年的收获。对于我来说，只要这样疯狂的向前冲，从中体会到乐趣和自己所热爱的事情，我想，我能走多远，只有最后才会明白吧。  </p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="u770B_u770B_u53BB_u5E74_u5E95_u7ED9_u81EA_u5DF1_u5B9A_u4E0B_u7684_u76EE_u6807"><a ]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[语]]></title>
    <link href="http://sergiochan.github.io/2015/12/21/%E8%AF%AD/"/>
    <id>http://sergiochan.github.io/2015/12/21/语/</id>
    <published>2015-12-21T03:52:36.000Z</published>
    <updated>2015-12-21T03:54:08.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>对自己降低期望是对自己最好的宽恕。<br>有时候期望太高反而没有办法有所突破吧。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>对自己降低期望是对自己最好的宽恕。<br>有时候期望太高反而没有办法有所突破吧。</p>
</blockquote>
]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈我对Hackathon的理解]]></title>
    <link href="http://sergiochan.github.io/2015/12/19/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9Hackathon%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://sergiochan.github.io/2015/12/19/谈谈我对Hackathon的理解/</id>
    <published>2015-12-19T01:06:02.000Z</published>
    <updated>2015-12-19T01:08:13.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Hackathon__u662F_u4EC0_u4E48"><a href="#Hackathon__u662F_u4EC0_u4E48" class="headerlink" title="Hackathon 是什么"></a>Hackathon 是什么</h1><p>我们先要理解Hackathon这个词的起源。它起源于1999年，词语本身来自于Hack和Marathon的组合，意思就是一群程序员或者软件工程师相聚在一起，像马拉松一样不停的从起点跑到终点进行比赛。由于大部分Hackathon都是现场命题制，这就意味着所有程序员在一开始都是站在同一起跑线上的，所以Hackathon成为了每一个热爱挑战的程序员能够挑战自身各方面能力的机会。</p>
<p>没错。我说的是，挑战。就如覃超大哥在SegmentFault的Hackathon开始的时候说的那样，hack精神就是Facebook最为推崇的理念，它的很多产品创新和突破都是来自于内部的Hackathon上迸发的灵感。所以应该不难理解，Hackathon的精神在于挑战自我和固有的事物、想法，从而去创造新的事物和新的想法。</p>
<h1 id="u6211_u7684Hackathon_u7ECF_u5386"><a href="#u6211_u7684Hackathon_u7ECF_u5386" class="headerlink" title="我的Hackathon经历"></a>我的Hackathon经历</h1><p>先说说我的Hackathon经历吧。在接触Hackathon之前，我接触过很多创业团队，见过很多新的想法，但大部分都因为时间问题或者进度问题一拖再拖，亦或是这些想法并没有特别的打破人们固有的一些想法和思维模式。而我就已经乐衷于开拓自己的思维模式和范围，去接触更大的互联网世界。</p>
<p>从创业和各种项目一路走来，我对软件工程的热爱逐渐在团队合作中被我自己培养了起来。对我来说，做一件事情，最重要的当然是这件事情是否有趣，是否值得我去热爱，其次就是能够和小伙伴一起去做这件事情，还记得两年前我刚开始走上这条道路的时候，我写到，“携两三靠谱好基友，凭一腔热血，青春年少，有什么做不到的。年轻就该气盛，才不负年华”。</p>
<p>于是，当我第一次和小伙伴一起接触到Hackathon的时候，我就陷入了无比的狂热中。那是Dorahacks在北航举办的一次Hackathon，由于没有经验，我们也没有熬夜，只是晚上在QQ上相约一起写了一部分，第二天早上早早到地方开始调bug。一开始我们也通过头脑风暴想出了很多奇怪的创意，但是都被否定了，最后思宇在散步的时候想出了网页弹幕这个鬼点子。于是那也开启了我们每次Hackathon都一定会有的弹幕模式……其实写一个网页弹幕的Chrome插件花不了多少时间，加上leancloud即时通信和存储的集成，我们总共也没花几个小时，就将一个差不多通过了测试的版本放上台展示了。</p>
<p>展示的时候，我扯了一大堆弹幕的起源和95后新兴人类的社交模式，扯了我从创业以来了解的各种互联网现状，然后啪的一展示，小伙伴们啪啪啪打了一堆弹幕上去，正好浏览的网页又特别想让人吐槽，所以大家都笑了，我们顺理成章拿了第一。</p>
<p>后来我就总结出这么个道理，Hackathon，展示也是相当关键的一环，你要么让观众大笑，要么让观众大惊，如果观众一点反应都没有，那你就基本没有希望了。所以Hackathon，一定意义上并不是完全的在挑战一个人的思维能力，代码能力，团队合作能力之类的东西，更是在挑战和检验一个人的表达能力，简单地说，一个人的气场。对于一般的程序员来说，可能根本没有意识到在平时所谓气场和表达能力有什么重要性，但是，这也就意味着一个程序员将会永远在这种局限性之下成长。</p>
<p>以上总结同样适用于我们接下来参加的一次大众中国的Hackathon。虽然这就是我将要说的商业大赛，但是最后拿了第一的团队，对于展示的把握相当的成熟，让我也学到了很多。我们什么奖也没有获得，但是我们脑洞大开的想让车与车之间通过弹幕的方式在公路上连接在一起。不知道为什么，也许我们和其他MBA或者博士们参加Hackathon的动机不一样吧，所以我们受到了相当的关注，这也让我感觉特别不自在和恼火。这本来就是大人们的一个游戏，他们只是对我们感到好奇罢了。</p>
<p>挂羊头卖狗肉，是我对于很多这样的所谓Hackathon的商业创新大赛和外包大赛的总结。也许是各种企业主和策划方都觉得通过传统的比赛模式没有办法吸引到新时代的人才了，所以总是各种效仿，挂上Hackathon的名号。有一些比赛评委根本不看技术而看商业模式和商业分析，来自企业的一些Marketing的评委关注点是在如何让他们的企业赚更多的钱上，对于技术的创新性和效果并没有那么接受；而有一些比赛的评委对于自己出的题目已经有了相当明确的答案，却只是希望参加比赛的hacker能够按照他的期望把一个东西的原型做出来。</p>
<p>是的，如果你想用广义的Hackathon定义来理解，你也许可以将他们也包含到Hackathon中，但是不可否认的是，这些比赛形式的本质是传统的，是抑制技术创新的。真正的Hackathon，应该是基于技术的创新和理念的创新，去解决一个实际的问题，从而让世界变得更美好。</p>
<p>上周末的TC Hackathon，我想说我们最后退出了。在讨论了很久之后，对于某个企业提出的冰柜的题目，我们虽然觉得有很多能创新的点，但是当评委介绍完整个任务之后，我其实已经觉得没有多大希望了——评委对于项目有着明确的要求，甚至可以说他们应该已经花费了一些人力在这个项目上。整个题目是这个企业之前就已经提出的一个创业点，他们不希望自己投入研发成本去做这件事，而希望创业团队来帮他们实现。当没有什么好的创业团队来做这件事的时候，他们就把这件事情扔到一个Hackathon上，可以说，那些可怜的奖金如果换做外包的形式的话，数额只够一个人的所得。用廉价的奖金换来一个优质的外包方案，我相信对于每个企业都是一种好的选择。我也认识一些传统行业的人，他们告诉我，通过将项目外包给学校或者在学校内组织比赛的形式帮助他们完成一个项目的开发是他们很经常采用的手段。这个道理我想很多人都明白，但是我不希望外包比赛非得套上Hackathon的头套，玷污我心里对于技术创新的向往和渴望。</p>
<p>最好的一次Hackathon是两周前的SegmentFault Hackathon。由于它本身是个开发者社区，而且这个Hackathon已经相当成熟，由他们自己举办，因此来自外界的干扰和污染特别小，评委也是来自于一线的新兴创业团队，并且都是一些注重技术和技术分享的公司。在这个比赛中，除了少量出现的偷偷用成品参加比赛的行为，包括零食，饮料的供应，都比TC的那次丰富和完善许多。而且采用的是现场公布题目的形式，题目的点也相当容易发散，不会提各种需求，这才让我感觉真真正正能出一些好东西。说实话，如果在Hackathon上还提一点两点三点好几点需求，那我就真的觉得和我平时做咨询，帮团队分析产品，做基础技术架构设计没有区别了。</p>
<p>也许只有SegmentFault的Hackathon才配得上年轻开发者的节日1024吧。</p>
<h1 id="Hackathon_u9700_u8981_u7684_u6280_u80FD"><a href="#Hackathon_u9700_u8981_u7684_u6280_u80FD" class="headerlink" title="Hackathon需要的技能"></a>Hackathon需要的技能</h1><p>对于我来说，我最害怕的就是止步不前，更害怕的是自己甘愿和其他90%的人一样陷于固有的事物和思维模式。我相信每一个接受过良好本科教育的大学毕业生在许多所谓的基础方式上都有着良好的基础，我们在校园里已经接受了足够的通识教育和专业基础教育，真正让每个人能够变得不同或者更好的，是在这个基础之上的思维模式。而Hackathon，既是对你的思维模式的磨炼，也是一种考验。</p>
<p>参加Hackathon，你需要首先对这个比赛有足够的判断能力，他到底是个商业大赛，还是外包大赛，还是真的Hackathon？对于不同类型的“Hackathon”，你需要做不同的准备，虽然当你发现是前两者之后你可能已经对它失去兴趣了。下面是你需要的一些技能。</p>
<h2 id="u4F60_u9700_u8981_u51DD_u805A_u4E00_u4E2A_u56E2_u961F_u3002"><a href="#u4F60_u9700_u8981_u51DD_u805A_u4E00_u4E2A_u56E2_u961F_u3002" class="headerlink" title="你需要凝聚一个团队。"></a>你需要凝聚一个团队。</h2><p>对于团队的凝聚力更大程度应该是通过事情，而不仅仅是所谓的个人魅力。事情有趣，事情酷炫，事情实实在在的解决问题，我想每一个有激情的人都会很主动的投入进来。所以你需要想清楚要做的事情应该是什么样的，是实际的，还是超出自己想象的，对做的事情需要有一个方向的把控，这才能够凝聚起一个团队。我始终坚信，共同的热爱才是团队一致向前的最好动力。</p>
<h2 id="u4F60_u9700_u8981_u6311_u9009_u4F60_u7684_u56E2_u961F_u3002"><a href="#u4F60_u9700_u8981_u6311_u9009_u4F60_u7684_u56E2_u961F_u3002" class="headerlink" title="你需要挑选你的团队。"></a>你需要挑选你的团队。</h2><p>Hackathon不是刷上机题，你不是一个人在战斗。所以团队是最重要的部分。首先你需要保证你自己的技术栈足够宽，这里我说的不是什么web全栈框架，我说的技术栈是从前端，客户端，后端，数据库，服务器到建模，动画，设计，客户端的游戏开发，甚至还有视频制作这种技术如果最好都需要覆盖到。当然，对于一个人来说做到这些太困难了，所以这也就是你需要团队的原因。如果是偏商业大赛，即有比较明确的商业赞助和商业评委的参与，那么你还需要一到两个Marketing的小伙伴加入；如果是偏外包大赛，甚至纯技术的团队都可以胜任，但是有一个产品/交互会好很多；如果是纯Hackathon，组一个纯产品的小伙伴就没有特别大的意义了，那个时候，人人都可以是产品经理！</p>
<p>团队人数方面，大部分Hackathon都限制在3~5人得范围内，最佳组合应该是能满足上述要求的4人组合。竞争力足够和5人团队匹敌，而5人团队也容易出现分歧，从而拖延本来就赶的进度。每一个决策都要尽量让每个队员都特别接受，并且有激情去做，因为Hackathon是在短时间内对每个人的精力和毅力的极大挑战，如果没有激情，那么你就会因为队员的疲惫而失去原本属于他的那份时间。</p>
<h2 id="u4F60_u9700_u8981_u5B66_u4F1A_u4E0D_u4E00_u6837_u7684_u5934_u8111_u98CE_u66B4_u3002"><a href="#u4F60_u9700_u8981_u5B66_u4F1A_u4E0D_u4E00_u6837_u7684_u5934_u8111_u98CE_u66B4_u3002" class="headerlink" title="你需要学会不一样的头脑风暴。"></a>你需要学会不一样的头脑风暴。</h2><p>这里的意思是如果你用正常的头脑风暴方式去思考，那么别人会和你做着同样的事情，到达同一个点，并且开始做同一个想法。这直接就宣告你的努力白费了。所以，你需要学会不一样的头脑风暴方式，不是从题目里的字眼发散，而是尝试着跳出来，从各处散乱的灵感里找到几个和题目接近的主题，再从那些主题中发散。记住，你能想到的东西，90%以上别人都会想到，所以我们要做的是去想别人想不到的那些想法。</p>
<h2 id="u70ED_u7231_u3002"><a href="#u70ED_u7231_u3002" class="headerlink" title="热爱。"></a>热爱。</h2><p>没有什么好说坚持和毅力什么的。那些都没有办法让你做到最好。只有热爱，像乔布斯说的那样，只有热爱能够让你真正把一件事情做好。所以在Hackathon的时候也一样，记住，一定要找到你热爱的东西，然后去完成它。如果找不到，就继续找，当然如果实在找不到，你可以选择随便找一个刚刚想出来的点子去实现。我相信4个人的思维火花碰撞，如果Hackathon足够纯净，你不可能找不到热爱的东西的。在Hackathon中，最切忌切忌的，就是凑合，为了做项目而去做项目。</p>
<h2 id="u5C55_u793A_u7684_u65F6_u5019_uFF0C_u8C26_u865A_uFF0C_u4F46_u662F_u8BA9_u522B_u4EBA_u611F_u53D7_u3002"><a href="#u5C55_u793A_u7684_u65F6_u5019_uFF0C_u8C26_u865A_uFF0C_u4F46_u662F_u8BA9_u522B_u4EBA_u611F_u53D7_u3002" class="headerlink" title="展示的时候，谦虚，但是让别人感受。"></a>展示的时候，谦虚，但是让别人感受。</h2><p>展示也是相当重要的一部分，如我上文所提。当你在最后的展示的时候，你需要让所有人都能感受到你的热爱，感受到你们的想法和你们所实现的东西的激情，这时候就需要你的表达能力和感染力了。在台上不要害怕，保持谦虚是一种很好的驱赶恐慌感的方式。简单明了的让大家了解你的想法，并且通过demo的演示让大家感受到你的热爱。好的东西，才更需要一种好的途径进入每一个观众的内心。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Hackathon__u662F_u4EC0_u4E48"><a href="#Hackathon__u662F_u4EC0_u4E48" class="heade]]>
    </summary>
    
      <category term="Hackathon" scheme="http://sergiochan.github.io/tags/Hackathon/"/>
    
      <category term="Hacker" scheme="http://sergiochan.github.io/categories/Hacker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[runloop初窥]]></title>
    <link href="http://sergiochan.github.io/2015/10/22/runloop%E5%88%9D%E7%AA%A5/"/>
    <id>http://sergiochan.github.io/2015/10/22/runloop初窥/</id>
    <published>2015-10-22T11:36:23.000Z</published>
    <updated>2015-12-18T13:13:14.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="u5148_u6765_u8BF4_u4E00_u4E2A_u5F88_u7B80_u5355_u7684_u5B9E_u4F8B"><a href="#u5148_u6765_u8BF4_u4E00_u4E2A_u5F88_u7B80_u5355_u7684_u5B9E_u4F8B" class="headerlink" title="先来说一个很简单的实例"></a>先来说一个很简单的实例</h2><p>在scrollView中添加一个timer来刷新视图的时候，如果只是简单的声明</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">self.timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">1.0</span>f <span class="string">target:</span>self <span class="string">selector:</span><span class="annotation">@selector</span>(<span class="string">timeUpdate:</span>) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>YES];</span><br></pre></td></tr></table></figure>
<p>那么当你滑动或者保持你的手指在scrollView上的时候，timer是不会被响应的，这不是因为刷新视图的操作被占用，而是因为当你没有显式声明的时候，你所定义的timer默认都是加在主线程上，并且，当你在对scrollView进行操作的时候，你的timer的事件根本不会被响应到，这就得说到runloop了。而runloop也是底层原理中相当重要的一部分。我们先从它说起。</p>
<h2 id="u4EC0_u4E48_u662Frunloop"><a href="#u4EC0_u4E48_u662Frunloop" class="headerlink" title="什么是runloop"></a>什么是runloop</h2><p>Runloop，顾名思义就是运行的循环。简单理解就是多线程机制中的基础，它能够接收外部事件的输入，并且在有事件的时候保持运行，在没有事件的时候进入休眠。并且它对于线程的消息处理机制进行了很好的封装。</p>
<p>对于线程来说，每一个线程都有一个runloop对象，是否能向某个线程的runloop发送事件取决于你是否启动了这个runloop，系统会默认在你的程序启动的时候运行主线程上的runloop，但是你自定义创建出来的线程可以不需要运行runloop，一些第三方框架，例如AFNetworking，就有在自己的线程上维护一个runloop对象。</p>
<p>在 Core Foundation 里面关于 RunLoop 有5个类:</p>
<ul>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
<li>CFRunLoopSourceRef </li>
<li>CFRunLoopTimerRef </li>
<li>CFRunLoopObserverRef</li>
</ul>
<p>他们的关系可以从NSRunloop对象的结构定义中得出。首先，runloop对象在Cocoa和Core Foundation中都有实现，但是他们做了很好的桥接，你可以直接调用</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">CFRunLoopRef runLoopRef = currentThreadRunLoop.getCFRunLoop<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>来获取一个CoreFoundation中的runloop对象。然后，当你在查看NSRunloop的结构的时候，你应该能看到：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;CFRunLoop <span class="number">0x7fd360f5af30</span> [<span class="number">0x1090a1180</span>]&gt;&#123;wakeup port = <span class="number">0x4507</span>, stopped = <span class="literal">false</span>, ignoreWakeUps = <span class="literal">true</span>, </span><br><span class="line">current mode = (none),</span><br><span class="line">common modes = &lt;CFBasicHash <span class="number">0x7fd360f5a470</span> [<span class="number">0x1090a1180</span>]&gt;&#123;type = <span class="keyword">mutable</span> <span class="built_in">set</span>, count = <span class="number">1</span>,</span><br><span class="line">entries =&gt;</span><br><span class="line">	<span class="number">2</span> : &lt;CFString <span class="number">0x10907d080</span> [<span class="number">0x1090a1180</span>]&gt;&#123;contents = <span class="string">"kCFRunLoopDefaultMode"</span>&#125;&#125;,</span><br><span class="line">common mode items = (null),</span><br><span class="line">modes = &lt;CFBasicHash <span class="number">0x7fd360f5b2b0</span> [<span class="number">0x1090a1180</span>]&gt;&#123;type = <span class="keyword">mutable</span> <span class="built_in">set</span>, count = <span class="number">1</span>,</span><br><span class="line">entries =&gt;</span><br><span class="line">	<span class="number">2</span> : &lt;CFRunLoopMode <span class="number">0x7fd360f5aff0</span> [<span class="number">0x1090a1180</span>]&gt;&#123;name = kCFRunLoopDefaultMode, port <span class="built_in">set</span> = <span class="number">0x4703</span>, timer port = <span class="number">0x4803</span>, </span><br><span class="line">	sources0 = (null),</span><br><span class="line">	sources1 = (null),</span><br><span class="line">	observers = &lt;CFArray <span class="number">0x7fd360f5b1a0</span> [<span class="number">0x1090a1180</span>]&gt;&#123;type = <span class="keyword">mutable</span>-small, count = <span class="number">1</span>, values = (</span><br><span class="line">	<span class="number">0</span> : &lt;CFRunLoopObserver <span class="number">0x7fd360f5c7f0</span> [<span class="number">0x1090a1180</span>]&gt;&#123;valid = Yes, activities = <span class="number">0xfffffff</span>, repeats = Yes, order = <span class="number">0</span>, callout = currentRunLoopObserver (<span class="number">0x10855b340</span>), context = &lt;CFRunLoopObserver context <span class="number">0x7fd361213d70</span>&gt;&#125;</span><br><span class="line">)&#125;,</span><br><span class="line">	timers = &lt;CFArray <span class="number">0x7fd360e020d0</span> [<span class="number">0x1090a1180</span>]&gt;&#123;type = <span class="keyword">mutable</span>-small, count = <span class="number">1</span>, values = (</span><br><span class="line">	<span class="number">0</span> : &lt;CFRunLoopTimer <span class="number">0x7fd360e01f90</span> [<span class="number">0x1090a1180</span>]&gt;&#123;valid = Yes, firing = No, interval = <span class="number">1</span>, tolerance = <span class="number">0</span>, next fire date = <span class="number">463742311</span> (-<span class="number">2.53606331</span> @ <span class="number">23607719248079</span>), callout = (NSTimer) [SCCustomThread handleTimerTask] (<span class="number">0x1086416f1</span> / <span class="number">0x10855b560</span>) (/Users/useruser/Library/Developer/CoreSimulator/Devices/<span class="number">424</span>D3C6E-<span class="number">8</span>DC0-<span class="number">418</span>B-A2EC-<span class="number">8</span>EDF89507348/data/Containers/Bundle/Application/<span class="number">4</span>D07AF38-<span class="number">9</span>BFC-<span class="number">4617</span>-BAE0-<span class="number">4</span>CB0D7966CC8/runloopTest.app/runloopTest), context = &lt;CFRunLoopTimer context <span class="number">0x7fd360e01f70</span>&gt;&#125;</span><br><span class="line">)&#125;,</span><br><span class="line">	currently <span class="number">463742313</span> (<span class="number">23610255156065</span>) / soft deadline in: <span class="number">1.84467441e+10</span> sec (@ <span class="number">23607719248079</span>) / hard deadline in: <span class="number">1.84467441e+10</span> sec (@ <span class="number">23607719248079</span>)</span><br><span class="line">&#125;,&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到一个runloop对象包含各种Mode——currentMode，common mode，modes等等，这里的示例我只指定了一个defaultMode。每个mode对应了source，observers和timers。</p>
<blockquote>
<p>也许你会注意到 source 包括了source0和source1两个版本。</p>
<ul>
<li>Source0 只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。</li>
<li>Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程。</li>
</ul>
</blockquote>
<p>CFRunLoopObserver类型的对象也可以称之为观察者。每个观察者都包含了一个回调，当runloop的状态发生变化时，你可以通过回调来知道当前的状态。</p>
<h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg" alt="image"></p>
<p>在你的程序中，runloop的过程实际上是一个无限循环的循环体，这个循环体是由你的程序来运行的。主线程的runloop由于系统已经实现并且没有它程序就不能运行，因此不需要我们手动去运行这个runloop。然而如果我们需要在自定义的线程中使用到runloop，我们则需要用一个do…while循环来驱动它。而runloop对象负责不断地在循环体中运行传进来的事件，然后将事件发给相应的响应。</p>
<blockquote>
<p>如果你打开你的程序的main.m，你就会发现其实主线程的runloop就是在main函数中进行的，并且系统已经为你生成好了autoreleasepool，因此你也无需操心主线程上的内存释放到底是在什么时候执行了：</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">     <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate class]));</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据响应源的不同，runloop也被分成了许多种不同的模式，这就是被Cocoa和Core Foundation都封装了的runloopMode。主要是这么几种：</p>
<ul>
<li>NSDefaultRunLoopMode: 大多数工作中默认的运行方式。</li>
<li>NSConnectionReplyMode: 使用这个Mode去监听NSConnection对象的状态。</li>
<li>NSModalPanelRunLoopMode: 使用这个Mode在Model Panel情况下去区分事件(OS X开发中会遇到)。</li>
<li>NSEventTrackingRunLoopMode: 使用这个Mode去跟踪来自用户交互的事件（比如UITableView上下滑动）。</li>
<li>NSRunLoopCommonModes: 这是一个伪模式，其为一组run loop mode的集合。如果将Input source加入此模式，意味着关联Input source到Common Modes中包含的所有模式下。在iOS系统中NSRunLoopCommonMode包含NSDefaultRunLoopMode、NSTaskDeathCheckMode、NSEventTrackingRunLoopMode.可使用CFRunLoopAddCommonMode方法向Common Modes中添加自定义mode。</li>
</ul>
<p>在文首的情况中，我们可以根据苹果官方文档的定义知道，当你在滑动页面的时候，主线程的runloop自动进入了NSEventTrackingRunLoopMode，而你的timer只是运行在DefaultMode下，所以不能响应。那么最简单的办法就是将你的timer添加在其他的mode下，像这样即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr_selector">[[NSRunLoop currentRunLoop]</span> <span class="tag">addTimer</span><span class="pseudo">:self</span><span class="class">.timer</span> <span class="tag">forMode</span><span class="pseudo">:NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>
<p>需要注意的是CommonModes其实并不是一种Mode，而是一个集合。因此runloop并不能在CommonModes下运行，相反，你可以将需要输入的事件源添加为这个mode，这样无论runloop运行在哪个mode下都可以响应这个输入事件，否则这个事件将不会得到响应。</p>
<h2 id="Input_Source"><a href="#Input_Source" class="headerlink" title="Input Source"></a>Input Source</h2><p>输入源包括三种，端口，自定义输入源和performSelector的消息。根据上面的图我们可以看出，在runloop接收到消息并执行了指定方法的时候，它会执行runUntilDate:这个方法来退出当前循环。</p>
<p>端口源是基于Mach port的，其他进程或线程可以通过端口来发送消息。这里的知识点需要深入到Mach，就已经比较晦涩难懂了……这里你只需要知道你可以用Cocoa封装的NSPort对象来进行线程之间的通信，而这种通信方式所产生的事件就是通过端口源来传入runloop的。关于Mach port的更深层介绍可以看<a href="http://segmentfault.com/a/1190000002400329" target="_blank" rel="external">这篇</a>。</p>
<p>自定义输入源。Core Foundation提供了CFRunLoopSourceRef类型的相关函数，可以用来创建自定义输入源。</p>
<p>performSelector输入源:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在主线程的Run Loop下执行指定的 @selector 方法</span></span><br><span class="line"><span class="string">performSelectorOnMainThread:</span><span class="string">withObject:</span><span class="string">waitUntilDone:</span></span><br><span class="line"><span class="string">performSelectorOnMainThread:</span><span class="string">withObject:</span><span class="string">waitUntilDone:</span><span class="string">modes:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在当前线程的Run Loop下执行指定的 @selector 方法</span></span><br><span class="line"><span class="string">performSelector:</span><span class="string">onThread:</span><span class="string">withObject:</span><span class="string">waitUntilDone:</span></span><br><span class="line"><span class="string">performSelector:</span><span class="string">onThread:</span><span class="string">withObject:</span><span class="string">waitUntilDone:</span><span class="string">modes:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在当前线程的Run Loop下延迟加载指定的 @selector 方法</span></span><br><span class="line"><span class="string">performSelector:</span><span class="string">withObject:</span><span class="string">afterDelay:</span></span><br><span class="line"><span class="string">performSelector:</span><span class="string">withObject:</span><span class="string">afterDelay:</span><span class="string">inModes:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取消当前线程的调用</span></span><br><span class="line"><span class="string">cancelPreviousPerformRequestsWithTarget:</span></span><br><span class="line"><span class="string">cancelPreviousPerformRequestsWithTarget:</span><span class="string">selector:</span><span class="string">object:</span></span><br></pre></td></tr></table></figure>
<h2 id="runloop_u751F_u547D_u5468_u671F"><a href="#runloop_u751F_u547D_u5468_u671F" class="headerlink" title="runloop生命周期"></a>runloop生命周期</h2><p>每一次runloop其实都是一次循环，runloop会在循环中执行runUntilDate: 或者runMode: beforeDate: 来开始每一个循环。而每一个循环又分为下面几个阶段，也就是runloop的生命周期：</p>
<ul>
<li>kCFRunLoopEntry 进入循环</li>
<li>kCFRunLoopBeforeTimers 先接收timer的事件</li>
<li>kCFRunLoopBeforeSources 接收来自input source的事件</li>
<li>kCFRunLoopBeforeWaiting 如果没有事件，则准备进入休眠模式，在这里，如果没有事件传入，runloop会运行直到循环中给定的日期，如果你给的是distantFuture，那么这个runloop会无限等待下去</li>
<li>kCFRunLoopAfterWaiting 从休眠中醒来，直接回到kCFRunLoopBeforeTimers状态</li>
<li>kCFRunLoopExit 退出循环</li>
</ul>
<p>这些状态也是一个枚举类型，系统是这么定义的，你可以使用observer来观测到这些状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1U</span>L &lt;&lt; <span class="number">0</span>),</span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1U</span>L &lt;&lt; <span class="number">1</span>),</span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1U</span>L &lt;&lt; <span class="number">2</span>),</span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">5</span>),</span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">6</span>),</span><br><span class="line">    kCFRunLoopExit = (<span class="number">1U</span>L &lt;&lt; <span class="number">7</span>),</span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们下面做一个测试，在demo中我们定义了一个新的线程类，这样我们可以自己启动和维护它的runloop对象。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)main</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Thread Enter"</span>);</span><br><span class="line">        [[<span class="built_in">NSThread</span> currentThread] setName:<span class="string">@"This is a test thread"</span>];</span><br><span class="line">        <span class="built_in">NSRunLoop</span> *currentThreadRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// CFRunLoopRef currentThreadRunLoop = CFRunLoopGetCurrent();</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>, (__bridge <span class="keyword">void</span> *)(<span class="keyword">self</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">        <span class="built_in">CFRunLoopObserverRef</span> observer = <span class="built_in">CFRunLoopObserverCreate</span>(k<span class="built_in">CFAllocatorDefault</span>, k<span class="built_in">CFRunLoopAllActivities</span>, <span class="literal">YES</span>, <span class="number">0</span>, &amp;currentRunLoopObserver, &amp;context);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (observer) &#123;</span><br><span class="line">            <span class="built_in">CFRunLoopRef</span> runLoopRef = currentThreadRunLoop<span class="variable">.getCFRunLoop</span>;</span><br><span class="line">            <span class="built_in">CFRunLoopAddObserver</span>(runLoopRef, observer, k<span class="built_in">CFRunLoopDefaultMode</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个Timer，重复调用来驱动Run Loop</span></span><br><span class="line">        <span class="comment">//[NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(handleTimerTask) userInfo:nil repeats:YES];</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            [currentThreadRunLoop runMode:<span class="built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">3</span>]];</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入源或者timer对于runloop来说是必要条件，如果没有添加任何输入源，则runloop根本不会启动，所以上面的代码中添加timer的操作，实际上是添加了一个默认的事件输入源，能让runloop保持运行。但是实际上，当你创建好一个runloop对象后，任何输入的事件都可以触发runloop的启动。</p>
<p>例如下面的：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self <span class="string">performSelector:</span><span class="annotation">@selector</span>(selectorTest) <span class="string">onThread:</span>self.runLoopThread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br></pre></td></tr></table></figure>
<p>记住，如果你需要自己来启动和维护runloop的话，核心就在于一个do…while循环，你可以为runloop的跳出设置一个条件，也可以让runloop无限进行下去。在runloop没有接收到事件进入休眠状态之后，如果调用performSelector，runloop的状态变化如下：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopAfterWaiting</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">fuck</span><br><span class="line">fuck_1</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopExit</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopExit</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeWaiting</span><br></pre></td></tr></table></figure>
<p>在这里我连续调用了两次performSelector，可以看到runloop也经历了两个循环，而如果只调用一次的话，不会有多出来的那次runloop（你可以自己尝试一下），这是否说明每一次performSelector执行完毕之后都会立即结束当前runloop开始新的，苹果的官方文档里有一句话：</p>
<blockquote>
<p>The run loop processes all queued perform selector calls each time through the loop, rather than processing one during each loop iteration</p>
</blockquote>
<p>应该意思是并不是像上面看到的结果那样每一次循环执行一次，而是有一个待执行的操作队列。如果我同时执行四次performSelector，像这样：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self <span class="string">performSelector:</span><span class="annotation">@selector</span>(selectorTest) <span class="string">onThread:</span>self.runLoopThread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br><span class="line">   [self <span class="string">performSelector:</span><span class="annotation">@selector</span>(selectorTest_1) <span class="string">onThread:</span>self.runLoopThread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br><span class="line">   [self <span class="string">performSelector:</span><span class="annotation">@selector</span>(selectorTest_2) <span class="string">onThread:</span>self.runLoopThread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br><span class="line">   [self <span class="string">performSelector:</span><span class="annotation">@selector</span>(selectorTest_2) <span class="string">onThread:</span>self.runLoopThread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br></pre></td></tr></table></figure>
<p>实际上得到的结果和上面是一样的，然而当我将他们的waitUntilDone参数都设置为YES之后，我们可以看到不一样的地方：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Thread</span> Enter</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">fuck</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopExit</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">fuck_1</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopExit</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">fuck_2</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopExit</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">fuck_2</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopExit</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopEntry</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeTimers</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeSources</span><br><span class="line">Current <span class="keyword">thread</span> Run <span class="keyword">Loop</span> activity: kCFRunLoopBeforeWaiting</span><br></pre></td></tr></table></figure>
<p>你可以看到每一个performSelector操作都单独执行了一个runloop，从苹果的文档中我们可以找到这个方法的定义：</p>
<blockquote>
<ul>
<li>performSelector:onThread:withObject:waitUntilDone:</li>
<li>performSelector:onThread:withObject:waitUntilDone:modes:</li>
</ul>
<p>Performs the specified selector on any thread for which you have an NSThread object. These methods give you the option of blocking the current thread until the selector is performed.</p>
</blockquote>
<p>也就是说，waitUntilDone意味着这个操作是否会在当前线程阻塞其他的输入源，如果等于True，则每一次runloop循环只会处理这一个selector的调用，如果为False，则队列中后面等待着的selector调用都会在同一次runloop循环中执行。至于上文的执行了两个runloop循环的现象，我猜测应该是当runloop从休眠模式被唤醒的时候，当前循环执行完唤醒的操作后就会立即结束，释放掉之前可能累积下来的内存，然后开始新的循环，将队列中的其他输入逐个放进runloop循环中执行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="u5148_u6765_u8BF4_u4E00_u4E2A_u5F88_u7B80_u5355_u7684_u5B9E_u4F8B"><a href="#u5148]]>
    </summary>
    
      <category term="NSThread" scheme="http://sergiochan.github.io/tags/NSThread/"/>
    
      <category term="iOS" scheme="http://sergiochan.github.io/tags/iOS/"/>
    
      <category term="runloop" scheme="http://sergiochan.github.io/tags/runloop/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objective-c_runtime是什么]]></title>
    <link href="http://sergiochan.github.io/2015/10/22/objective-c-runtime%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://sergiochan.github.io/2015/10/22/objective-c-runtime是什么/</id>
    <published>2015-10-22T11:03:54.000Z</published>
    <updated>2015-12-18T13:13:14.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="u5F53_u4F60_u8C03_u7528_u4E00_u4E2A_u65B9_u6CD5_u7684_u65F6_u5019_uFF0C_u53D1_u751F_u4E86_u4EC0_u4E48"><a href="#u5F53_u4F60_u8C03_u7528_u4E00_u4E2A_u65B9_u6CD5_u7684_u65F6_u5019_uFF0C_u53D1_u751F_u4E86_u4EC0_u4E48" class="headerlink" title="当你调用一个方法的时候，发生了什么"></a>当你调用一个方法的时候，发生了什么</h2><p>在Objective-C里，当你调用一个方法的时候，例如</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">[foo <span class="function"><span class="keyword">method</span>];</span></span><br></pre></td></tr></table></figure>
<p>的时候，实际上编译器会将它转化为这样</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">objc_msgSend</span><span class="params">(foo,selector)</span></span></span><br></pre></td></tr></table></figure>
<p><code>selector</code>就是你能够经常用到的那个addTarget中使用到的，它在runtime机制中相当于一个函数的名牌，而IMP则是函数的实现。<br>消息机制的关键是编译器是如何处理每一个类和对象的。一般来说，一个类会被编译成这样的结构，一个指向父类的指针，一个类的分派表。这个列表里存的是所有的<code>selector</code>和他们对应的方法的地址。没错，每个方法都有一个地址，通过地址来调用方法。而这个地址，就是由函数指针IMP来得到的。</p>
<blockquote>
<p>如果你学过编译原理，并且用其他语言自己写过一个编译器的话，你应该了解写一个基础语言调用方法的时候都会有一个全局的方法表，然后调用的过程实际上是去这个方法表中查找对应方法地址的过程。而Objective-C也是类似的，但是由于它是面向对象的，而且又有着这个runtime的特性，也就意味着在Objective-C中的函数调用实际上是在运行时动态的查询当前类和其父类的分派表。<br>在分派表中，每一个selector都是由SEL对应IMP的形式存储着。我们可以找到SEL的定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector   *SEL;</span><br></pre></td></tr></table></figure>
<p>所以SEL实际上表示的是方法的签名。在不同的类中如果有相同名称相同参数的方法，则他们的SEL是一样的。但是对应的IMP，也就是函数指针，是在runtime的时候才会动态的去查询然后调用的。<br>IMP的定义则是：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">typedef id <span class="list">(<span class="keyword">*IMP</span>)</span><span class="list">(<span class="keyword">id</span>, SEL, ...)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>我们可以看出，这个被指向的函数包含一个接收消息的对象id, 调用方法的签名 SEL，以及不定个数的方法参数，并返回一个id。也就是说 IMP 是消息最终调用的执行代码，是方法真正的实现代码。对于对象来说，当一个对象被分配空间并初始化之后，对象有一个指向它的类结构，也就是上面提到的这些东西的指针。这就是你所熟悉的<code>isa</code>，这样可以通过自身访问到自身的类以及无穷的父类里的方法列表。<br>比方说，有一个继承于<code>NSObject</code>的foo类，然后又有一个foo1类继承于foo，这时候我们初始化一个foo1的实例对象A，然后调用A的某个方法B，这时候其实也就是向A发了一个消息，要调用B的<code>selector</code>。首先会做的是判断接收对象是不是nil，要记住空对象可以接收消息，因为当你向一个空对象发消息的时候，实际上处理的是一个<code>nil-handler</code>，而这个handler是啥也不会做的，因此什么也不会发生。<br>接下来系统在运行时会先从foo1的分派表中寻找B的<code>selector</code>，如果没有，则向foo类找，如果有，则直接调用了，然后直到找到<code>NSObject</code>，如果这时候还找不到，那么就会报经典的<strong>‘UnRecognized selector sent to instance’</strong>，如果找到了，那就按照对应的地址找到函数，然后把需要的参数一起传过去。</p>
<p>这里有个黑科技，其实也很简单，这个报错和崩溃来源于动态查询函数实现最终失败的调用<code>doesNotRecognizeSelector</code>，如果你重写了这个方法，那么对于这个类的对象的错误函数调用就可以避免crash了。但是实际上并没有什么卵用，这反而还掩盖了在消息发送和转发的过程中出现的一些异常。<br>当然，系统为了加快这个速度，在上面这一步之前加上了分派表的缓存，秉承着你调用过的函数就有可能再次被调用的原则，你所调用过的函数会被加入到这个缓存表里来。因此，你可以认为当你的应用运行了一会儿之后，这个缓存会变大，然后这时候消息机制也会越变越快。<br>最关键的点是在当这个查询最后在分派表中没有找到相应实现的时候，会进行一系列调用。而在这个过程中，我们可以做到动态绑定函数地址，动态重定向实现对象和动态重定向实现的函数地址。函数的地址也就是你常见的<code>IMP</code>。<br>如果找到函数实现，则不会进入下面的流程。如果没有找到函数的实现，则会先调用<code>resolveInstanceMethod</code>这个函数。这个函数是在没有找到函数实现的情况下的第一道补救，这时候你可以通过<code>class_addMethod</code>动态添加函数。<br>一个Objective-C的函数实际上就是一个简单地带有至少两个参数self和_cmd的C方法体。如官方文档给出的这样结构：</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> dynamicMethodIMP(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    <span class="comment">// implementation ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>resolveInstanceMethod</code>的时候，你可以这样动态添加一个函数，并且如果当你添加了函数的时候，你需要return YES。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)aSEL</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (aSEL == <span class="keyword">@selector</span>(resolveThisMethodDynamically)) &#123;</span><br><span class="line">          class_addMethod([<span class="keyword">self</span> class], aSEL, (IMP) dynamicMethodIMP, <span class="string">"v@:"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:aSEL];&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这是第一个解决办法，当然，如果你返回了YES，则消息就将被发送到你刚添加的这个IMP去了，也就不会继续下面的消息转发机制了。因此苹果的官方文档就说，动态添加函数是在消息转发机制之前进行的。如果你动态添加了某些函数的实现，但还是希望他们能进入下面的消息转发机制里，你也可以让指定的<code>selector</code>返回NO就好了。<br>接下去就是消息转发的流程了。<br>一进入消息转发机制之后，runtime首先会调用<code>forwardingTargetForSelector</code>。这是让你能够指定对象来响应这个方法的地方，返回值是一个id对象，如果返回的是非空且不是自身的时候，runtime会将消息发送给这个对象，试图获得返回。当这一步仍然为空，则会进入下一步的流程。<br>在下一步调用<code>forwardInvocation</code>之前，会走一个函数调用叫做<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)selector</code>，在这里你可以为没有找到对应IMP的selector添加修改他们的方法签名，这里如果你抛出了一个函数的签名，则会继续传递到下一步中，如果抛出了nil，则你再也不会进到下一步了，在这里就直接报错了。你可以在这里做一些有趣的事情，例如修改一些没有实现的selector签名为一些已知的或者固定格式的，然后再由下面的<code>forwardInvocation</code>来提供分发之类的实现。<br>当通过了上一步仍然没有函数实现能够响应这条消息的时候，runtime会向对象发送一个 <code>forwardInvocation：</code>的消息，并且会把<strong>对函数的调用和附带的参数</strong>封装成一个<code>NSInvocation</code>对象传过来。下面设想的是这么一个场景，你希望对A类对象的B方法调用由C类对象的B方法来响应。是的，你可以让A类来继承B类，但是很多情况下这会让情况变得更糟糕，特别是OC并不支持多继承的情况下。这时候就可以用消息转发机制来实现动态绑定啦！当消息不能被正确响应的时候，你需要确定消息将要发送的对象，然后将最开始的调用和参数列表一起发送过去。消息可以用<code>invokeWithTarget</code>来发送：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="typename">void</span>)<span class="string">forwardInvocation:</span>(NSInvocation *)anInvocation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([someOtherObject <span class="string">respondsToSelector:</span></span><br><span class="line">            [anInvocation selector]])</span><br><span class="line">        [anInvocation <span class="string">invokeWithTarget:</span>someOtherObject];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        [<span class="keyword">super</span> <span class="string">forwardInvocation:</span>anInvocation];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有，记住每个<code>NSObject</code>的子类都继承了这个方法，但是如果你没有手动去重写的话，NSObject里的实现只会马上调用<code>doesNotRecognizeSelector</code>，也就是前面经典的报错。因此你需要手动重写它。<br>这个方法所获得的返回都会返回给最初调用的发送者，不管他是谁。<br><code>forwardInvocation</code>可以作为未知消息的分发器，让他们各自发送到合理的对象那里去，也可以在这里就过滤掉一些可能会出错的返回和错误信息。<br>利用消息转发机制我们也可以实现类似多继承的功能。如果A类中不存在B方法，而C类中有B方法，通过消息转发，我们就可以从A类调用B方法，并且通过<code>forwardInvocation</code>来分发，我们可以实现类似多继承的功能。但是这两者毕竟还是有区别的，因为多继承是一个可以在一个类中拥有许多父类的方法和属性。但是通过消息转发，我们也只是在消息层面上实现了拥有许多父类方法的能力。<br>另外要提的就是，即使你做了消息转发来实现类似多继承的能力，当你调用<code>respondToSelector</code>或<code>isKindOfClass</code>的时候，他们只会去你自身的继承树里面去寻找<code>selector</code>，而并不会去识别你的消息转发机制。<br>因此，当你需要为你的超级对象生成一个小的代理对象（surrodate object）的时候，或者你确实需要动态扩展你的类的时候，你需要重写很多方法。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">- (BOOL)respondsToSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( [super respondsToSelector:aSelector] )</span><br><span class="line"><span class="command">        return</span> YES;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        /* Here, test whether <span class="keyword">the</span> aSelector message can     *</span><br><span class="line">         * be forwarded <span class="keyword">to</span> another object <span class="keyword">and</span> whether <span class="keyword">that</span>  *</span><br><span class="line">         * object can respond <span class="keyword">to</span> <span class="keyword">it</span>. Return YES <span class="keyword">if</span> <span class="keyword">it</span> can.  */</span><br><span class="line">    &#125;</span><br><span class="line"><span class="command">    return</span> NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照官方文档，你总共需要重写下面几个方法，并且都加上你的消息转发机制。</p>
<ul>
<li><code>respondsToSelector</code></li>
<li><code>isKindOfClass</code></li>
<li><code>instancesRespondToSelector</code></li>
<li><code>conformsToProtocol</code>（如果有用到协议）</li>
<li><code>methodSignatureForSelector</code></li>
</ul>
<p>哎，可是谁又会用得到呢。官方文档最后的小贴士说，这项技术不在走投无路的时候不要用，它不是用来替代继承的。对于我们最多只能是了解并且用到最表层的例如消息转发还有错误的拦截之类，在实际运用中也只对程序运行时的机制有了更好的了解，但是仍然并没有什么卵用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="u5F53_u4F60_u8C03_u7528_u4E00_u4E2A_u65B9_u6CD5_u7684_u65F6_u5019_uFF0C_u53D1_u751]]>
    </summary>
    
      <category term="Objective-C" scheme="http://sergiochan.github.io/tags/Objective-C/"/>
    
      <category term="objc_msgSend" scheme="http://sergiochan.github.io/tags/objc-msgSend/"/>
    
      <category term="runtime" scheme="http://sergiochan.github.io/tags/runtime/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tornado-TCP服务器间内部通讯TCP服务器性能验证]]></title>
    <link href="http://sergiochan.github.io/2015/07/19/tornado-TCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%B4%E5%86%85%E9%83%A8%E9%80%9A%E8%AE%AFTCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E9%AA%8C%E8%AF%81/"/>
    <id>http://sergiochan.github.io/2015/07/19/tornado-TCP服务器间内部通讯TCP服务器性能验证/</id>
    <published>2015-07-19T01:08:40.000Z</published>
    <updated>2015-12-19T01:19:46.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>本文附带项目Github仓库地址，随手star是个好习惯：<br><a href="https://github.com/SergioChan/tornado-TCP" target="_blank" rel="external">https://github.com/SergioChan/tornado-TCP</a></p>
</blockquote>
<h1 id="u4E3A_u4EC0_u4E48_u8981_u6709tornado-TCP"><a href="#u4E3A_u4EC0_u4E48_u8981_u6709tornado-TCP" class="headerlink" title="为什么要有tornado-TCP"></a>为什么要有tornado-TCP</h1><p>在实际的业务场景中，当一个系统复杂到一定程度后，很多服务都需要被独立地分割出来，部署到独立的服务器上。例如日志服务，图像服务，短信服务和一些数据分析服务这些可能会被许多功能模块共用的且对服务器性能有一定消耗的服务。当功能划分后，各服务器之间就需要通过内部调用连接在一起，通常来说简便的做法就是通过HTTP请求，这样外部和内部访问的服务器都是通用的，对于开发，维护和部署来说是省去了不少功夫。但是，一方面，有一些HTTP Server可能会同时处理内部和外部请求，如果从其他模块发来的内部请求过多，占用了HTTP Server的处理资源，外部客户端的请求可能会因此变慢，因此对于一个想要拥有更高可靠性和稳定性的大型系统来说，将内部调用和外部调用从逻辑上分离开是一个比较好的优化手段。另一方面，虽然在这种场景下HTTP请求的性能不会差到哪里去，在拥有局域网的情况下，这种内部调用的处理速度会相当快，它的连接也会很快的被释放和刷新，但是由于HTTP毕竟是TCP上的应用层，TCP省去了一些HTTP Header的传输和消耗，因此一定意义上采用更低级的TCP来作为内部调用的传输手段，既是一种较为标准和专业化的方法，也是一种更加优化的方法。<br>我们先要理解HTTP连接和TCP连接的区别。首先，HTTP连接是基于TCP连接的。HTTP（HyperText Transport Protocol）是超文本传输协议的缩写。 HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求，其中，请求头包含请求的方法、URL、协议版本、以及包含请求修饰符、客户信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，响应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以及可能的实体内容。它的最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，客户端会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。这个特点也使得HTTP协议成为了包括移动和web浏览器在内的客户端和服务器端通信的标准途径，因为大部分客户端和服务器的交互都是一次性的，例如一次读和一次写。当每次交互都是原子的时候，在没有特别需求的场景维持长连接对于资源是一种浪费，因此大部分客户端和服务器通信都采用了HTTP协议。虽然现在已经有一些HTTP长连接的实现，但它的机制其实也是基于HTTP协议的，通过类似心跳的模式保持HTTP连接不会被释放。<br>TCP提供一种面向连接的、可靠的字节流服务。面向连接意味着两个使用TCP的应用，通常是一个客户和一个服务器。在彼此交换数据包之前必须先建立一个TCP连接。在一个TCP连接中，仅有两方进行彼此通信。在普遍的场景中，TCP长连接常用于客户端推送、即时通信的实现。当然，在很多情况下，TCP也被用来作为服务器内部服务调用的实现。像日志服务这种公用的服务模块，整个系统对它的调用是十分频繁的，因此采用“一次连接”模式的HTTP请求和采用保持连接的TCP请求的区别十分明显，采用TCP会使系统省下大量的资源去重新建立和释放连接。</p>
<h1 id="u5B9E_u9645_u7ED3_u679C"><a href="#u5B9E_u9645_u7ED3_u679C" class="headerlink" title="实际结果"></a>实际结果</h1><p>对于服务器内部通信采用HTTP协议和TCP协议的性能表现差异，我用对比实验的方式来验证结果。首先，我模拟了传统的HTTP Server的环境，采用了Django作为服务器，并实现了一个基于HTTP协议的内部调用的协议。同时，我将tornado-TCP也部署在相同机器上，在Django上同样实现了一个基于TCP协议的内部调用的协议。然后通过压力测试，得出了以下结果：</p>
<h2 id="u6BCF_u79D2_u5E76_u53D1_u7684_u6D41_u91CF_u6D4B_u8BD5_uFF1A"><a href="#u6BCF_u79D2_u5E76_u53D1_u7684_u6D41_u91CF_u6D4B_u8BD5_uFF1A" class="headerlink" title="每秒并发的流量测试："></a>每秒并发的流量测试：</h2><p>基于HTTP的内部调用的协议请求：<br>Used 1.00223088264 s for requests, success count is: 289<br>基于TCP的内部调用的协议请求：<br>Used 1.00016713142 s for requests, success count is: 633  </p>
<h2 id="u4E00_u5B9A_u6570_u91CF_u5E76_u53D1_u8BF7_u6C42_u7684_u5904_u7406_u901F_u5EA6_uFF1A"><a href="#u4E00_u5B9A_u6570_u91CF_u5E76_u53D1_u8BF7_u6C42_u7684_u5904_u7406_u901F_u5EA6_uFF1A" class="headerlink" title="一定数量并发请求的处理速度："></a>一定数量并发请求的处理速度：</h2><p>基于HTTP的内部调用的协议请求：<br>Used 47.3748078346 s for 10,000 requests, success count is: 9998<br>Used 281.623967171 s for 50,000 requests, success count is: 49999<br>基于TCP的内部调用的协议请求：<br>Used 14.8007540703 s for 10,000 requests, success count is: 9999<br>Used 123.114969015 s for 50,000 requests, success count is: 49999<br>以上的测试结果均基于相同的Django环境，由于测试的时候使用的是单进程的Django自带的HTTP Server，因此TCP Server也采用了单进程模式。如果切换成多进程模式，采用的原理和tornado相同。也就是说，当基于Django的HTTP Server以单进程模式运行的时候，其处理速度大概是相同条件的tornado-TCP服务器的一半以上。<br>这是这三个服务器的进程情况：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">501</span> <span class="number">68455</span>  <span class="number">1492</span>   <span class="number">0</span> <span class="number">10</span>:<span class="number">11</span>上午 ??         <span class="number">0</span>:<span class="number">08.05</span> /usr/bin/python /Users/useruser/tornado-TCP/Server/Manage.py</span><br><span class="line"><span class="number">501</span> <span class="number">68465</span> <span class="number">68433</span>   <span class="number">0</span> <span class="number">10</span>:<span class="number">12</span>上午 ttys001    <span class="number">0</span>:<span class="number">00.63</span> /usr/bin/python manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9555</span></span><br><span class="line"><span class="number">501</span> <span class="number">68468</span> <span class="number">68465</span>   <span class="number">0</span> <span class="number">10</span>:<span class="number">12</span>上午 ttys001    <span class="number">0</span>:<span class="number">08.13</span> /usr/bin/python manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9555</span></span><br><span class="line"><span class="number">501</span> <span class="number">68475</span> <span class="number">68472</span>   <span class="number">0</span> <span class="number">10</span>:<span class="number">12</span>上午 ttys002    <span class="number">0</span>:<span class="number">00.43</span> /usr/bin/python manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9556</span></span><br><span class="line"><span class="number">501</span> <span class="number">68478</span> <span class="number">68475</span>   <span class="number">0</span> <span class="number">10</span>:<span class="number">12</span>上午 ttys002    <span class="number">0</span>:<span class="number">43.47</span> /usr/bin/python manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9556</span></span><br></pre></td></tr></table></figure>
<p>其中9555端口运行的是内部调用的HTTP Server，9556端口运行的是主测试服务器，TCP服务器运行在8889端口上。</p>
<h1 id="u6846_u67B6_u4ECB_u7ECD"><a href="#u6846_u67B6_u4ECB_u7ECD" class="headerlink" title="框架介绍"></a>框架介绍</h1><h2 id="tornado-TCP_framework"><a href="#tornado-TCP_framework" class="headerlink" title="tornado-TCP framework"></a>tornado-TCP framework</h2><p>tornado-TCP的框架可以由以上的架构图来表示。和传统的HTTP Server相比，它相当于是在不同的Server之间建立了一个长连接，而这个连接的主体是一个IOStream，由Connection类来保持监听和字节流的读取。其余模块都是参考传统HTTP Server的架构来添加的。<br>任意其他连接到tornado-TCP的服务器实际上都是一个客户端。每个客户端都需要自己维护一个和tornado-TCP服务器的TCP Socket连接。如果这种内部调用在可预见的范围内十分的频繁，这个连接最好在全局建立和维护，随着服务器的启动初始化。保持IOStream的连接可以使得服务器之间的局域网通信比传统的HTTP请求更快。</p>
<h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>Any other server that was connected to this tornado-TCP server will be represented as a client-server. Each client-server will maintain a TCP connection with tornado-TCP server. If the connection will be used very frequently, it’s better not to close it. Keeping an IOStream for the connection will make the communication in the server-side Local Area Network faster than typical HTTP request.<br>Connection will read the request from IOStream and handle the requests. When a request handling is over, the Connection will automatically read the stream to get the next request. As the source code shown below:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    tmp_body = data[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    request = Request(address=self._address, Body=tmp_body)</span><br><span class="line">    handler = urls.Handler_mapping.get(request.cmdid)</span><br><span class="line"></span><br><span class="line">    handler_instance = handler()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(handler_instance,BaseHandler):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            handler_instance.process(request=request)</span><br><span class="line">            self._stream.write(handler_instance.res)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            baseLogger.error(e.message)</span><br><span class="line"></span><br><span class="line">self.read_request()</span><br></pre></td></tr></table></figure>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Handler is the class type for processing the request object. You can sub-class your own Handler from BaseHandler to implement custom processing method. This is the sample of TestHandler:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="decorator">@urls.handler(constant.TEST_CMDID)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(request, Request):</span><br><span class="line">            <span class="keyword">print</span> request.params</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError</span><br></pre></td></tr></table></figure>
<p>Notice the decorator @urls.handler which is used to add mapping between cmdId and Handler. The definition of this decorator is in the urls.py. Each custom Handler should decorated by this decorator.</p>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>Request is the basic object type in the IOStream. Each Request is delimited by a delimiter ‘\n’.Request is transported in a serialization mode, using normal json type.<br>To extend Request, define a subclass and there is no need to override anything.<br>Request has following parameters:  </p>
<ul>
<li>1.address: simple ip address combined with port number representing the request origin server.</li>
<li>2.rawBody: raw content of the request body</li>
<li>3.cmdid: command id defines in Command</li>
<li>4.timestamp: the date when request was sent</li>
<li>5.params: a dict that storage all the data it takes</li>
</ul>
<p>详细介绍和代码请前往<a href="https://github.com/SergioChan/tornado-TCP" target="_blank" rel="external">https://github.com/SergioChan/tornado-TCP</a><br>欢迎关注和批评指导！</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>本文附带项目Github仓库地址，随手star是个好习惯：<br><a href="https://github.com/SergioChan/to]]>
    </summary>
    
      <category term="TCP" scheme="http://sergiochan.github.io/tags/TCP/"/>
    
      <category term="tornado" scheme="http://sergiochan.github.io/tags/tornado/"/>
    
      <category term="Python学习笔记" scheme="http://sergiochan.github.io/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
