<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Sergio Chan]]></title>
  <subtitle><![CDATA[Full Stack, Born hacker, Professional Manager]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sergiochan.github.io/"/>
  <updated>2018-08-02T04:21:08.670Z</updated>
  <id>http://sergiochan.github.io/</id>
  
  <author>
    <name><![CDATA[Sergio Chan]]></name>
    <email><![CDATA[cyh9211@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何创建自己的以太坊私有链（1）CentOS + Geth]]></title>
    <link href="http://sergiochan.github.io/2018/07/25/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE%EF%BC%881%EF%BC%89CentOS-Geth/"/>
    <id>http://sergiochan.github.io/2018/07/25/如何创建自己的以太坊私有链（1）CentOS-Geth/</id>
    <published>2018-07-25T13:47:19.000Z</published>
    <updated>2018-08-02T04:21:08.670Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这两天根据网上能搜到的所有的教程和文档，试着搭建了一个以太坊私有链 + iOS 钱包 / 应用的客户端，踩了一些坑，一来要找到这些坑的解决办法比较曲折，二来这类教程的同质化太强，我就着重记录一下这些坑的原因和解决办法吧，帮助看到的人可以吸取一些经验。</p>
<h3 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h3><p>Ethereum 客户端目前有几种语言的实现是开源的（这里只列出几个最主要的，其他的可以在 Ethereum 的<a href="https://github.com/ethereum/wiki/wiki/Clients,-tools,-dapp-browsers,-wallets-and-other-projects" target="_blank" rel="external">官方 wiki</a> 上找到）：</p>
<ul>
<li><a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="external">go-ethereum（GETH）</a>，这也是目前比较容易上手且普遍流行的实现，对应的工具和文档都比较齐全</li>
<li><a href="https://github.com/ethereum/pyethapp" target="_blank" rel="external">pyethapp</a>，基于 <a href="https://github.com/ethereum/pyethereum" target="_blank" rel="external">py-ethereum</a>，但是目前已经停止继续维护，基于 py-ethereum 有了新的 py-evm，并且推出了基于 <a href="https://github.com/ethereum/py-evm" target="_blank" rel="external">py-evm</a> 的新的客户端 Trinity</li>
<li><a href="https://github.com/paritytech/parity" target="_blank" rel="external">Parity</a>（Rust）</li>
<li><a href="https://github.com/ethereum/cpp-ethereum" target="_blank" rel="external">cpp-ethereum</a>（C++）</li>
</ul>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>各个平台的安装过程可以见以太坊官方的<a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="external">各平台安装指引</a>。以 CentOS 为例，安装过程其实并不复杂。</p>
<p>首先确保 cmake, gcc, wget 这些基本的组件都已经安装完毕。然后是安装 golang 环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install golang</span><br></pre></td></tr></table></figure>
<p>安装完 golang 环境后，可以 wget 下载 github 上最新版本的 release 包，查看地址<a href="https://github.com/ethereum/go-ethereum/releases" target="_blank" rel="external">在这</a>。例如我就是下载的最新的 1.8.12 的包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ethereum/go-ethereum/archive/v1.8.12.zip</span><br></pre></td></tr></table></figure>
<p>下载完之后解压，解压后进入目录下运行 make。成功后即编译完成。geth 的可执行文件在 build/bin 下。切换到这个目录就可以在命令行调用 geth 命令了。</p>
<h3 id="u521B_u4E16_u533A_u5757_u7684_u7B80_u5355_u914D_u7F6E_u4EE5_u53CA_u9700_u8981_u6CE8_u610F_u7684_u4E00_u4E2A_u5751"><a href="#u521B_u4E16_u533A_u5757_u7684_u7B80_u5355_u914D_u7F6E_u4EE5_u53CA_u9700_u8981_u6CE8_u610F_u7684_u4E00_u4E2A_u5751" class="headerlink" title="创世区块的简单配置以及需要注意的一个坑"></a>创世区块的简单配置以及需要注意的一个坑</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"config"</span>: &#123;</span><br><span class="line">    	<span class="attr">"chainId"</span>: <span class="number">10</span>,</span><br><span class="line">    	<span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    	<span class="attr">"eip150Block"</span>: <span class="number">0</span>,</span><br><span class="line">    	<span class="attr">"eip150Hash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    	<span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">    	<span class="attr">"eip158Block"</span>: <span class="number">0</span>,</span><br><span class="line">    	<span class="attr">"byzantiumBlock"</span>: <span class="number">0</span>,</span><br><span class="line">  	&#125;</span><br><span class="line">    <span class="string">"nonce"</span>: <span class="string">"0×0000000000000042"</span>,</span><br><span class="line">    <span class="attr">"mixhash"</span>: <span class="string">"0×0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"difficulty"</span>: <span class="string">"0×4000"</span>,</span><br><span class="line">    <span class="attr">"alloc"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"coinbase"</span>: <span class="string">"0×0000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"0×00"</span>,</span><br><span class="line">    <span class="attr">"parentHash"</span>: <span class="string">"0×0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"extraData"</span>: <span class="string">"GenesisBlock"</span>,</span><br><span class="line">    <span class="attr">"gasLimit"</span>: <span class="string">"0xffffffff"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在启动链之前首先要初始化创世区块，创世区块的几个基本参数的说明在网上比较好找，在这就不详细展开了。如果需要预先分配好几个账户及其对应的 balance，可以在 alloc 里面声明。</p>
<p>一个巨大的坑在于 <code>chainID</code> 的设置，如果设置为 0 则会在之后产生任何事务的时候报错 <code>invlid sender</code>，并且<strong>这里的 <code>chainID</code> 必须和命令行启动客户端的时候指定的 <code>networkID</code> 一致</strong>，这两者实际上是一个东西。如果不一致，也会导致后面再发送事务的时候验证失败。</p>
<p>为了在本地启动两个节点并相互连接，我们需要初始化两次创世节点到两份不同的数据目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./geth --datadir ~/chain2/ init init.json</span><br><span class="line">./geth --datadir ~/chain/ init init.json</span><br></pre></td></tr></table></figure>
<h3 id="Command_Line__u8FD0_u884C_u53C2_u6570_u89E3_u6790"><a href="#Command_Line__u8FD0_u884C_u53C2_u6570_u89E3_u6790" class="headerlink" title="Command Line 运行参数解析"></a>Command Line 运行参数解析</h3><p>官方的完整参数说明<a href="https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options" target="_blank" rel="external">在这</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./geth --port "30303" --rpc --rpccorsdomain "*" --datadir "~/chain" --rpcaddr "0.0.0.0" --rpcport "8545" --rpcapi "db,eth,net,web3,admin,personal,txpool" --networkid 10 --verbosity 3 --syncmode fast --gasprice 0 -gcmode archive console</span><br><span class="line">./geth --port "30304" --rpc --rpccorsdomain "*" --datadir "~/chain2" --rpcaddr "0.0.0.0" --rpcport "8546" --rpcapi "db,eth,net,web3,admin,personal,txpool" --networkid 10 --verbosity 3 --syncmode fast --gasprice 0 -gcmode archive console</span><br></pre></td></tr></table></figure>
<p>分别在不同的 terminal 窗口下运行这两条命令。注意最后的 console 参数可以不需要或用 <code>&gt;&gt;</code>将日志输出到文件 ，即不进入交互式的命令界面，然后在另外的命令行里通过 <code>geth attach xxx</code>回到交互式界面。</p>
<p><code>--rpc</code> 钱包和应用与链的交互都是通过 JSON RPC 来完成的，因此在这里需要明确 rpc 服务器的地址、端口以及开放调用的 api 命名空间。这里如果希望 rpc 服务器可以被外网访问的话，需要指定 ip 为 <code>0.0.0.0</code>，内网访问的话就指定内网 ip，本地访问的话实际上指定 <code>127.0.0.1</code>即可，这样可以避免被不知名的其他节点不停地尝试连接。rpc 的 api 可以参考<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC" target="_blank" rel="external">这里</a>，如果是开发网页或 native 的应用的话可以直接使用包装好的 web3 库来调用。</p>
<p><code>—networkid</code>这里需要和创世区块里定义的 chainID 一致。</p>
<p><code>—verbosity</code>这是日志输出的等级，3 是到 INFO，4 是到 DEBUG，一般情况 3 就足够了，DEBUG 模式下日志刷新的太快，命令行交互基本没法使用。</p>
<p><code>—syncmode</code>节点之间同步区块和事务的模式，在节点数少的情况下，尽量选择完整同步，避免因为不同步而产生冲突从而导致一些已经被认为发生的事务给丢弃了。但是这里最好选择 <code>fast</code>，在实际运行中，如果选择完整同步，对 CPU 的消耗非常大，因此如果配置不够的话，经常出现被系统杀死进程的情况，在这里最好选择默认的。</p>
<blockquote>
<p>P.S 中间我还另外尝试了一下 iOS 上的 Geth 库，如果你的节点希望能被 iOS 或 Android 上的客户端（不是钱包或应用，是客户端）连接，这里需要将同步模式去掉，加上 —lightserver xxx 的参数，因为目前实现在移动平台上的节点客户端都是 light 版本的，因此连接的链节点也需要相应的配置这个参数。</p>
</blockquote>
<p><code>—gcmode</code>这个参数设置的问题见<a href="https://ethereum.stackexchange.com/questions/39922/ethereum-private-chain-resets-back-to-block-0-when-restarted" target="_blank" rel="external">这里</a>，我也遇到了同样的问题，退出命令行重启客户端，有的时候就发现刚才发生的 transaction 都被回滚了，这是因为默认情况下最近的 128 个区块都是存在内存中的，命令行结束了这个进程，这部分内存也就丢了，因此需要改成 <code>archive</code>，会将所有的区块存下来，避免中止客户端进程影响区块的数据。</p>
<h3 id="Geth__u57FA_u672C_u4EA4_u4E92_u64CD_u4F5C"><a href="#Geth__u57FA_u672C_u4EA4_u4E92_u64CD_u4F5C" class="headerlink" title="Geth 基本交互操作"></a>Geth 基本交互操作</h3><p>首先每个节点都要有一个默认的 <code>coinbase</code> 账户，而刚启动的时候除非你在启动的时候导入一个账户的 private key，否则就可以在命令行里输入</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">personal.<span class="keyword">new</span><span class="type">Account</span>(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure>
<p>创建一个新的地址。挖矿挖到的 ETH 也会存入这个账户里。</p>
<h4 id="u67E5_u770B_u4F59_u989D"><a href="#u67E5_u770B_u4F59_u989D" class="headerlink" title="查看余额"></a>查看余额</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">eth</span><span class="selector-class">.getBalance</span>(<span class="string">'xxxx'</span>)</span><br></pre></td></tr></table></figure>
<p>是获取指定地址（包括合约）上的 ETH 数量，单位为 wei。</p>
<p>ETH 最小的单位是 wei，也是命令行默认的单位, 然后每 1000  进一个单位，依次是</p>
<ul>
<li>kwei (1000 wei)</li>
<li>mwei (1000 kwei)</li>
<li>gwei (1000 mwei)</li>
<li>szabo (1000 gwei)</li>
<li>finney (1000 szabo)</li>
<li>ether (1000 finney)</li>
</ul>
<p>在命令行里，可以输入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">web3</span><span class="selector-class">.fromWei</span>(<span class="selector-tag">eth</span><span class="selector-class">.getBalance</span>(<span class="selector-tag">eth</span><span class="selector-class">.coinbase</span>))</span><br></pre></td></tr></table></figure>
<p>来简便的查看当前矿工账户的 ether 余额。</p>
<h4 id="u5F00_u59CB_u6316_u77FF__26amp_3B__u505C_u6B62_u6316_u77FF"><a href="#u5F00_u59CB_u6316_u77FF__26amp_3B__u505C_u6B62_u6316_u77FF" class="headerlink" title="开始挖矿 &amp; 停止挖矿"></a>开始挖矿 &amp; 停止挖矿</h4><p>这个就比较简单了。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">miner.<span class="literal">start</span>()</span><br><span class="line">miner.<span class="literal">stop</span>()</span><br></pre></td></tr></table></figure>
<p>在挖矿的过程中，矿工不停地确认和打包新的区块，其他同步的节点上应该显示</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Importer new chain segment               <span class="attribute">blocks</span>=1 <span class="attribute">txs</span>=0 <span class="attribute">mgas</span>=0.000 <span class="attribute">elapsed</span>=17.040ms mgasp</span><br></pre></td></tr></table></figure>
<p>表示区块同步是正常进行的。</p>
<h4 id="u8FDE_u63A5_u5176_u4ED6_u7684_u8282_u70B9"><a href="#u8FDE_u63A5_u5176_u4ED6_u7684_u8282_u70B9" class="headerlink" title="连接其他的节点"></a>连接其他的节点</h4><p>在启动的时候输出的一些信息中能够找到 <code>enode</code> 信息，如果错过了也可以通过</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">admin<span class="selector-class">.nodeinfo</span><span class="selector-class">.enode</span></span><br></pre></td></tr></table></figure>
<p>拿到当前节点的连接地址，将其中的 <code>@[::]:30303</code>中间括号间的两个冒号改为你希望另一个节点访问到的 ip 地址，例如内网访问就填内网地址，外网访问就填公网 ip，然后在另一个节点的控制台里输入</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">admin.addPeer(<span class="string">"xxx@xx:xx:xx:xx:xxxx"</span>)</span><br><span class="line">admin<span class="selector-class">.peers</span> <span class="comment">// 查看是否连接成功</span></span><br></pre></td></tr></table></figure>
<p>即可使两个节点 P2P 连接。同时，如果一个节点是长期节点，即作为基础的节点在运转的话，在其他连接节点启动的时候，可以在命令行里设置 <code>—bootnodes</code> 来使新的节点启动的时候就去尝试连接这个已经在线的节点。</p>
<h4 id="u4EA4_u6613"><a href="#u4EA4_u6613" class="headerlink" title="交易"></a>交易</h4><p>挖矿产生了 ETH，就可以进行交易了。交易（调用智能合约也是）需要有至少一个矿工在挖矿，才能够完成，否则就没人处理了。在交易前，所有涉及产生事务，即 sendTransaction 的操作（调用智能合约也是），都需要 unlock 账户地址。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">personal.unlockAccount(eth<span class="selector-class">.coinbase</span>,<span class="string">"&#123;your password&#125;"</span>,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p>最后的 3000 单位为秒，即接下来的多少秒内保持账户可以提交事务的状态，可以自行调节。接下来就是具体的转账操作：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">eth</span><span class="selector-class">.sendTransaction</span>(&#123;<span class="attribute">from</span>:<span class="string">'xxx'</span>,to:<span class="string">'xxx'</span>,value:web3.<span class="built_in">toWei</span>(1)&#125;)</span><br></pre></td></tr></table></figure>
<p>这里的 value 单位仍然是 <code>wei</code>，因此输入的是 ether 为单位的话需要转换。操作成功后等待矿工确认和打包完成，就可以查看地址对应的余额了。</p>
<h4 id="u67E5_u770B_u4E8B_u52A1_u7684_u72B6_u6001"><a href="#u67E5_u770B_u4E8B_u52A1_u7684_u72B6_u6001" class="headerlink" title="查看事务的状态"></a>查看事务的状态</h4><p>由于矿工有些时候不是正好就能处理到刚提交的事务并打包，因此你也可以通过</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">txpool</span><span class="selector-class">.content</span></span><br></pre></td></tr></table></figure>
<p>来查看当前事务池子里处于等待状态的事务，可以确认你的调用是否成功。</p>
<h3 id="u5B9E_u73B0_u4E00_u4E2A_u9F99_u5934_u667A_u80FD_u5408_u7EA6"><a href="#u5B9E_u73B0_u4E00_u4E2A_u9F99_u5934_u667A_u80FD_u5408_u7EA6" class="headerlink" title="实现一个龙头智能合约"></a>实现一个龙头智能合约</h3><p>在 Ethereum 的测试网络上，都有龙头这样一个地址，你可以请求这个地址，他会发放一定量的测试 ETH 给开发者以供使用。并且用户用完后可以继续捐赠给它，例如 <code>Ropsten Network</code>。因此我也在这里很简单的实现一个龙头合约。</p>
<p>为了开发方便，目前已经有 Solidity 的 IDE 可以使用了，我使用的是 <a href="http://remix.ethereum.org/" target="_blank" rel="external">Remix</a>，只要在 environment 里设置为 <code>web3 provider</code> 并填上自己的 rpc 地址，就可以连上你刚刚新建的私有链进行测试了。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4.</span><span class="number">20</span>;</span><br><span class="line">contract faucet &#123;</span><br><span class="line">    uint <span class="keyword">public</span> totalEther;</span><br><span class="line">    address <span class="keyword">public</span> _owner;</span><br><span class="line">    </span><br><span class="line">   constructor () <span class="keyword">public</span> &#123;</span><br><span class="line">        totalEther = <span class="number">0</span>;</span><br><span class="line">        _owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span></span> donate() <span class="keyword">public</span> payable &#123;</span><br><span class="line">         totalEther += msg.<span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span></span> requestSomeEther(uint amount) <span class="keyword">public</span> &#123;</span><br><span class="line">         totalEther -= amount;</span><br><span class="line">         <span class="keyword">if</span> (totalEther &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  			totalEther = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			msg.sender.<span class="built_in">transfer</span>(amount);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>deploy 以上合约，拷贝地址并加载。通过大的挖矿节点调用合约的 <code>donate</code> 方法将 ether 转到合约的地址上，其他新的测试账户可以直接调用 <code>requestSomeEther</code>来获取指定数量的 ether，当然这个单位是 wei。</p>
<p>下面我会持续补充一些陆陆续续积累的经验。</p>
<h3 id="u7EED_0x0001_uFF1AGeth__u7684_u5185_u5B58_u6CC4_u6F0F"><a href="#u7EED_0x0001_uFF1AGeth__u7684_u5185_u5B58_u6CC4_u6F0F" class="headerlink" title="续 0x0001：Geth 的内存泄漏"></a>续 0x0001：Geth 的内存泄漏</h3><p>在初始几天的实际运行中，我遇到了一个非常严重的问题，以至于后悔入了这个坑。Geth 在长时间运行后，有的时候会自动报错 crash，有的时候则是直接在命令行显示 <code>已杀死</code>，这是典型的占用系统资源过多或 IO 时间太长被系统强制结束的情况。报的错非常非常长，但是追溯到源头就是 <code>out of memory</code>，观察服务器的监控内存曲线就能发现，每过一段时间，内存就会逐渐增加，直到占满 100%，在满负荷运行不久后，要么被系统强制结束，要么自己就 gg 了。于是开始了漫长的查找问题解决办法之路。然而我绝望的发现，无论是 SO 还是 Github 的 issue，都有大量的开发者提了相同的问题，在 Geth 最新的 1.8.12 release 版本中，这个内存泄漏的问题仍然没有找到根源。因此如果你也遇到了，不用大惊小怪的怀疑自己姿势不对，老老实实的上 supervisor 来保护这个进程即可。目前没有更好的解决办法，问题很早就已经被许多人发现了，到现在也没人能解决，实乃坑爹。</p>
<p>这里提供其中<a href="https://github.com/ethereum/go-ethereum/issues/16728" target="_blank" rel="external">一个问题的地址</a>，有很多相关的可以查。</p>
<p>令人惊奇的是，无论是其他人还是我的经历，在 supervisor 监控重启了几十回进程之后，Geth 对于内存的占用竟然稳定维持在了我设置的 2G 以内，目前为止连续运行了一周，没有发生一次崩溃。Hell knows，🤦‍♀️。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这两天根据网上能搜到的所有的教程和文档，试着搭建了一个以太坊私有链 + iOS 钱包 / 应用的客户端，踩了一些坑，一来要找到这些坑的解决办法比较曲折，二来这类教程的同质化太]]>
    </summary>
    
      <category term="Ethereum" scheme="http://sergiochan.github.io/tags/Ethereum/"/>
    
      <category term="Blockchain 踩坑日记" scheme="http://sergiochan.github.io/categories/Blockchain-%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[少年维特之烦恼-算法好吃么]]></title>
    <link href="http://sergiochan.github.io/2016/12/23/%E5%B0%91%E5%B9%B4%E7%BB%B4%E7%89%B9%E4%B9%8B%E7%83%A6%E6%81%BC-%E7%AE%97%E6%B3%95%E5%A5%BD%E5%90%83%E4%B9%88/"/>
    <id>http://sergiochan.github.io/2016/12/23/少年维特之烦恼-算法好吃么/</id>
    <published>2016-12-23T09:07:22.000Z</published>
    <updated>2016-12-23T09:09:08.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>————菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜分割线————</p>
<p>昨天在 HackerRank 上刷了四道题，其实前三道花了不到一个小时，最后一道真是炸裂我的菊花，10 个 Test Case 尽力优化后也才过了 8 个，不停的超时，如果在四十五分钟之内做出的解法估计我只能过两个 Test Case，手动微笑。真是菜的抠脚。这篇博客写的差不多的时候又继续去优化了一番才把所有的 Test Case 都过了……</p>
<p>下面记录一下这奇葩的几题，真是和 LeetCode 截然不同的风格。</p>
<p>————菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜分割线————</p>
<h3 id="Encircular"><a href="#Encircular" class="headerlink" title="Encircular"></a>Encircular</h3><p>原题：</p>
<p>————————————————————————————————————</p>
<p>Determine whether a sequence of commands will restrict the robot’s movements within a circle.</p>
<p>You are working on a computer simulation of a mobile robot. The robot moves on an infinite plane, starting from position <strong>(0, 0)</strong>. Its movements are described by a command string consisting of one or more of the following three letters:</p>
<ul>
<li>G instructs the robot to move forward one step</li>
<li>L instructs the robot to turn left.</li>
<li>R instructs the robot to turn right.</li>
</ul>
<p>The robot performs the instructions in a command and repeats them for an infinite time. You want to know whether or not there exists some circle whose radius is a positive real number such that the robot always moves within the circle and never leaves it.</p>
<p>Complete the <strong>doesCircleExist</strong> function in the editor below. It has one parameter: an array of strings, <strong>commands</strong>. The function must return an array of <strong>n</strong> strings where each element <strong>i</strong> denotes whether or not performing <strong>commands i</strong> on an infinite loop will restrict the robot’s movements to a circle. If the instruction restricts the robot’s movement to a circle, set index <strong>i</strong> to <strong>“YES”</strong>; otherwise, set it to <strong>“NO”</strong>.</p>
<p>————————————————————————————————————</p>
<p>大意就是有三种操作，前进（在当前向量上加上方向向量 <em> 距离 1），左转，右转（左右转都是在修改当前的方向向量），然后给你一个命令串，例如 <strong>GLGLGLGR</strong> ，这个命令串会无限循环重复，问最终会不会形成一个闭合的图形。没错，不用想的太复杂，就是问你最终会不会形成一个闭合的图形，因为每一段命令是一样的，而方向只有四种，所以也就是说，<em>*如果在四步操作结束的时候没有回到原点，它就再也回不来了，也不可能成为一个 限定范围 内运动的轨迹了</em></em>。</p>
<p>这一点非常重要 = = 不然画了半天轨迹找了半天规律也看不出个所以然，总是去想 <strong>可能发生</strong> 的 Corner case。然而就这么简单。至于方向向量，或者用不用向量来计算移动都可以由你决定，我顺便温习了一下向量旋转的矩阵乘法，手动微笑。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turnRight</span><span class="params">(directionVector)</span>:</span></span><br><span class="line">    x = directionVector[<span class="number">1</span>] * <span class="number">1</span></span><br><span class="line">    y = directionVector[<span class="number">0</span>] * - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turnLeft</span><span class="params">(directionVector)</span>:</span></span><br><span class="line">    x = directionVector[<span class="number">1</span>] * <span class="number">-1</span></span><br><span class="line">    y = directionVector[<span class="number">0</span>] * <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(commands)</span>:</span></span><br><span class="line">    r = list()</span><br><span class="line">    <span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">        direction_vector = (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        current_point = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> command:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> item:</span><br><span class="line">                    <span class="keyword">if</span> c == <span class="string">"G"</span>:</span><br><span class="line">                        current_point = (current_point[<span class="number">0</span>] + direction_vector[<span class="number">0</span>], current_point[<span class="number">1</span>] + direction_vector[<span class="number">1</span>],)</span><br><span class="line">                    <span class="keyword">elif</span> c == <span class="string">"R"</span>:</span><br><span class="line">                        direction_vector = turnRight(direction_vector)</span><br><span class="line">                    <span class="keyword">elif</span> c == <span class="string">"L"</span>:</span><br><span class="line">                        direction_vector = turnLeft(direction_vector)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_point[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">and</span> current_point[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">            r.append(<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r.append(<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
<h3 id="Elements_in_Tree"><a href="#Elements_in_Tree" class="headerlink" title="Elements in Tree"></a>Elements in Tree</h3><p>————————————————————————————————————</p>
<p>You are provided a binary search tree with integers.  Each node has three primary members: <strong>an Integer</strong> (which it holds), <strong>a pointer to its left child</strong>, and <strong>a pointer to its right child</strong>. A function stub is provided in multiple languages.  You need to complete so this function so that it will search for the presence of a specified integer in this tree. If the element (<em>val</em>) is found, return 1. Otherwise return 0. </p>
<p>Each function stub will have its prototype, and an explanation of the data types or classes involved. The section of the program which parses the input and displays the output is complete in each language and will not need to be modified. Your task is to complete the body of the function provided so it returns the correct output.</p>
<p>————————————————————————————————————</p>
<p>简单的树查找。代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPresent</span><span class="params">(root,val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root.value == val:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> isPresent(root.left,val):</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> isPresent(root.right,val):</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>
<h3 id="Spiral_Matrix"><a href="#Spiral_Matrix" class="headerlink" title="Spiral Matrix"></a>Spiral Matrix</h3><p>————————————————————————————————————</p>
<p>Example:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>should be printed as 1,2,3,6,9,8,7,4,5</p>
<p><strong>Input:</strong></p>
<p>You will read input from STDIN and print output to STDOUT.</p>
<p>The first line of input consists of 2 numbers, separated by a comma. The first number denotes the number of rows in the matrix, while the second number specifies the number of columns (the matrix doesn’t have to be square).</p>
<p>The remaining lines specify the actual values inside of the matrix. Each line represents a row, the values inside a separated by commas.</p>
<p><strong>Output:</strong></p>
<p>All values from the matrix in the spiral order (clockwise, starting from top left), separated by commas. </p>
<p>————————————————————————————————————</p>
<p>这也没什么好说的。简单的移动当前输出的 x,y 指针然后遍历二维数组即可，在指针转弯的时候维护一下当前的边界。代码：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="attr">k</span> = raw_input().split(<span class="string">","</span>)</span><br><span class="line"><span class="attr">row_num</span> = int(k[<span class="number">0</span>])</span><br><span class="line"><span class="attr">column_num</span> = int(k[<span class="number">1</span>])</span><br><span class="line"><span class="attr">g</span> = list()</span><br><span class="line"><span class="attr">output</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">for i <span class="keyword">in</span> range(<span class="number">0</span>,row_num):</span><br><span class="line">    <span class="attr">t</span> = raw_input().split(<span class="string">","</span>)</span><br><span class="line">    g.append(t)</span><br><span class="line"></span><br><span class="line"><span class="attr">left</span> = row_num * column_num</span><br><span class="line"><span class="attr">pointer_x</span> = <span class="attr">pointer_y</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">left_x</span> = <span class="attr">top_y</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">right_x</span> = column_num - <span class="number">1</span></span><br><span class="line"><span class="attr">bottom_y</span> = row_num - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">direction</span> = <span class="number">1</span></span><br><span class="line">while left &gt; <span class="number">0</span> :</span><br><span class="line">    <span class="keyword">if</span> <span class="attr">left</span> == <span class="number">1</span>:</span><br><span class="line">        output += str(g[pointer_y][pointer_x])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += str(g[pointer_y][pointer_x]) + <span class="string">","</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="attr">direction</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="attr">pointer_x</span> == right_x:</span><br><span class="line">            pointer_y += <span class="number">1</span></span><br><span class="line">            <span class="attr">direction</span> = <span class="number">2</span></span><br><span class="line">            <span class="attr">top_y</span> = pointer_y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pointer_x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    elif <span class="attr">direction</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="attr">pointer_y</span> == bottom_y:</span><br><span class="line">            pointer_x <span class="attr">-=</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">direction</span> = <span class="number">3</span></span><br><span class="line">            <span class="attr">right_x</span> = pointer_x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pointer_y += <span class="number">1</span></span><br><span class="line">    elif <span class="attr">direction</span> == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="attr">pointer_x</span> == left_x:</span><br><span class="line">            pointer_y <span class="attr">-=</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">direction</span> = <span class="number">4</span></span><br><span class="line">            <span class="attr">bottom_y</span> = pointer_y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pointer_x <span class="attr">-=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="attr">pointer_y</span> == top_y:</span><br><span class="line">            pointer_x += <span class="number">1</span></span><br><span class="line">            <span class="attr">direction</span> = <span class="number">1</span></span><br><span class="line">            <span class="attr">left_x</span> = pointer_x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pointer_y <span class="attr">-=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">left</span> = left - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print output</span><br></pre></td></tr></table></figure>
<h3 id="Lego_Block"><a href="#Lego_Block" class="headerlink" title="Lego Block"></a>Lego Block</h3><p>————————————————————————————————————</p>
<p>You have 4 types of Lego™ blocks, of sizes (1 x 1 x 1), (1 x 1 x 2), (1 x 1 x 3), and (1 x 1 x 4). Assume that you have an infinite number of blocks of each type. For brevity, we can call these types, respectively, the 1-block, 2-block, 3-block and 4-block, or even (1), (2), (3) and (4).</p>
<p>Using these blocks, you want to make a wall of height <strong>*N*</strong> and width <strong>*M*</strong>. The wall should be a solid continuous structure with no holes. The wall should be structurally connected, so no straight vertical should exist that would allow the wall to be separated in two without cutting one or more bricks.</p>
<p><strong>Input:</strong><br>The first line contains the number of test cases <strong>*T*</strong>. <strong>*T*</strong> test cases follow. Each case contains two integers, <strong>*N*</strong> and <strong>*M*</strong>.</p>
<p><strong>Output:</strong><br>Output <strong>*T*</strong> lines, one for each test case, containing the number of ways to build the wall.<br>As the numbers can be very large, output the result modulo 1,000,000,007.</p>
<p><strong>Constraints:</strong><br>1 ≤ T ≤ 100<br>1 ≤ N,M ≤ 1000</p>
<p><strong>Sample Input:</strong><br>4<br>2 2<br>3 2<br>2 3<br>4 4</p>
<p><strong>Sample Output:</strong><br>3<br>7<br>9<br>3375</p>
<p><strong>Explanation:</strong></p>
<ul>
<li><p>For the first case, the 3 ways are:two 2-blocks stacked one on top of another.one 2-block  stacked on top of two 1-blocks.two 1-blocks stacked on top of one 2-block.</p>
</li>
<li><p>For the second case,</p>
<ul>
<li>each row of the wall can contain either two blocks of width 1, or one block of width 2. However, the wall where all rows contain two blocks of width 1 is not a solid one as it can be divided vertically.</li>
<li>Thus, the number of ways is 2 × 2 × 2 - 1 = 7.</li>
</ul>
</li>
<li><p>For the third case,</p>
<ul>
<li>A 3-unit course of brick can be built four ways:<ul>
<li>Three singles (1,1,1)</li>
<li>One triple (3)</li>
<li>A double before a single (2,1)</li>
<li>A single before a double (1,2)</li>
</ul>
</li>
<li>Any of the four patterns above can go on top of the (3) or on bottom of the (3). Total: 8.</li>
<li>If we do not use a 3, then the only other stable pattern is (2,1) on top of (1,2). Cumulative total: 9.</li>
</ul>
</li>
<li><p>For the fourth case, we have</p>
<ul>
<li><p>8 ways of building each of the four layers of bricks:</p>
<ul>
<li>1,1,1,1</li>
<li>1,1,2</li>
<li>1,2,1</li>
<li>2,1,1</li>
<li>1,1</li>
<li>1,3</li>
<li>3,1 </li>
<li>4</li>
</ul>
<p>Total number of patterns: </p>
<p>8^4= 4,096</p>
</li>
<li><p>Of these <em>4,096</em> patterns, some will fail to satisfy the structural integrity condition. So we need to subtract the patterns that contain a vertical split. There are <em>3</em> vertical seams that provide possible locations for the vertical split, and <em>7</em> ways of placing any of 1, 2 or 3 splits among these 3 seams.There is exactly one way to have three splits, one on each of the three vertical seams (4 4-high towers of 1-block bricks) .  </p>
<p><strong>Cumulative: <em>4,096 - 1 = 4,095</em>.</strong></p>
</li>
<li><p>If we have two splits, along the left and middle seams, then there are two 1-block towers and one 4-high, 2-wide tower.Exactly one way to build two 4-high towers of 1-blocks15 ways to build the 4-high, 2-wide sub-wall:(1,1) or (2)repeated for at any of four layers,minus the separable pattern where the (1,1) layer repeats 4 times.<em>15 × 1 = 15 ways</em> to have two splits, one along the left seam an done along the middle seam.Similarly, two splits, left and right seams: <em>15 ways</em>And two splits, middle and right seams <em>15 ways</em></p>
<p><strong>Cumulative <em>4,095 - 15 - 15 - 15 = 4,050</em>.</strong></p>
</li>
<li><p>If we have exactly one split down the middle, this meansthere are two separate non-splitting 4-high, 2-wide walls.Each such wall can be built 24-1=15 ways (as above).The count of walls that can split once down the middle is thus <em>15 × 15 = 225.</em> </p>
<p><strong>Cumulative: <em>4,050 - 225 = 3,825.</em></strong></p>
</li>
<li><p>Exactly one split along the leftmost seam:There is one tower of 1-bricks on the left next to a 4-high, 3-wide wall.The ways of building the 4-high, 3-wide wall are: 44 = 256 <em>is the number of ways of repeating any of (1,1,1) or (3) or (2,1) or (1,2) four timesof these 256 patterns, some are separable, hence already accounted for before in the enumerationthe three 1-block towers: one patternone two-wide, four-high tower on the right next to a 1-block tower: 15 patterns (derivation above)ditto on the left: 15 patterns</em></p>
<p><strong>Total: 256* - 15 - 15 - 1 = 225</strong></p>
</li>
<li><p>Ditto for a split along the rightmost seam: 225 <em>ways</em></p>
<p><strong>Cumulative : <em>3,825 - 225 - 225 = 3,375</em>.</strong></p>
</li>
</ul>
</li>
</ul>
<p>————————————————————————————————————</p>
<p>说实话，题目我看了一个小时才从头看懂到尾（笑，其实题目里提供了很多信息，解题的时候忽略了，然后又回头读题，到最后找到解法了才彻底读透，这题和第一题好像都出现在谷歌的面试题中过，但是这题最大的问题不在于解法，在于时间复杂度和实际的运行时间上。</p>
<p>这道题简单来说可以理解为横着放的乐高积木，总共有四种块，分别长 1，2，3，4，用这些长度的积木来堆积一个 N <em> M 的墙，由于每一层的宽度一致，如果我们令 K 为每一层的所有组合可能性的数量，M 为其高度，即层数，那么<em>*整体排布的可能性就等于 K 的 M 次幂</em></em>，由于这里涉及到了 Bignum，这里还要在幂运算的同时做个模 1,000,000,007 的运算。</p>
<p>计算 K 的方法就是个简单的动态规划：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">K</span><span class="params">(N)</span></span> = K(N-<span class="number">1</span>) + K(N-<span class="number">2</span>) + K(N-<span class="number">3</span>) + K(N-<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="title">K</span><span class="params">(<span class="number">1</span>)</span></span> = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">K</span><span class="params">(<span class="number">2</span>)</span></span> = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="title">K</span><span class="params">(<span class="number">3</span>)</span></span> = <span class="number">4</span></span><br><span class="line"><span class="function"><span class="title">K</span><span class="params">(<span class="number">4</span>)</span></span> = <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>动态规划算出了每一层的可能性之后，还要继续考虑多层之间不能出现连续分割的情况。例如每一层的最右边都是 1 单位的块，就会出现一个连续的分割，这种情况就需要被排除。这里也是一层动态规划，即如果宽度为 N，那么宽度为 n ，高度为 M 的墙不会出现连续分割的可能情况（题中的 Solid Wall），就等于宽度为 n 高度为 M 的所有可能性组合，减去<strong>所有出现连续分割的情况数</strong>。</p>
<p>为了计算所有<strong>出现连续分割</strong>的情况数，我们需要将宽度为 n 的墙分成两部分，一部分是 Solid Wall，也就是没有出现分割的情况 S(n)，乘以剩下的部分所有的可能性 <em>这里的 S(n) 也就是自身，我们可以递归将其分割到最小的 S(1) = 1</em>。如果宽度为 4 ，则宽度为 4 出现连续分割的情况，分别有以下几种情况：</p>
<ul>
<li>左边一列全是 1，右边三列任意排布；</li>
<li>左边两列不出现连续分割（若出现连续分割，即包含了前面的那种情况），右边两列任意排列；</li>
<li>左边三列不出现连续分割（若出现连续分割，则包含了前面两种情况），右边一列全是 1。</li>
</ul>
<p>你可能会说，还有一种左边一列 1 右边一列 1 中间一列 2 的情况，但是其实他们包含在了第一种情况里，因为第一种情况里右边三列是任意排布的。其实这个规律，题目的一大堆叙述中确实给出了线索……就是需要读题了。所以我们可以得出公式：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">S<span class="comment">(N)</span> = K<span class="comment">(N)</span> ^ M - SUM<span class="comment">(i)</span><span class="comment">(S(i)</span> * <span class="comment">(K(N - i)</span> ^ M)) <span class="comment">(0 &lt; i &lt; N)</span></span><br></pre></td></tr></table></figure>
<p>现在，接下来最主要的事情出现了，按照以上逻辑写出的嵌套动态规划（ K(N) 需要动态规划来计算出来），时间复杂度在 <strong>缓存了 K (N)</strong> 之后是 O(N^2)， 然而由于每一次 K (N) 即使是从缓存中读取，也仍然需要做一次幂模运算，因为每一次解的时候 M 都是不同的，而它要求最多一次 input 100 个 N * M ，这就要求复杂度更加精简。在同一次解的过程中，S(i) 也是可以缓存的。</p>
<p>代码：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line">import <span class="built_in">array</span></span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.cache_count_fuck_dict = [None] * <span class="number">1000</span></span><br><span class="line">        self.cache_count = [<span class="number">0</span>] * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    def findSolutionCount(self,<span class="built_in">width</span>):</span><br><span class="line">        # <span class="built_in">print</span> <span class="built_in">width</span></span><br><span class="line">        g = <span class="built_in">width</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.cache_count[g] != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">return</span> self.cache_count[g]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">width</span> &gt; <span class="number">4</span>:</span><br><span class="line">            f = int(pow(self.findSolutionCount(g) + self.findSolutionCount(<span class="built_in">width</span> - <span class="number">2</span>) + self.findSolutionCount(<span class="built_in">width</span> - <span class="number">3</span>) + self.findSolutionCount(<span class="built_in">width</span> - <span class="number">4</span>),<span class="number">1</span>,<span class="number">1000000007</span>))</span><br><span class="line">            self.cache_count[g] = f</span><br><span class="line">            <span class="built_in">return</span> f</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> int(pow(<span class="number">2</span>,<span class="built_in">width</span> - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    def findTotalSolutionCountForWidth(self,<span class="built_in">width</span>,<span class="built_in">height</span>):</span><br><span class="line">        <span class="keyword">if</span> self.cache_count_fuck[<span class="built_in">width</span> - <span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">            # self.totalKTime += <span class="built_in">time</span>.<span class="built_in">time</span>() - now_f</span><br><span class="line">            <span class="built_in">return</span> self.cache_count_fuck[<span class="built_in">width</span> - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f = int(pow(self.findSolutionCount(<span class="built_in">width</span>),<span class="built_in">height</span>,<span class="number">1000000007</span>))</span><br><span class="line">            self.cache_count_fuck[<span class="built_in">width</span> - <span class="number">1</span>] = f</span><br><span class="line">            # self.totalKTime += <span class="built_in">time</span>.<span class="built_in">time</span>() - now_f</span><br><span class="line">            <span class="built_in">return</span> f</span><br><span class="line"></span><br><span class="line">    def findBlock(self,<span class="built_in">height</span>,<span class="built_in">width</span>):</span><br><span class="line"></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">        <span class="keyword">if</span> self.cache_count_fuck_dict[<span class="built_in">height</span>] <span class="built_in">is</span> <span class="keyword">not</span> None:</span><br><span class="line">            self.cache_count_fuck = self.cache_count_fuck_dict[<span class="built_in">height</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cache_count_fuck = [<span class="number">0</span>] * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        self.cache_count_block = [None] * <span class="built_in">width</span></span><br><span class="line">        g = [<span class="number">0</span>] * <span class="number">1000</span></span><br><span class="line">        self.cache_block = <span class="built_in">array</span>.<span class="built_in">array</span>('l', g)</span><br><span class="line"></span><br><span class="line">        d = self.<span class="built_in">block</span>(<span class="built_in">width</span>,<span class="built_in">height</span>)</span><br><span class="line">        self.cache_count_fuck_dict[<span class="built_in">height</span>] = self.cache_count_fuck</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> d</span><br><span class="line"></span><br><span class="line">    def <span class="built_in">block</span>(self,<span class="built_in">width</span>,<span class="built_in">height</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">width</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">width</span>,<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.cache_count_block[i] <span class="built_in">is</span> <span class="keyword">not</span> None:</span><br><span class="line">                b_count = self.cache_count_block[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                b_count = self.<span class="built_in">block</span>(i,<span class="built_in">height</span>)</span><br><span class="line">                self.cache_count_block[i] = b_count</span><br><span class="line">            <span class="keyword">if</span> self.cache_count_fuck[<span class="built_in">width</span> - i - <span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">                b_count *= self.cache_count_fuck[<span class="built_in">width</span> - i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                k = self.findTotalSolutionCountForWidth(<span class="built_in">width</span> - i,<span class="built_in">height</span>)</span><br><span class="line">                self.cache_count_fuck[<span class="built_in">width</span> - i - <span class="number">1</span>] = k</span><br><span class="line">                b_count *= k</span><br><span class="line"></span><br><span class="line">            count += b_count</span><br><span class="line">        r = int((self.findTotalSolutionCountForWidth(<span class="built_in">width</span>,<span class="built_in">height</span>)  - count) <span class="symbol">%</span> <span class="number">1000000007</span>)</span><br><span class="line">        <span class="built_in">return</span> r</span><br><span class="line">            </span><br><span class="line">t = Solution()</span><br><span class="line"></span><br><span class="line"># l = [(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">4</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">200</span>,<span class="number">800</span>),(<span class="number">300</span>,<span class="number">800</span>),(<span class="number">400</span>,<span class="number">800</span>),(<span class="number">500</span>,<span class="number">800</span>),(<span class="number">600</span>,<span class="number">800</span>),(<span class="number">700</span>,<span class="number">800</span>),(<span class="number">340</span>,<span class="number">800</span>),(<span class="number">750</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">800</span>),(<span class="number">4</span>,<span class="number">4</span>)]</span><br><span class="line">l = [(<span class="number">800</span>,<span class="number">800</span>)]</span><br><span class="line"></span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line">now_f = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,len(l),<span class="number">1</span>):</span><br><span class="line">    now = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">    <span class="built_in">print</span> t.findBlock(l[i][<span class="number">0</span>],l[i][<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"takes : "</span> + str(<span class="built_in">time</span>.<span class="built_in">time</span>() - now) + <span class="string">" s"</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"total takes : "</span> + str(<span class="built_in">time</span>.<span class="built_in">time</span>() - now_f) + <span class="string">" s"</span></span><br></pre></td></tr></table></figure>
<p>在求幂模操作的时候，由于 Math.pow 不支持 Bigint 运算，所以我一开始换了 **，后来查了一下发现用 pow(x,y,z) 是可以直接求幂模的，而且性能更好：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">pow(x, y[, z]) -&gt; <span class="built_in">number</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">With</span> two arguments, equivalent <span class="keyword">to</span> x**y.  <span class="keyword">With</span> three arguments,</span><br><span class="line">equivalent <span class="keyword">to</span> (x**y) % z, but may be more efficient (e.g. <span class="keyword">for</span> longs).</span><br></pre></td></tr></table></figure>
<p>将缓存从 Dict 换成 List 也有一定性能提升，这题总共有十个 Test Case，基本上前两个数值小和少的 case 过了就基本说明算法没什么问题了，一开始后面八个 Case 全部都超时，后来不断地优化，换成了 List 缓存，换成了 pow，堪堪过到第八个 Case，剩下两个仍然是超时。虽然昨天已经提交完了进不去了，然而写这些的时候还是不服气想优化一番，于是开始了逐行的时间调试，最后还是在 S (N) 这个函数这里再加了一层缓存优化，性能又差不多提升了三分之一。又注册了个新号，终于把十个 Test Case 全过了。</p>
<p><strong>将 Dict 缓存优化成 List 和 Array 缓存前</strong>：</p>
<p><img src="https://ooo.0o0.ooo/2016/12/23/585ce726b7a1e.jpeg" alt=""></p>
<p><strong>** 替换成 pow(x,y,z)</strong> ：</p>
<p><img src="https://ooo.0o0.ooo/2016/12/23/585ce726ba3c7.jpeg" alt=""></p>
<p>最终：</p>
<p><img src="https://ooo.0o0.ooo/2016/12/23/585ce726b9890.jpeg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>————菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜分割线————</p>
<p>昨天在 HackerRank 上刷了四道题，其实前三道花了不到一个小时，最后一道真是炸裂我的菊花]]>
    </summary>
    
      <category term="算法" scheme="http://sergiochan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[做 Custom Keyboard 的时候遇到的几个问题]]></title>
    <link href="http://sergiochan.github.io/2016/12/07/%E5%81%9A-Custom-Keyboard-%E7%9A%84%E6%97%B6%E5%80%99%E9%81%87%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://sergiochan.github.io/2016/12/07/做-Custom-Keyboard-的时候遇到的几个问题/</id>
    <published>2016-12-07T07:05:19.000Z</published>
    <updated>2016-12-07T07:07:39.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近又在搞个大新闻。记录了以下几个问题和窍门。</p>
<h2 id="Customize_your_keyboard_height"><a href="#Customize_your_keyboard_height" class="headerlink" title="Customize your keyboard height"></a>Customize your keyboard height</h2><p>在 <strong>ViewDidLoad</strong> 加入这段代码，在任意位置修改这个 constraint 的值然后调用 <strong>updateViewConstraint</strong> :</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> _expandedHeight = <span class="number">300</span>;</span><br><span class="line">_heightConstraint = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem: <span class="keyword">self</span>.view</span><br><span class="line">                             attribute: <span class="built_in">NSLayoutAttributeHeight</span></span><br><span class="line">                             relatedBy: <span class="built_in">NSLayoutRelationEqual</span></span><br><span class="line">                                toItem: <span class="literal">nil</span></span><br><span class="line">                             attribute: <span class="built_in">NSLayoutAttributeNotAnAttribute</span></span><br><span class="line">                            multiplier: <span class="number">0.0</span></span><br><span class="line">                              constant: _expandedHeight];</span><br><span class="line">[<span class="keyword">self</span>.view addConstraint: _heightConstraint];</span><br></pre></td></tr></table></figure>
<h2 id="Network_Access_and_other_accesses"><a href="#Network_Access_and_other_accesses" class="headerlink" title="Network Access and other accesses"></a>Network Access and other accesses</h2><p>一般情况下 Keyboard Extension 是没有访问网络的权限的，因为键盘是比较涉及用户隐私的插件，虽然其实真正能获得的信息很少的 =。= 都被沙盒保护起来了。但是毕竟能获得用户输入的文本信息，有可能你就是个坏人来收集用户输入的用户名密码什么的，对吧。所以需要在取得用户信任的基础上，让用户手动去设置里为键盘插件打开 <strong>完全访问</strong> ，你的插件才可以访问网络，位置信息这些。</p>
<p>在获得权限之前，任何对网络的访问都会报一大串错误，找不到 DNS，服务未启动什么的。你只需要在 <strong>info.plist</strong> 中设置 <strong>NSExtensionAttributes</strong> 中的 <strong>RequestsOpenAccess</strong> 为 YES， 用户就可以在设置页面中找到打开完全访问的开关了。</p>
<h2 id="OpenURL_in_Keyboard_Extension"><a href="#OpenURL_in_Keyboard_Extension" class="headerlink" title="OpenURL in Keyboard Extension"></a>OpenURL in Keyboard Extension</h2><p>由于 <strong>[UIApplication sharedApplication]</strong> 在 Extension 中不可用，openURL 只能通过 <strong>extensionContext</strong> :</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.extensionContext <span class="string">openURL:</span><span class="string">completionHandler:</span>];</span><br></pre></td></tr></table></figure>
<p>然而尴尬的是在 Today Extension 中是可以用的，在 Keyboard Extension 中却没有用。于是找到了下面这个更新的解决方案，直接通过 <strong>responder chain</strong> 找到 UIApplication = =</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">UIResponder* responder = self;</span><br><span class="line"><span class="keyword">while</span> ((responder = [responder nextResponder]) != nil) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([responder <span class="string">respondsToSelector:</span><span class="meta">@selector</span>(<span class="string">openURL:</span>)] == YES) &#123;</span><br><span class="line">        [responder <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">openURL:</span>)</span><br><span class="line"><span class="symbol">                        withObject:</span>[NSURL <span class="string">URLWithString:</span>@<span class="string">"sergio.chan.xxx://"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近又在搞个大新闻。记录了以下几个问题和窍门。</p>
<h2 id="Customize_your_keyboard_height"><a href="#Customize]]>
    </summary>
    
      <category term="Custom Keyboard Extension" scheme="http://sergiochan.github.io/tags/Custom-Keyboard-Extension/"/>
    
      <category term="iOS" scheme="http://sergiochan.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[坑 - 2016.11.30]]></title>
    <link href="http://sergiochan.github.io/2016/11/30/%E5%9D%91-2016-11-30/"/>
    <id>http://sergiochan.github.io/2016/11/30/坑-2016-11-30/</id>
    <published>2016-11-30T02:18:29.000Z</published>
    <updated>2016-11-30T02:19:22.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天发布会，忙了几个月的新产品终于要发布了。应该今晚<a href="https://www.raventech.com/" target="_blank" rel="external">官网</a>就会上线了。</p>
<p>最近几天都在 iOS 安卓和 Unity 切来切去的写，头大的和一锅粥一样。遇到了两个问题比较坑：</p>
<h2 id="Unity__u97F3_u7BB1_u566A_u97F3_u95EE_u9898"><a href="#Unity__u97F3_u7BB1_u566A_u97F3_u95EE_u9898" class="headerlink" title="Unity 音箱噪音问题"></a>Unity 音箱噪音问题</h2><p>只要 Unity 运行，Android 外接的音箱在默认场景就会有一丝丝奇怪电磁干扰的声音。Unity 当中没有任何 Audio Source，我试着把所有 Camera 上的 Audio Listener 都禁用了，还是不行。</p>
<p>在 Unity Forum 上发现了一个<a href="http://answers.unity3d.com/answers/1278290/view.html" target="_blank" rel="external">相同问题</a>，但是一年了并没有人解决。恩，如果你看到了一个回答那是我刚回答的……最后试了几种方法，主要都是去修改 Project Setting 里面的 Audio Setting，除了 <strong>Disable Unity Audio</strong> 可以解决这个奇怪的噪音问题，别无他法，还好 Unity 并不负责播放声音。</p>
<p>更蹊跷的是插上耳机就听不到这个噪音 = = 猜测可能是音箱有类似放大器的部分，将原本非常微弱的由 Unity 产生的声音放大了之后变成了听到的噪音。</p>
<p>坑。</p>
<h2 id="u5B89_u5353_u542F_u52A8_u84DD_u7259_u670D_u52A1_u7684_u95EE_u9898"><a href="#u5B89_u5353_u542F_u52A8_u84DD_u7259_u670D_u52A1_u7684_u95EE_u9898" class="headerlink" title="安卓启动蓝牙服务的问题"></a>安卓启动蓝牙服务的问题</h2><p>用安卓 BluetoothBLE 和 iOS 的 CoreBluetooth 连接，iOS 做外设，安卓做主机。BLE 取消了 2.0 时代的蓝牙 Socket 连接方式，改成了现在的<strong>根据特征值读取，写入和订阅</strong>的这种传输数据方式。用框架开发并不困难，问题就出在当应用在开机自启动的时候，可能在创建 BluetoothManager 的时候，系统蓝牙服务尚未初始化成功，因此就会报错，而你也不知道要什么时候才能去初始化。</p>
<p>因此在这里你需要加一个 BroadCastReceiver 来监听系统蓝牙服务状态变化的通知，然后根据通知来决定初始化的时机，而不是在你应用启动的时候就去初始化。</p>
<p>在应用或服务 create 的时候注册 Receiver :</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">IntentFilter filter1 = new IntentFilter(<span class="name">BluetoothAdapter</span>.ACTION_STATE_CHANGED)<span class="comment">;</span></span><br><span class="line">registerReceiver(<span class="name">mBroadcastReceiver</span>, filter1)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>声明 Receiver :</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BroadcastReceiver mBroadcastReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">            <span class="keyword">if</span> (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);</span><br><span class="line">                <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                    <span class="keyword">case</span> BluetoothAdapter.<span class="string">STATE_OFF:</span></span><br><span class="line">                        Log.d(<span class="string">"FUCK"</span>,<span class="string">"STATE_OFF"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> BluetoothAdapter.<span class="string">STATE_TURNING_OFF:</span></span><br><span class="line">                        Log.d(<span class="string">"FUCK"</span>,<span class="string">"STATE_TURNING_OFF"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> BluetoothAdapter.<span class="string">STATE_ON:</span></span><br><span class="line">                        Log.d(<span class="string">"FUCK"</span>,<span class="string">"STATE_ON"</span>);</span><br><span class="line">                        <span class="comment">// 如果蓝牙服务中途重启，这里需要关闭之前的 Manager 所附带的所有连接</span></span><br><span class="line">                        <span class="keyword">if</span> (bleManager != <span class="literal">null</span>) close();</span><br><span class="line">                        bleManager = BleManager.getInstance();</span><br><span class="line">                        bleManager.init(BleController.<span class="keyword">this</span>);</span><br><span class="line">                        close();</span><br><span class="line">                        scanAndConnect();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> BluetoothAdapter.<span class="string">STATE_TURNING_ON:</span></span><br><span class="line">                        Log.d(<span class="string">"FUCK"</span>,<span class="string">"STATE_TURNING_ON"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在你的应用或服务 Destroy 的时候注销这个 Receiver :</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">unregisterReceiver(<span class="name">mBroadcastReceiver</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>完事，不得不说 BLE 的连接还是很稳定的。</p>
<p>记得最早看安卓和 iOS 蓝牙连接的时候看到了知乎<a href="https://www.zhihu.com/question/23246210" target="_blank" rel="external">这篇回答</a>，看来整理一下代码也可以去好好回答一下了🌚 都没几个有用的回答。</p>
<p>坑。</p>
<h2 id="u95F2_u626F"><a href="#u95F2_u626F" class="headerlink" title="闲扯"></a>闲扯</h2><p>恩。周末终于强逼自己撸完了 <a href="http://sergiochan.xyz/Popularity/" target="_blank" rel="external">Popularity Widget for GitHub</a> ， 还在审核中，这是一个可以统计你过往五个月每天的新增 star 变化趋势，其实是可以细化到每一个 star 你的用户和对应的仓库的，后面版本慢慢会更新，也可以统计到（虽然没有有效历史数据）过往四周的 follower 变化趋势。对于想要运营或维护，或者只是了解一下自己在 GitHub 上的人气值的朋友们应该挺有用。</p>
<p>还有给 <a href="https://earthquick.github.io/" target="_blank" rel="external">EarthQuick</a> 在 GitHub 搭的后端 = = 因为拿 Mac mini 做服务端处理数据存到 GitHub 的仓库作为 RESTful API 访问竟然还被人喷了，不太明白现在 GitHub 早都去掉了连续提交成就之后还在关心小绿块的人的心态……最主要的是，我哪有时间和钱（妈个鸡别和我提钱）单独去搞个服务器维护啊 word 哥。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天发布会，忙了几个月的新产品终于要发布了。应该今晚<a href="https://www.raventech.com/" target="_blank" rel="ext]]>
    </summary>
    
      <category term="NONSENSE" scheme="http://sergiochan.github.io/tags/NONSENSE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to build a simple RESTful service using Github and your Mac mini]]></title>
    <link href="http://sergiochan.github.io/2016/11/20/How-to-build-a-simple-RESTful-service-using-Github-and-your-Mac-mini/"/>
    <id>http://sergiochan.github.io/2016/11/20/How-to-build-a-simple-RESTful-service-using-Github-and-your-Mac-mini/</id>
    <published>2016-11-20T04:00:57.000Z</published>
    <updated>2016-11-20T15:22:44.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Recent_Work"><a href="#Recent_Work" class="headerlink" title="Recent Work"></a>Recent Work</h2><p><a href="https://earthquick.github.io/" target="_blank" rel="external">EarthQuick</a> </p>
<p><img src="https://ooo.0o0.ooo/2016/11/19/582fcb8440a7f.png" alt=""></p>
<h2 id="Point_Of_Interests"><a href="#Point_Of_Interests" class="headerlink" title="Point Of Interests"></a>Point Of Interests</h2><p>I built this service through Github repo, having not used any cloud server, cloud database or even a single domain name. And I can assume that some day, some one may write a blog which telling us how to build a fully-functional backend service through Github .. :-) It may cost some time and work on both client and server side, maybe SDK or something, while simple write operation can be wrapped into simple Git operation, and use HTTPS to transmit operation to server or something ..</p>
<p>Ok, back to reality, what I gonna make is just a small and simple data fetching RESTful API: you can retrieve well formatted data from various different source with different format. Well, I run a script periodly on my <strong>useless</strong> Mac mini to execute the Python extractor and data processor every Five minutes in order to make sure the data update in time, then through <strong>git commit &amp; push</strong> operation upload the constructed data to Github. Yes, every piece of data you get from this API is pre-processed on my Mac mini, and what you get is kind of a image of the data. So this is it - render locally, access remotely. (If you are willing to do more work on client side, it’s possible)</p>
<h3 id="How_to_use_launchctl_run_your_script_periodly_on_macOS"><a href="#How_to_use_launchctl_run_your_script_periodly_on_macOS" class="headerlink" title="How to use launchctl run your script periodly on macOS"></a>How to use launchctl run your script periodly on macOS</h3><ul>
<li>Create your Shell script <strong>xx.sh</strong> in your work directory <strong>/Users/xxx</strong></li>
<li>Change permission of your script <strong>sudo chmod 777 xx.sh</strong></li>
<li>There are five destinations for you <code>launch.plist</code> file :</li>
</ul>
<p>​    <strong>~/Library/LaunchAgents</strong>  per-user agents provided by specific user</p>
<p>​    <strong>/Library/LaunchAgents</strong> per-user agents provided by the administrator </p>
<p>​    <strong>/Library/LaunchDeamons</strong> Deamons provided by the administrator</p>
<p>​    <strong>/System/Library/LaunchDeamons</strong> per-user agents provided by OSX</p>
<p>​    <strong>/System/Library/LaunchDeamons</strong> Deamons provided by OSX</p>
<p>In which <code>agents</code> means application or script will only be running when specific user has logged in. When <code>agents</code> is provided by superior users, it means no matter user A or user B has logged in, this script will always be executed by this superior users. On the contrary, <code>deamons</code> means scripts can also be executed even when system has not been logged in. Here, the provider means you have to set the permission of the  <code>plist</code> file in these directory to support <strong>only</strong> the specific user group can operate. For example, if you place your <code>plist</code> file in <strong>/Library/LaunchDeamons</strong>, you should </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo chmod <span class="number">600</span> sergio<span class="selector-class">.chan</span><span class="selector-class">.cron</span><span class="selector-class">.plist</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Detailed description of parameters in <code>launchd.plist</code> can be found <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html" target="_blank" rel="external">here</a></li>
<li>Finshed <code>plist</code> file according to the documents, for example :</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>sergio.chan.cron.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/xx/xx.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">integer</span>&gt;</span>300<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/../../Log.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/../../Error.err<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Using <code>launchctl</code> command to control the script</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">launchctl load   /Library/LaunchDeamons/sergio<span class="selector-class">.chan</span><span class="selector-class">.cron</span><span class="selector-class">.plist</span></span><br><span class="line">launchctl unload /Library/LaunchDeamons/sergio<span class="selector-class">.chan</span><span class="selector-class">.cron</span><span class="selector-class">.plist</span></span><br><span class="line">launchctl start  /Library/LaunchDeamons/sergio<span class="selector-class">.chan</span><span class="selector-class">.cron</span><span class="selector-class">.plist</span></span><br><span class="line">launchctl stop   /Library/LaunchDeamons/sergio<span class="selector-class">.chan</span><span class="selector-class">.cron</span><span class="selector-class">.plist</span></span><br><span class="line">launchctl list</span><br></pre></td></tr></table></figure>
<p>Notice that whenever you make any changes to the <code>plist</code> file, you should run <code>unload</code> first, then <code>load</code> again to make the changes effective. Rememer to enter <strong>full path</strong> of your <code>plist</code> file to guarantee the executed file is correct.</p>
<h2 id="EarthQuick_on_macOS"><a href="#EarthQuick_on_macOS" class="headerlink" title="EarthQuick on macOS"></a>EarthQuick on macOS</h2><p>Will come out sooooon.</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Recent_Work"><a href="#Recent_Work" class="headerlink" title="Recent Work"></a>Rec]]>
    </summary>
    
      <category term="NONSENSE" scheme="http://sergiochan.github.io/tags/NONSENSE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于 EarthQuick - My new side project]]></title>
    <link href="http://sergiochan.github.io/2016/11/11/%E5%85%B3%E4%BA%8E-EarthQuick-My-new-side-project/"/>
    <id>http://sergiochan.github.io/2016/11/11/关于-EarthQuick-My-new-side-project/</id>
    <published>2016-11-11T14:27:52.000Z</published>
    <updated>2016-11-11T14:28:24.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>关于启动一个新的 Side Project 的记录。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2016/11/11/5825d2917d68b.png" width="40%" style="text-align:center"></p>
<p>因为前几年特别关注地震的消息，特别是 2011 年的时候看了电影 《2012》 之后，对地震极其关注，正好那年又有专家说地球进入了什么地震活跃期，因此那时候时常关注一些地震监测中心的实时信息。</p>
<p>前段时间手机上装了成都高新减灾研究所的地震预警 App，虽然做的很烂，但是里面的信息至少是正确的，后来渐渐的也就不用了。今天忽然想起来，Mac 上还没有一个类似的地震预警软件，更可怕的是，国内<strong>竟然没有</strong>一个像样的地震信息源 API，看到微博和地震台网合作搞了一个什么开放平台，然而信息的验证和申请实在是太麻烦了，和美国地质勘探局 USGS 提供的一系列符合技术人员接入标准的 API 和数据比较起来，国内这方面的实在是对开发者不够友好。大概国内有下列比较官方（虽然这种数据也只有官方来源，因为需要很多监测基站）的数据来源：</p>
<ul>
<li><a href="http://data.earthquake.cn/index.jsp" target="_blank" rel="external">国家地震科学数据共享中心</a></li>
<li><a href="http://www.ceic.ac.cn/" target="_blank" rel="external">中国地震台网</a></li>
<li><a href="http://www.csi.ac.cn/publish/main/index.html" target="_blank" rel="external">中国地震信息网</a></li>
</ul>
<p>所以准备基于 USGS 的数据源和 RESTful API，整合一切能用的国内数据源，先做一套比较好用的，<strong>符合 RESTful 原则的地震信息实时速报的 API</strong>，开源出来。并且在这套 API 的基础上，先做一个 <strong>Mac 上的 App</strong>，就叫做 <strong>EarthQuick</strong>，意思是快速的将地震信息传递给所有关注的人。我想，对于生活在湾区，台湾或者日本这些地区的朋友们，多关注地震信息应该是生活中的一种常态了吧。</p>
<p>设计稿大概如下，就是一个简单的 Menu Bar 应用：</p>
<p><img src="https://ooo.0o0.ooo/2016/11/11/5825a308e9c20.png" alt=""></p>
<p>恩。准备这几天就开始撸。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>关于启动一个新的 Side Project 的记录。</p>
</blockquote>
<p><img src="https://ooo.0o0.]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to draw a Wireframe Shader for a Cube in Rajawali under OpenGL ES 2.0]]></title>
    <link href="http://sergiochan.github.io/2016/11/09/How-to-draw-a-Wireframe-Shader-for-a-Cube-in-Rajawali-under-OpenGL-ES-2-0/"/>
    <id>http://sergiochan.github.io/2016/11/09/How-to-draw-a-Wireframe-Shader-for-a-Cube-in-Rajawali-under-OpenGL-ES-2-0/</id>
    <published>2016-11-09T09:41:34.000Z</published>
    <updated>2016-11-09T09:52:18.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>PS. This will be my first blog totally written in english.</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2016/11/09/58227c9f45765.png" alt=""></p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><blockquote>
<p><strong>Environment:</strong> </p>
<p>GLSL ES Version 100</p>
<p>OpenGL ES Version 2.0</p>
<p>Android 6.0</p>
<p>Android OpenGL ES 2.0/3.0 Engine <a href="https://github.com/Rajawali/Rajawali" target="_blank" rel="external">Rajawali</a></p>
</blockquote>
<h2 id="First_Discuss"><a href="#First_Discuss" class="headerlink" title="First Discuss"></a>First Discuss</h2><p>There are several ways to draw a wireframe for a cube in Rajawali engine. We can use </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cube</span><span class="selector-class">.setDrawingMode</span>(<span class="selector-tag">GLES20</span><span class="selector-class">.GL_LINE_STRIP</span>);</span><br></pre></td></tr></table></figure>
<p>to tell the cube to draw in wireframe mode. But because a Cube, or we can say, every Polygons or 3D Objects in OpenGL are formed by lots of dots, lines and triangles, setting drawing mode will only show you such images like below : </p>
<p><img src="https://ooo.0o0.ooo/2016/11/09/5822d63584db6.png" alt=""></p>
<p>Also, when you set DrawingMode to GL_LINE_STRIP, your custom vertex or fragment shader won’t work as usual. So you will see a cube full of lines, doesn’t it look messy to you?</p>
<p>In order to draw wireframe using fragment shader, we can simply use following fragement shader :</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> vTextureCoord;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> vColor;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">        <span class="type">vec4</span> newColor = <span class="type">vec4</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        <span class="type">float</span> x = <span class="built_in">min</span>(vTextureCoord.s, <span class="number">1.0</span> - vTextureCoord.s);</span><br><span class="line">        <span class="type">float</span> y = <span class="built_in">min</span>(vTextureCoord.t, <span class="number">1.0</span> - vTextureCoord.t);</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> line_width = <span class="number">0.01</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x &lt; line_width) &#123;</span><br><span class="line">            newColor.g = <span class="number">1.0</span>;</span><br><span class="line">            newColor.r = <span class="number">1.0</span>;</span><br><span class="line">            newColor.b = <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &lt; line_width) &#123;</span><br><span class="line">            newColor.g = <span class="number">1.0</span>;</span><br><span class="line">            newColor.r = <span class="number">1.0</span>;</span><br><span class="line">            newColor.b = <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">gl_FragColor</span> = newColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, there is still a problem here. While using this shader, if you make your cube scale in whichever direction, this drawing ‘Line’ will always scale along with the cube. Obviously it’s because the 0.01 we set here is a relative value. But the <code>vTextureCoord</code> we can get here which was passed by our vertex shader is only a <code>vec2</code> vector represented a 2D coordinate on this mesh, which can only range from (0.0 , 0.0) to (1.0 , 1.0). This means <code>vTextureCoord</code> can only represent a relative coordinate, which doesn’t help us at all.</p>
<p>So, here we have to use the help from vertex shader. In vertex shader, we could get some <code>attribute</code> variables that are somehow useful. In OpenGL ES, we have three kinds of type specifiers: <strong>uniform</strong>, <strong>attribute</strong> and <strong>varying</strong>. Uniform variables are used for transmitting datas from CPU to GPU, the usage is as below :</p>
<ul>
<li>Uniform variables are binded in your shader class in CPU and GPU so you have to subclass the Shader Base Class and override some methods here. First declare an int handle for binding location  and the variables that hold your data along with the variable name in your shader (glsl) file.</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">String</span> uMyDataName = <span class="string">"uMyData"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> muMyDataHandle;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> MyData;</span><br></pre></td></tr></table></figure>
<ul>
<li>Remember to set the default value for your data when initializing.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyShader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyData = <span class="number">1.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Override setLocations method to get uniform variable location from programHandle.</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setLocations(<span class="keyword">final</span> <span class="keyword">int</span> programHandle)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">super</span>.setLocations(programHandle);</span><br><span class="line">	muMyDataHandle = getUniformLocation(programHandle, uMyDataName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Override applyParams method to apply every change of your uniform variable, also you can call <code>glUniform1f</code> method directly to pass the value into shader.</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">applyParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.applyParams();</span><br><span class="line">	GLES20.glUniform1f(muMyDataHandle, MyData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>In your shader (glsl) file, add your new variable and call this variable wherever you want.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">uniform <span class="keyword">float</span> uMyData;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// get uMyData here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>When you want to change the value of <code>uMyData</code> , just change  the value of <code>MyShader.MyData</code>.</li>
</ul>
<p>Attribute variables can only be used in vertex shaders. In Rajawali, you can call <code>addAttribute</code> to directly add custom attribute and use <code>GLES20.glVertexAttribPointer</code> to set value for the attribute variable handler. Here we have several attribute variables as below :</p>
<ul>
<li>aPosition</li>
<li>aTextureCoord</li>
<li>aNormal</li>
<li>aVertexColor</li>
</ul>
<p>Among them, <strong>aPosition</strong> is the most useful variable for us, it represents the vector from (0,0,0) for current vertex in model projection. <strong>aTextureCoord</strong> is the source of <strong>vTextureCoord</strong> in fragment shader. As you can see, <strong>vTextureCoord</strong> has a type specifier ‘<strong>varying</strong>‘, it’s used for transmitting variables from vertex shader to fragment shader. Here it’s involved with some concept of the <strong>pipline</strong> procedure for OpenGL, what we need to know is that we could declare <strong>‘varying float A’</strong> both in vertex shader and fragment shader at the same time, while write in vertex shader and read in fragment shader.</p>
<h3 id="Let_u2019s_begin_21"><a href="#Let_u2019s_begin_21" class="headerlink" title="Let’s begin!"></a>Let’s begin!</h3><p>So, here, in order to solve the scaling problem mentioned above, we declare three scale value for x, y and z :</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> uScaleZ;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> uScaleX;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> uScaleY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We should get current width from CPU</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> uWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pass everything above to fragment shader</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vScaleZ;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vScaleX;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vScaleY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vWidth;</span><br></pre></td></tr></table></figure>
<p>And make the vertex scale in vertex shader by changing its position :</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">vec3 <span class="attr">directionVec</span> = vec3(aPosition.x,aPosition.y,aPosition.z);</span><br><span class="line">vec4 <span class="attr">timeVec</span> = vec4(directionVec, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">// Scale each axis</span><br><span class="line">timeVec.<span class="attr">x</span> = directionVec.x * uScaleX;</span><br><span class="line">timeVec.<span class="attr">y</span> = directionVec.y * uScaleY;</span><br><span class="line">timeVec.<span class="attr">z</span> = directionVec.z * uScaleZ;</span><br><span class="line"></span><br><span class="line">vec4 <span class="attr">newPosition</span> = uMVPMatrix * timeVec;</span><br><span class="line"><span class="attr">gl_Position</span> = newPosition;</span><br><span class="line"><span class="attr">vTextureCoord</span> = aTextureCoord;</span><br></pre></td></tr></table></figure>
<p>In fact, because we are going to draw colors on mesh in fragment shader, we should pass all the variables about scaling and position from vertex shader to fragment shader. So we have to add a <code>vec3</code> :</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> vTimeVec;</span><br></pre></td></tr></table></figure>
<p>And in <code>main()</code> add :</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec3</span> tmpVec = <span class="type">vec3</span>(timeVec.x,timeVec.y,timeVec.z);</span><br><span class="line">vTimeVec = tmpVec;</span><br></pre></td></tr></table></figure>
<h3 id="Next_2C_what_should_we_do_in_fragment_shader_3F"><a href="#Next_2C_what_should_we_do_in_fragment_shader_3F" class="headerlink" title="Next, what should we do in fragment shader?"></a>Next, what should we do in fragment shader?</h3><p>First, declare everything we need to get from vertex shader :</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> vTextureCoord;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> vColor;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> vTimeVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vScaleZ;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vScaleX;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vScaleY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">float</span> vWidth;</span><br></pre></td></tr></table></figure>
<p>The most important step here is that when we set width for line, fragment shader should exactly split it into two parts which are drawn on different meshes. It’s easy to understand, 1/2 for left side and the other 1/2 for the right side.</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">const float <span class="attr">GT</span> = <span class="number">1.0</span>;</span><br><span class="line">const float <span class="attr">LT</span> = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    vec4 <span class="attr">newColor</span> = vec4(<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>);</span><br><span class="line">    float <span class="attr">lineWidth</span> = <span class="number">0.004</span>;</span><br><span class="line"></span><br><span class="line">    float <span class="attr">leftX</span> = - (vWidth * vScaleX / <span class="number">2.0</span>) + lineWidth;</span><br><span class="line">    float <span class="attr">rightX</span> = (vWidth * vScaleX / <span class="number">2.0</span>) - lineWidth / <span class="number">2.0</span>;</span><br><span class="line">    </span><br><span class="line">    float <span class="attr">bottomY</span> = - (vWidth * vScaleY / <span class="number">2.0</span>) + lineWidth;</span><br><span class="line">    float <span class="attr">topY</span> = (vWidth * vScaleY / <span class="number">2.0</span>) - lineWidth / <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    float <span class="attr">backZ</span> = - (vWidth * vScaleZ / <span class="number">2.0</span>) + lineWidth;</span><br><span class="line">    float <span class="attr">frontZ</span> = (vWidth * vScaleZ / <span class="number">2.0</span>) - lineWidth / <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    float <span class="attr">rX</span> = smoothstep(leftX,rightX,vTimeVec.x);</span><br><span class="line">    float <span class="attr">rZ</span> = smoothstep(backZ,frontZ,vTimeVec.z);</span><br><span class="line">    float <span class="attr">rY</span> = smoothstep(bottomY,topY,vTimeVec.y);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    (<span class="attr">rX</span> == GT &amp;&amp; <span class="attr">rY</span> == GT) ||</span><br><span class="line">    (<span class="attr">rX</span> == GT &amp;&amp; <span class="attr">rZ</span> == GT) ||</span><br><span class="line">    (<span class="attr">rY</span> == GT &amp;&amp; <span class="attr">rZ</span> == GT) ||</span><br><span class="line">    (<span class="attr">rX</span> == LT &amp;&amp; <span class="attr">rY</span> == LT) ||</span><br><span class="line">    (<span class="attr">rX</span> == LT &amp;&amp; <span class="attr">rZ</span> == LT) ||</span><br><span class="line">    (<span class="attr">rY</span> == LT &amp;&amp; <span class="attr">rZ</span> == LT) ||</span><br><span class="line">    (<span class="attr">rX</span> == GT &amp;&amp; <span class="attr">rY</span> == LT) ||</span><br><span class="line">    (<span class="attr">rX</span> == GT &amp;&amp; <span class="attr">rZ</span> == LT) ||</span><br><span class="line">    (<span class="attr">rY</span> == GT &amp;&amp; <span class="attr">rZ</span> == LT) ||</span><br><span class="line">    (<span class="attr">rX</span> == LT &amp;&amp; <span class="attr">rY</span> == GT) ||</span><br><span class="line">    (<span class="attr">rX</span> == LT &amp;&amp; <span class="attr">rZ</span> == GT) ||</span><br><span class="line">    (<span class="attr">rY</span> == LT &amp;&amp; <span class="attr">rZ</span> == GT))&#123;</span><br><span class="line">    	// Set your custom line color here</span><br><span class="line">         newColor.<span class="attr">g</span> = <span class="number">0.659</span>;</span><br><span class="line">         newColor.<span class="attr">r</span> = <span class="number">0.976</span>;</span><br><span class="line">         newColor.<span class="attr">b</span> = <span class="number">0.192</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">gl_FragColor</span> = newColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Some_more_tricks_with_scaling"><a href="#Some_more_tricks_with_scaling" class="headerlink" title="Some more tricks with scaling"></a>Some more tricks with scaling</h3><p><img src="https://ooo.0o0.ooo/2016/11/09/5822e8cb5bcc5.png" alt=""></p>
<p>As you can see from the image above, the 0 point for y and z axis of the model projection is in the middle of the cube. It’s hard to modify a cube’s anchor point here because there is no concept of anchor point here. But when we scale our cube, we may want it to scale based on one of its surfaces. How can we do that? I used method below to implement a demo for bottom-based and top-based scaling :</p>
<ul>
<li>In vertex shader, change the shader script here :</li>
</ul>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">// uScaleMode :</span><br><span class="line">// <span class="number">1</span>: top based</span><br><span class="line">// <span class="number">2</span>: bottom based</span><br><span class="line"></span><br><span class="line">timeVec.<span class="attr">x</span> = directionVec.x * uScaleX;</span><br><span class="line">timeVec.<span class="attr">y</span> = directionVec.y * uScaleY * <span class="number">2.0</span>;</span><br><span class="line">timeVec.<span class="attr">z</span> = directionVec.z * uScaleZ;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (<span class="attr">uScaleMode</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeVec.y &lt; <span class="number">0.0</span>) &#123;</span><br><span class="line">        timeVec.<span class="attr">y</span> = <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeVec.y &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">        timeVec.<span class="attr">y</span> = <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>In fragment shader :</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span> bottomY;</span><br><span class="line"><span class="attribute">float</span> topY;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (vScaleMode == <span class="number">1</span>.<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="attribute">bottomY</span> = lineWidth;</span><br><span class="line">    <span class="attribute">topY</span> = vWidth * vScaleY - lineWidth / <span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">&#125; <span class="section">else</span> &#123;</span><br><span class="line">    <span class="attribute">bottomY</span> =  - vWidth * vScaleY + lineWidth;</span><br><span class="line">    <span class="attribute">topY</span> = - lineWidth / <span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="How_to_rorate_using_MVPMatrix__3F"><a href="#How_to_rorate_using_MVPMatrix__3F" class="headerlink" title="How to rorate using MVPMatrix ?"></a>How to rorate using MVPMatrix ?</h3><p>Here is a discussion on <a href="http://stackoverflow.com/questions/15837177/using-matrix-rotate-in-opengl-es-2-0" target="_blank" rel="external">stackoverflow</a>.</p>
<p>In Rajawali, we can also use MVPMatrix to rotate the object. Although Rajawali provides us method like <code>material.setMVPMatrix(mvpMatrix);</code> to set MVPMatrix, I found it not working correctly. The matrix cannot be correctly passed into vertex shader. So I add another uniform variable here, named it <code>uCMVPMatrix</code>.</p>
<p>In our custom Renderer which is a subclass of <code>RajawaliRenderer</code>,  add these variables :</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Matrix4 mvpMatrix;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span>[] mvpMatrixValue = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] mModelMatrix = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span>[] mTempMatrix = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">16</span>];</span><br></pre></td></tr></table></figure>
<p>When you finished initialization of your cube, get the MVPMatrix from it directly using :</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cube</span> = new Cube(...)<span class="comment">;</span></span><br><span class="line"><span class="attribute">mvpMatrix</span> = cube.getModelViewProjectionMatrix()<span class="comment">;</span></span><br><span class="line"><span class="attribute">mvpMatrixValue</span> = mvpMatrix.getDoubleValues()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>Then, in <code>onRender</code>, doing Matrix calculation to rotate the cube :</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRender</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> elapsedTime, <span class="keyword">final</span> <span class="keyword">double</span> deltaTime)</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	Matrix.setIdentityM(mModelMatrix, <span class="number">0</span>); <span class="comment">// initialize to identity matrix</span></span><br><span class="line">    <span class="keyword">long</span> time = SystemClock.uptimeMillis() % <span class="number">4000</span>L;</span><br><span class="line">    <span class="keyword">float</span> mAngle = <span class="number">0.090</span>f * ((<span class="keyword">int</span>) time);</span><br><span class="line">    Matrix.setRotateM(mModelMatrix, <span class="number">0</span>, mAngle, <span class="number">0</span>, <span class="number">1.0</span>f, <span class="number">0.0</span>);</span><br><span class="line">    </span><br><span class="line">    mTempMatrix = mvpMatrixValue.clone();</span><br><span class="line">    Matrix.multiplyMM(mvpMatrixValue, <span class="number">0</span>, mTempMatrix, <span class="number">0</span>, mModelMatrix, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    mvpMatrix = mvpMatrix.setAll(mvpMatrixValue);</span><br><span class="line">    vertShader.CMVPMatrix = mvpMatrix.getFloatValues();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In our custom vertex shader, add a uniform handle for this <code>uCMVPMatrix</code> and send value to it :</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> muCMVPMatrixHandle;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span>[] CMVPMatrix;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setLocations(<span class="keyword">final</span> <span class="keyword">int</span> programHandle)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">super</span>.setLocations(programHandle);</span><br><span class="line">    ...</span><br><span class="line">    muCMVPMatrixHandle = getUniformLocation(programHandle, uCMVPMatrixName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">applyParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.applyParams();</span><br><span class="line">    ...</span><br><span class="line">    GLES20.glUniformMatrix4fv(muCMVPMatrixHandle, <span class="number">1</span>, <span class="keyword">false</span>, CMVPMatrix, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Thus, rotation using Matrix should be easy in Rajawali !</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>PS. This will be my first blog totally written in english.</p>
</blockquot]]>
    </summary>
    
      <category term="Android" scheme="http://sergiochan.github.io/tags/Android/"/>
    
      <category term="GLSL" scheme="http://sergiochan.github.io/tags/GLSL/"/>
    
      <category term="OpenGL ES" scheme="http://sergiochan.github.io/tags/OpenGL-ES/"/>
    
      <category term="Shader" scheme="http://sergiochan.github.io/tags/Shader/"/>
    
      <category term="Wireframe" scheme="http://sergiochan.github.io/tags/Wireframe/"/>
    
      <category term="安卓菜鸟心得" scheme="http://sergiochan.github.io/categories/%E5%AE%89%E5%8D%93%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Multi-Touch Bar UI 开发入门指南]]></title>
    <link href="http://sergiochan.github.io/2016/11/02/Multi-Touch-Bar-UI-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://sergiochan.github.io/2016/11/02/Multi-Touch-Bar-UI-开发入门指南/</id>
    <published>2016-11-02T11:03:05.000Z</published>
    <updated>2016-11-02T11:08:26.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="u5927_u81F4"><a href="#u5927_u81F4" class="headerlink" title="大致"></a>大致</h3><p>当你学会如何在你的 NSViewController 中用代码去初始化 Multi-Touch Bar 之后，我们就需要开始了解如何深入的开发 Touch Bar 上的 UI 了。根据 Apple 内部的一个说法就是 Multi-Touch Bar 实际上是运行了一个 watchOS 来管理它的视图和逻辑，所以与此同时我们也可以看到苹果官方为 Multi-Touch Bar 提供的一套 UI 控件，总共包含下面这些控件，第一个就是 Touch Bar。</p>
<p><img src="https://ooo.0o0.ooo/2016/11/01/58181fbf140db.jpg" alt=""></p>
<ul>
<li>Touch Bar Fixed Space</li>
<li>Touch Bar Flexible Space</li>
</ul>
<p>这两个是用于在 UI 上用来填充的空间，Touch Bar 默认的 UI 是从左到右，默认左右就是挨着的，如果你需要将两个按钮什么的分开一些，定义他们之间的间隔，你需要在他们中间塞 Space。</p>
<ul>
<li>Touch Bar Popover</li>
</ul>
<ul>
<li>Touch Bar Group</li>
</ul>
<p>/// BarItem 的集合，可以一起受到约束和用户的 Customization。</p>
<ul>
<li>Touch Bar Other Items Proxy</li>
</ul>
<p>/// 后面详细描述，这是和 Responder Chain 相关的一个控件，可以让响应链下层的 Touch Bar 和上层的 Touch Bar 一起显示。</p>
<ul>
<li>Touch Bar Scrubber</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/11/01/581837cc4601b.png" alt="https://ooo.0o0.ooo/2016/11/01/581837cc4601b.png"></p>
<p>/// 这是一个放进 NSCustomTouchBarItem 的 NSScrubber 对象。</p>
<ul>
<li>Touch Bar Color Picker</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/11/01/5818386c45463.png" alt=""></p>
<p>/// 一个 NSColorPickerTouchBarItem 对象。</p>
<ul>
<li>Touch Bar Character Picker</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/11/01/581838cf69274.png" alt=""></p>
<p>/// 一个  NSCandidateListTouchBarItem 对象。</p>
<ul>
<li>Touch Bar Sharing Service Picker</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/11/01/5818393054d89.png" alt=""></p>
<p>/// 一个 NSSharingServicePickerTouchBarItem 对象。</p>
<p>这里的 Scrubber，Color Picker 和 Character Picker 这些控件就会有些陌生了，虽然看过苹果发布会的同学们对他们应该也陌生不到哪里去。这几个控件在当时发布会都有展示。分别是滑动图片或文字选择器，颜色选择器，Emoji 表情选择器以及分享选择器，他们都有自己相应的 Delegate 来处理事件。</p>
<ul>
<li>Touch Bar Label</li>
<li>Touch Bar Button</li>
<li>Touch Bar Slider</li>
<li>Touch Bar Segmented Control</li>
<li>Touch Bar View</li>
</ul>
<p>最后的五项对于大家都比较好理解，都是一些 AppKit 中的控件在 Touch Bar 中的移植，对于事件的响应和 AppKit 做法相同。</p>
<blockquote>
<p>当你的 macOS 应用中包含了一些自带 Touch Bar 的控件的时候，例如 NSTextField，如果你没有自定义你的 Touch Bar，那么在 Touch Bar 上也会显示相应的控件。这是预设好的。</p>
</blockquote>
<h3 id="NSTouchBar"><a href="#NSTouchBar" class="headerlink" title="NSTouchBar"></a>NSTouchBar</h3><p>你可以将 NSTouchBar 看成是一个 NSTouchBarItem 的数组。在运行的时候，对于不同的 NSResponder 对应的 Touch Bar 和这些 Touch Bar 所对应的 BarItem，都是用 Identifier 来标识的，尽量使用 reverse-DNS 方式的 Identifier，例如 <code>com.company-name.app-name.alphanumeric-ID</code>。</p>
<blockquote>
<p>这里插一句，为了接下来的说明：由于现在并没有见到过新的 MBP 真机，尚不清楚 Touch Bar 提供给用户的 Customization 是什么样的机制，不过大概也就和 Finder 的自定义类似？按照官方文档来说，应该是用户在运行的时候可以选择显示或删除哪些 BarItem 或者修改 BarItem 的排列顺序，这大概也就是为什么 Touch Bar 的 UI 是始终向左靠齐的吧。</p>
</blockquote>
<p>NSTouchBar 自身有一个 Identifier： <strong>customizationIdentifier</strong>，这是在运行时允许用户自定义 UI 的标识，如果不设置，用户就无法通过系统来自定义 Touch Bar 的 UI。</p>
<p><strong>customizationAllowedItemIdentifiers</strong>，一个数组，在这里面存放的 Identifier 对应的 BarItem 是允许在运行时被用户修改样式的。</p>
<p><strong>customizationRequiredItemIdentifiers</strong>，这个数组里面存放的是不能被移除，一定会加载的 BarItem 对应的 Identifier。</p>
<p><strong>defaultItemIdentifiers</strong>，这是 Touch Bar 默认显示的全部 BarItem，这个参数是<strong>必须</strong>被初始化的。在这里面声明的 Identifier 随后就会在 <code>-itemForIdentifier:</code> 这个 Delegate 方法中初始化成 BarItem。给予 BarItem 的 Identifier 必须保持<strong>全局唯一</strong>，系统有另外四个预留的 Identifier：</p>
<ul>
<li>NSTouchBarItemIdentifierFixedSpaceSmall</li>
<li>NSTouchBarItemIdentifierFixedSpaceLarge</li>
<li>NSTouchBarItemIdentifierFlexibleSpace</li>
<li>NSTouchBarItemIdentifierOtherItemsProxy</li>
</ul>
<p>另外，NSTouchBar 还有一个只读的属性 <strong>itemIdentifiers</strong>，这个数组里包含的是运行时当前显示的 BarItem 对应的 Identifier，无论用户在运行的时候对 Touch Bar 做了何种的 Customization，你都可以通过这个属性获得当前的状态。</p>
<h4 id="u5982_u4F55_u8BA9_u4E00_u4E2A_BarItem__u5728_Touch_Bar__u4E0A_u5C45_u4E2D_u663E_u793A_uFF1F"><a href="#u5982_u4F55_u8BA9_u4E00_u4E2A_BarItem__u5728_Touch_Bar__u4E0A_u5C45_u4E2D_u663E_u793A_uFF1F" class="headerlink" title="如何让一个 BarItem 在 Touch Bar 上居中显示？"></a>如何让一个 BarItem 在 Touch Bar 上居中显示？</h4><p><strong>principalItemIdentifier</strong> 这个属性所对应的 BarItem 会在 Touch Bar <strong>居中</strong>，是所谓的最高优先级的 Item，如果有多层 Touch Bar 存在，也只会有最上层的 principalItem 显示出来。这里，官方文档中特别提到：</p>
<blockquote>
<p>Do not hard-code spacing in an attempt to ensure an item is centered. If you want a group of items to appear centered in the Touch Bar, designate the group NSTouchBarItem as the principal item.</p>
<p>不要尝试通过添加 Space 的方法来让一个 Item 居中，如果你需要让一组 Item 居中，你可以用一个 BarItem Group 将他们包起来然后将整个 Group 设置为居中。</p>
</blockquote>
<h4 id="NSTouchBarDelegate"><a href="#NSTouchBarDelegate" class="headerlink" title="NSTouchBarDelegate"></a>NSTouchBarDelegate</h4><p><strong>delegate</strong>，NSTouchBarDelegate 只有一个方法，那就是  </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSTouchBarItem</span> *)touchBar:(<span class="built_in">NSTouchBar</span> *)touchBar makeItemForIdentifier:(<span class="built_in">NSTouchBarItemIdentifier</span>)identifier;</span><br></pre></td></tr></table></figure>
<p>这个方法就是初始化所有 BarItem 的地方。一般来说写法就是根据 Identifier 来初始化对应的 BarItem，像这样</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ([identifier <span class="string">isEqualToString:</span>@<span class="string">"..."</span>])</span><br><span class="line">&#123; </span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> BarItem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Layout__26amp_3B_Nesting"><a href="#Layout__26amp_3B_Nesting" class="headerlink" title="Layout &amp; Nesting"></a>Layout &amp; Nesting</h3><p>由于用户可以自定义需要显示的 Touch Bar 宽度，你定义好的 Touch Bar 宽度是可变的。所以苹果的建议是<strong>在设计的时候不要按照确定的宽度来设计，而植入一些动态布局的方</strong>案。如果你需要更宽的宽度，你可以使用 Popover，scrubber 或者 scroll view。</p>
<p>在 Layout 的时候，响应链上层的 Touch Bar 是可以包含下层的 Touch Bar 的，上面在综述的时候提到过的 <strong>Other Items Proxy</strong> 就是用来实现这个功能的。只要你在初始化 Touch Bar 的时候为它的 defaultIdentifiers 加上 NSTouchBarItemIdentifierOtherItemsProxy，他就会在运行时<strong>需要的时候在这个 Identifier 所在的位置</strong>包含上来自下层的合适的 Touch Bar。这个<strong>需要的时候</strong>指的是下层的 NSResponder 调用 becomeFirstResponder 的时候。例如有一个 ViewController 自身带有一个 Touch Bar，而这个 ViewController 中带有一个 NSTextView，那么当点击这个 NSTextview ，也就是<strong>响应链下层 NSResponder 调用 becomeFirstResponder</strong> 的时候，Touch Bar 显示的是：</p>
<p><img src="https://ooo.0o0.ooo/2016/11/01/5818435fa4fdd.png" alt=""></p>
<p>而如果焦点从 TexView 失去，则恢复成 ViewController 这一层的 Touch Bar：</p>
<p><img src="https://ooo.0o0.ooo/2016/11/01/58184323610b8.png" alt=""></p>
<p>如果一个 Touch Bar 没有植入 NSTouchBarItemIdentifierOtherItemsProxy ，那么如果在响应链更底层出现了一个可以加载的 Touch Bar，那么上层的 Touch Bar 都会被隐藏。哦，并且 NSTouchBar 的 visible 属性是可以 KVO 的。</p>
<h4 id="Responder_Chain_Search"><a href="#Responder_Chain_Search" class="headerlink" title="Responder Chain Search"></a>Responder Chain Search</h4><p>所以 Touch Bar UI 的加载顺序和 UIView 的响应链类似，都是穿过整个响应链，从最底层开始向上寻找，如果遇到了 otherItemsProxy ， 则会将两者合并起来之后继续往上遍历，直到找到最上层，生成一个最后加载出来的 Touch Bar。</p>
<blockquote>
<p>Touch bars 的加载是通过查找指定的遵循了 NSTouchBarProvider Protocol 的组件来完成的。按照从响应链上层往下的顺序依次是：</p>
<ul>
<li>the application delegate</li>
<li>the application object itself</li>
<li>the main window’s window controller</li>
<li>the main window’s delegate</li>
<li>the main window itself</li>
<li>the main window’s first responder</li>
<li>the key window’s window controller</li>
<li>the key window’s delegate</li>
<li>the key window itself</li>
<li>the key window’s first responder</li>
</ul>
<p>如果上面这些对象是 NSResponder 或者 NSResponder 的子类，以该对象为起点的响应链也会被包括进来。例如 AppDelegate 原本是 NSObject，但是<a href="http://stackoverflow.com/questions/6893221/why-does-appdelegate-inherit-from-uiresponder" target="_blank" rel="external">在 iOS 上 AppDelegate 就是继承于 UIResponder</a> ，这是因为这样 AppDelegate 就可以成为整个响应链的最上层了。因此<strong>如果我们将 AppDelegate 改为继承于 NSResponder</strong> ，那么在 AppDelegate 层也可以加上一层 Touch Bar。 </p>
<p>例如在一个一般结构的应用中，这个响应链的查找顺序是这样的：</p>
<ul>
<li>Application delegate</li>
<li>Application</li>
<li>key window controller</li>
<li>key window delegate</li>
<li>key window</li>
<li>view controller (closest to root of window)</li>
<li>view (closest to root of window)</li>
<li>intermediate view controllers and views</li>
<li>key window’s first responder’s view controller</li>
<li>key window’s first responder</li>
</ul>
</blockquote>
<h4 id="Customization_Boundary"><a href="#Customization_Boundary" class="headerlink" title="Customization Boundary"></a>Customization Boundary</h4><p>那么对于最后显示的 Touch Bar 来说，每个 Touch Bar 的 Customization 属性依然管用。如果是 A Bar包含了 B Bar，那么对于 B Bar 的 Customization 是不能超出 B Bar 的范围的。例如有：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bar.defaultItemIdentifiers </span>=@[IdentifierA,IdentifierB, NSTouchBarItemIdentifierOtherItemsProxy,IdentifierC]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这个 Bar 假设为 A Bar，在他的下层有一个 B Bar，那么在 AB 同时显示的时候，如果对 B Bar 的 Item 进行 Customization，那么是不能移动 IdentifierA，IdentifierB 和 IdentifierC 的位置的。</p>
<h4 id="Visual_Priority"><a href="#Visual_Priority" class="headerlink" title="Visual Priority"></a>Visual Priority</h4><p><strong>视图优先级</strong>。由于你所开发的 Touch Bar 在运行的时候有可能被用户修改宽度，因此如果你有一排 BarItem，他们会从右往左依次被挤掉，这时候如果右边有一些重要的 BarItem 存在，你就需要为不同的 BarItem 设置不同的视图优先级，这样即使宽度变化，在重新 Layout 的时候也会按照定义好的视图优先级排列 BarItem。</p>
<p>系统提供了三种默认的枚举类型视图优先级，分别为 NSTouchBarItemPriorityHigh， NSTouchBarItemPriorityNormal 和 NSTouchBarItemPriorityLow，对应了 1000，0 和 -1000 的 float 类型的值，因此你也可以直接为 BarItem 设置 float 类型的优先级。</p>
<h3 id="u7528_Storyboard__u6765_u5B9A_u4E49_u4F60_u7684_Multi-Touch_Bar"><a href="#u7528_Storyboard__u6765_u5B9A_u4E49_u4F60_u7684_Multi-Touch_Bar" class="headerlink" title="用 Storyboard 来定义你的 Multi-Touch Bar"></a>用 Storyboard 来定义你的 Multi-Touch Bar</h3><p>讲了这么多，用代码生成 Touch Bar 多累啊，我们来看看如何用 Storyboard 来创建吧。</p>
<p><img src="https://ooo.0o0.ooo/2016/11/01/581844c5bc04f.jpg" alt=""></p>
<p>方法很简单，直接往你的 ViewController 里面从右下角拖一个 Touch Bar 过来就行了。然后往里面添加控件，对于不同的控件，Delegate，Datasource 和控件的触发事件，都是用 Control-Drag 的方法将引用加到你的 .m 文件里去。</p>
<h3 id="u5404_u79CD_u63A7_u4EF6_u7684_u5177_u4F53_u7528_u6CD5"><a href="#u5404_u79CD_u63A7_u4EF6_u7684_u5177_u4F53_u7528_u6CD5" class="headerlink" title="各种控件的具体用法"></a>各种控件的具体用法</h3><p>接下来该是一个个来讲控件了，也是大家在之后的开发中最实用的部分啦。</p>
<h4 id="NSColorPickerTouchBarItem"><a href="#NSColorPickerTouchBarItem" class="headerlink" title="NSColorPickerTouchBarItem"></a>NSColorPickerTouchBarItem</h4><p>colorPicker 有三种初始化方法：</p>
<ul>
<li>colorPickerWithIdentifier</li>
<li>textColorPickerWithIdentifier</li>
<li>strokeColorPickerWithIdentifier</li>
</ul>
<p>这三种方法的区别其实就是在按钮显示的图标上，一个是常规的颜色选择器，第二个代表的是字体颜色选择器，第三种初始化代表的是边框颜色选择器。初始化之后的逻辑都是一样的：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">colorPickerItem.<span class="keyword">target</span> = self;</span><br><span class="line">colorPickerItem.action = <span class="meta">@selector</span>(ColorAction:);</span><br></pre></td></tr></table></figure>
<p>然后在 <code>ColorAction</code> 这个方法中获得选择到的颜色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">((<span class="selector-tag">NSColorPickerTouchBarItem</span> *)<span class="selector-tag">sender</span>)<span class="selector-class">.color</span></span><br></pre></td></tr></table></figure>
<p><strong>@property colorList</strong></p>
<p>你也可以通过修改 <strong>colorList</strong> 这个属性来自定义 Color Picker 能够选取的颜色列表。如果不设置这个属性，则默认显示的是系统的取色盘，各种颜色都有：</p>
<p><img src="https://ooo.0o0.ooo/2016/11/02/5819676729847.png" alt=""></p>
<p>当给了一个 list 之后：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">colorPickerItem.colorList = [[<span class="symbol">NSColorList</span> alloc] init];</span><br><span class="line">[colorPickerItem.colorList setColor:[<span class="symbol">NSColor</span> redColor] forKey:@<span class="string">"Red"</span>];</span><br><span class="line">[colorPickerItem.colorList setColor:[<span class="symbol">NSColor</span> greenColor] forKey:@<span class="string">"Green"</span>];</span><br><span class="line">[colorPickerItem.colorList setColor:[<span class="symbol">NSColor</span> blueColor] forKey:@<span class="string">"Blue"</span>];</span><br></pre></td></tr></table></figure>
<p>显示的就是这样：</p>
<p><img src="https://ooo.0o0.ooo/2016/11/02/58196802031d6.png" alt=""></p>
<h4 id="NSSliderTouchBarItem"><a href="#NSSliderTouchBarItem" class="headerlink" title="NSSliderTouchBarItem"></a>NSSliderTouchBarItem</h4><p>初始化：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sliderTouchBarItem.slider.minValue = <span class="number">0</span>.<span class="number">0</span>f<span class="comment">;</span></span><br><span class="line">sliderTouchBarItem.slider.maxValue = <span class="number">100</span>.<span class="number">0</span>f<span class="comment">;</span></span><br><span class="line">sliderTouchBarItem.slider.continuous = YES<span class="comment">;</span></span><br><span class="line">sliderTouchBarItem.target = self<span class="comment">;</span></span><br><span class="line">sliderTouchBarItem.action = @selector(sliderChanged:)<span class="comment">;</span></span><br><span class="line">sliderTouchBarItem.label = @<span class="string">"Slider"</span><span class="comment">;</span></span><br><span class="line">sliderTouchBarItem.customizationLabel = @<span class="string">"Slider"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这里面的 action 会在 slider 的值每一次发生改变的时候调用。</p>
<p>值得一提的是 SliderItem 还提供了两个 AccessoryView 的自定义空间，左右各一个，分别叫做 <strong>minimumValueAccessory</strong> 和 <strong>maximumValueAccessory</strong>，可以用 NSImage 来初始化他们：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSSliderAccessory</span> *minSliderAccessory = [<span class="built_in">NSSliderAccessory</span> accessoryWithImage:image];</span><br></pre></td></tr></table></figure>
<p>其他的自定义都是围绕着 NSSlider 做的了。</p>
<h4 id="NSScrubber"><a href="#NSScrubber" class="headerlink" title="NSScrubber"></a>NSScrubber</h4><p>这是一个为了 Touch Bar 而全新创建的控件，在发布会上有着重的展示。他需要单独的添加到一个 TouchBarItem 里去：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">scrubber = [[<span class="built_in">NSScrubber</span> alloc] initWithFrame:<span class="built_in">NSMakeRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">310</span>, <span class="number">30</span>)];</span><br><span class="line"><span class="comment">// Height should be 30 </span></span><br><span class="line">scrubber.delegate = <span class="keyword">self</span>;   </span><br><span class="line">scrubber.dataSource = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>
<p>NSScrubber 类似 UICollectionView ，也是有基于 ItemView 的复用机制的，你可以继承 NSScrubberItemView 来写你自己需要的 CustomItemView。然后在初始化之后需要为 ItemView 加上一个复用的标识：</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">scrubber</span> registerClass:[<span class="name">NSScrubberItemView</span> class] forItemIdentifier:ScrubberItemIdentifier]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>@property showsAdditionalContentIndicators</strong> </p>
<p>代表的是当左右滑动还有更多内容的时候，在左右侧会显示一块渐变的蒙层，用来表示滑动还有更多内容，你可以选择是否显示。</p>
<p><strong>@property selectedIndex</strong> </p>
<p>即当前选中的 ItemView 的 index，可以直接设置。</p>
<p><strong>@property showsArrowButtons</strong> </p>
<p>代表的是是否显示左右移动的箭头按钮，如果显示的话你也可以点击左右箭头的按钮来滑动列表。</p>
<p><strong>@property backgroundColor</strong> </p>
<p>NSScrubber 的背景颜色，显示在内容之后，如果 <strong>backgroundView</strong> 为空才会显示，同时也是只有 NSScrubberTextItemView 类型的 ItemView 才会显示出后面的背景颜色。</p>
<p><strong>@property DataSource</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSInteger</span>)numberOfItemsForScrubber:(<span class="built_in">NSScrubber</span> *)scrubber</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSScrubberItemView</span> *)scrubber:(<span class="built_in">NSScrubber</span> *)scrubber viewForItemAtIndex:(<span class="built_in">NSInteger</span>)index</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSScrubberItemVie</span> *itemView = [scrubber makeItemWithIdentifier:ScrubberItemIdentifier owner:<span class="literal">nil</span>];</span><br><span class="line">	<span class="keyword">return</span> itemView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据源加载比较简单，一个给 Item 的总数，另一个给 ItemView 就行，上面给出了最简单的示例。</p>
<p><strong>@property Delegate</strong></p>
<p>NSScrubber 有好几个 Delegate 可以调用，也都比较好理解，一般来说实现第一个选中回调就足够了：</p>
<ul>
<li>didSelectItemAtIndex:(NSInteger)selectedIndex </li>
<li>didHighlightItemAtIndex:(NSInteger)highlightedIndex </li>
<li>didChangeVisibleRange:(NSRange)visibleRange</li>
<li>didBeginInteractingWithScrubber:(NSScrubber *)scrubber</li>
<li>didFinishInteractingWithScrubber:(NSScrubber *)scrubber</li>
<li>didCancelInteractingWithScrubber:(NSScrubber *)scrubber</li>
</ul>
<p><strong>@property mode</strong></p>
<p>这个代表的是 NSScrubber 的滑动模式，一共就两种，<strong>NSScrubberModeFree</strong> 和 <strong>NSScrubberModeFixed</strong>。</p>
<p>Free 模式下的 Scrubber 可以自由的滑动，但是你必须在<strong>滑动之后再次单击 Item</strong> 来选中，而 Fixed 模式下的 Scrubber 是不能自由滑动的，但是对于 ItemView 的选中是<strong>跟随手指的拖动</strong>的，不需要让手指离开 Touch Bar 再次点击选中。对于宽度固定，或者不需要用户再滑出范围的 Scrubber 可以使用 Fixed 模式。</p>
<p><strong>@property SelectionStyle</strong></p>
<p>Scrubber 给选中样式提供了很方便的自定义属性，有 <strong>selectionBackgroundStyle</strong> 和 <strong>selectionOverlayStyle</strong>，同时也可以通过设置 <strong>floatsSelectionViews</strong> 为 YES 让选中 View 切换的时候可以加上从 A 点到 B 点流畅的移动动画，而不是从 A 点消失然后从 B 点出现这样的动画。</p>
<p>selectionBackgroundStyle 和 selectionOverlayStyle 分别是选中的时候<strong>背景</strong>和<strong>表面蒙层</strong>的样式，只提供了 outlineOverlayStyle</p>
<p><img src="https://ooo.0o0.ooo/2016/11/02/5819b0f9959ad.png" alt=""></p>
<p>和 roundedBackgroundStyle 两种默认样式：</p>
<p><img src="https://ooo.0o0.ooo/2016/11/02/5819b17f754fb.png" alt=""></p>
<p>当然，这个 SelectionStyle 也是高度自定义的，但是你需要继承两个视图的基类来实现：</p>
<ol>
<li>定义一个继承于 NSScrubberSelectionStyle 的 CustomStyle </li>
<li>重载 <code>-(nullable __kindof NSScrubberSelectionView *)makeSelectionView</code> 这个方法</li>
<li>定义一个继承于 NSScrubberSelectionView 的 CustomSelectionView</li>
<li>自定义 CustomSelectionView 的样式</li>
<li>在重载的方法中返回 CustomSelectionView</li>
</ol>
<p><strong>@property scrubberLayout</strong></p>
<p>类似于 UICollectionView ，NSScrubber 的 layout 也是由 <strong>NSScrubberLayout</strong> 来控制的。系统提供了两种默认的 Layout，<strong>NSScrubberFlowLayout</strong> 和 <strong>NSScrubberProportionalLayout</strong>。前者可以通过 LayoutDelegate 来给出每一个 Item 所占的宽度，后者则不需要通过 delegate 而是直接将 Item 的宽度设置为 Scrubber 的可视区域按照 Item 的数量平分之后的宽度。你可以这样设置：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">NSScrubberLayout *scrubberLayout;</span><br><span class="line">scrubberLayout = <span class="comment">[<span class="comment">[NSScrubberFlowLayout alloc]</span> init]</span>;</span><br><span class="line">// or:</span><br><span class="line">scrubberLayout = <span class="comment">[<span class="comment">[NSScrubberProportionalLayout alloc]</span> init]</span>;</span><br><span class="line">scrubber.scrubberLayout = scrubberLayout;</span><br></pre></td></tr></table></figure>
<p>对于 NSScrubberFlowLayoutDelegate 你需要实现这一个方法：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSSize</span>)scrubber:(<span class="built_in">NSScrubber</span> *)scrubber layout:(<span class="built_in">NSScrubberFlowLayout</span> *)layout sizeForItemAtIndex:(<span class="built_in">NSInteger</span>)itemIndex</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSMakeSize</span>(width, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="NSSharingServicePickerTouchBarItem"><a href="#NSSharingServicePickerTouchBarItem" class="headerlink" title="NSSharingServicePickerTouchBarItem"></a>NSSharingServicePickerTouchBarItem</h4><p>NSSharingServicePickerTouchBarItem 的 delegate 只有一个委托方法需要实现：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (NSArray *)<span class="selector-tag">itemsForSharingServicePickerTouchBarItem</span><span class="selector-pseudo">:(NSSharingServicePickerTouchBarItem</span> *)<span class="selector-tag">pickerTouchBarItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">return</span> @<span class="selector-attr">[...]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里返回的对象一定要是能够支持 NSPasteboardWriting 协议或者是继承于 NSItemProvider 的对象，例如文本，图片或者 NSURL，可以参考 <a href="https://developer.apple.com/reference/foundation/nsitemprovider?language=objc" target="_blank" rel="external">NSItemProvider 的官方文档</a>。然后就会在分享的时候传到分享的应用里去。</p>
<h4 id="NSPopoverTouchBarItem"><a href="#NSPopoverTouchBarItem" class="headerlink" title="NSPopoverTouchBarItem"></a>NSPopoverTouchBarItem</h4><p>首先，我们来看如何自定义 Popover 在未点击状态下的显示 Button。</p>
<ul>
<li>collapsedRepresentation 如果不为空，则显示一个自定义的 NSView，如果为空，则加载不为空的下面两个属性</li>
<li>collapsedRepresentationImage 给 Popover 的 button 添加一个 NSImage</li>
<li>collapsedRepresentationLabel 给 Popover 的 button 添加一个 <strong>NSString</strong></li>
</ul>
<p>Popover 其实是在点击按钮之后弹出一个<strong>新的 Touch Bar</strong>，你需要再初始化一个新的 Touch Bar 并在同样的 Delegate 中返回对应的 BarItem，注意它和你之前的 Touch Bar 不是响应链上下层的关系，因此不会出现 Nesting 即上层的 Touch Bar 包含下层的 Touch Bar，而是完全覆盖了下面的 Touch Bar。如果你将新的 Touch Bar 赋值给了 <strong>pressAndHoldTouchBar</strong> 而不是 <strong>popoverTouchBar</strong>，你还可以实现按住按钮显示 Popover 且松开手指返回。</p>
<h4 id="Touch_Bar_Image_Template"><a href="#Touch_Bar_Image_Template" class="headerlink" title="Touch Bar Image Template"></a>Touch Bar Image Template</h4><p>最后还要为大家提供一个便利，苹果为了支持 Touch Bar 的开发，同时也为了统一设计样式，在 NSImage 中添加了非常多 Button 的模板图片，由于提供的模板太多了，不一一列出，就把列表附上，如果有同学开发的时候有需要可以去 NSImage 的头文件里面找，如果系统模板有的话可以直接使用。</p>
<p><img src="https://ooo.0o0.ooo/2016/11/02/5819c14c90072.png" alt=""></p>
<h3 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h3><p>Touch Bar 开发的新特性和坑肯定还有很多，现在新的 MBP 都还没发货，相信等更多的开发者开始真正开发上面的插件之后会有更丰富的经验和总结产生，我这篇博客也就是投石问路。然而，对 Touch Bar 十分感兴趣的我已经等不及开始研究它并且开始准备在上面做一些有意思的东西了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="u5927_u81F4"><a href="#u5927_u81F4" class="headerlink" title="大致"></a>大致</h3><p>当你]]>
    </summary>
    
      <category term="Cocoa" scheme="http://sergiochan.github.io/tags/Cocoa/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ADB 两三事-残]]></title>
    <link href="http://sergiochan.github.io/2016/10/24/ADB-%E4%B8%A4%E4%B8%89%E4%BA%8B-%E6%AE%8B/"/>
    <id>http://sergiochan.github.io/2016/10/24/ADB-两三事-残/</id>
    <published>2016-10-24T04:24:50.000Z</published>
    <updated>2016-10-24T14:29:43.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>折腾了两天 ADB， 宛若一个智障。遇到如下问题。</p>
<h2 id="u4ECE_u7535_u8111_push__u591A_u4E2A_u6587_u4EF6_u5230_u8BBE_u5907__3A_wildCard"><a href="#u4ECE_u7535_u8111_push__u591A_u4E2A_u6587_u4EF6_u5230_u8BBE_u5907__3A_wildCard" class="headerlink" title="从电脑 push 多个文件到设备 : wildCard"></a>从电脑 push 多个文件到设备 : wildCard</h2><p>参考<a href="http://xmodulo.com/how-to-copy-or-transfer-multiple-files-to-android-devices.html" target="_blank" rel="external">这篇</a>。</p>
<p>一开始用 *.* 的方式将文件夹下的所有文件 push 到设备的目录下，但是始终失败。查无果，只看到了上面这篇说不支持的，于是看了下自己的 ADB 版本号，1.0.32。确认这个版本是不支持 wildCard 匹配文件的。遂将 *.* 这种表示方式改成了 shell 中的 for 循环。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i in <span class="string">`ls /Users/sergiochan/xxx/`</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">echo <span class="string">"/Users/sergiochan/xxx/$i"</span></span><br><span class="line">adb <span class="keyword">push</span> <span class="string">"/Users/sergiochan/xxx/$i"</span> /<span class="keyword">system</span>/<span class="string">&#123;destination&#125;</span>/</span><br><span class="line">adb <span class="keyword">push</span> <span class="string">"/Users/sergiochan/xxx/$i"</span> /<span class="keyword">system</span>/<span class="string">&#123;destination&#125;</span>/<span class="string">&#123;subDestination&#125;</span>/</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>后来试了一下才发现升级到 1.0.36 是可以支持的。遂，卒。</p>
<h2 id="ADB_remount__u663E_u793A_succeeded__u5374_u5E76_u6CA1_u6709_u6210_u529F_u6302_u8F7D"><a href="#ADB_remount__u663E_u793A_succeeded__u5374_u5E76_u6CA1_u6709_u6210_u529F_u6302_u8F7D" class="headerlink" title="ADB remount 显示 succeeded 却并没有成功挂载"></a>ADB remount 显示 succeeded 却并没有成功挂载</h2><p>重启大法好哈哈哈哈哈哈。</p>
<h2 id="u60F3_u8981_u5728_Android_App__u4E2D_u8FD0_u884C_shell_uFF1F"><a href="#u60F3_u8981_u5728_Android_App__u4E2D_u8FD0_u884C_shell_uFF1F" class="headerlink" title="想要在 Android App 中运行 shell？"></a>想要在 Android App 中运行 shell？</h2><p>可以说很麻烦么 =3=</p>
<p>除非你是以 root 用户运行的 app，否则如果是普通用户的话，连 system 路径下的文件都没法修改，更别说 su 了。不过，如果想要修改 system 路径下的文件，可以在 manifest 中加上 <strong>android:sharedUserId=”android.uid.system”</strong> 让你的 app 以 system 用户运行，然后就可以直接通过 <strong>FileOutputStream</strong> 的方式修改 system 路径下的文件，例如控制 CPU 内存什么的。</p>
<p>想要运行 shell ，可以在 ADB 命令行通过 ps 命令查看你的 package 运行的用户是谁，例如用户 test，如果你 <code>su test</code> 之后再运行 <code>su</code> 显示的是 <strong>Permission Denied</strong>，那就没有办法了。如果 root 过后的设备给你的运行用户配了用户权限什么的，那记得在 Android 中执行 shell 之前，执行一下 <code>su</code> :</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">try</span> &#123;</span><br><span class="line">	<span class="built_in">Process</span> <span class="built_in">process</span> = Runtime.getRuntime().exec(<span class="string">"su"</span>);</span><br><span class="line">	<span class="built_in">process</span>.waitFor();</span><br><span class="line">&#125; <span class="built_in">catch</span> (IOException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>折腾了两天 ADB， 宛若一个智障。遇到如下问题。</p>
<h2 id="u4ECE_u7535_u8111_push__u591A_u4E2A_u6587_u4EF6_u]]>
    </summary>
    
      <category term="ADB" scheme="http://sergiochan.github.io/tags/ADB/"/>
    
      <category term="Android" scheme="http://sergiochan.github.io/tags/Android/"/>
    
      <category term="Android Debug Bridge" scheme="http://sergiochan.github.io/tags/Android-Debug-Bridge/"/>
    
      <category term="智障" scheme="http://sergiochan.github.io/tags/%E6%99%BA%E9%9A%9C/"/>
    
      <category term="残念" scheme="http://sergiochan.github.io/tags/%E6%AE%8B%E5%BF%B5/"/>
    
      <category term="安卓菜鸟心得" scheme="http://sergiochan.github.io/categories/%E5%AE%89%E5%8D%93%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WKWebView 中实现 Safari 原生的阅读模式]]></title>
    <link href="http://sergiochan.github.io/2016/10/21/%E5%A6%82%E4%BD%95%E5%9C%A8-WKWebView-%E4%B8%AD%E5%AE%9E%E7%8E%B0-Safari-%E5%8E%9F%E7%94%9F%E7%9A%84%E9%98%85%E8%AF%BB%E6%A8%A1%E5%BC%8F/"/>
    <id>http://sergiochan.github.io/2016/10/21/如何在-WKWebView-中实现-Safari-原生的阅读模式/</id>
    <published>2016-10-21T06:28:16.000Z</published>
    <updated>2016-10-21T07:08:23.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在浏览器中，阅读模式通常是一个很有用的功能，有人说这是读小说神器，有些人则认为阅读模式可以改善新闻网站的阅读体验，而有些广告商则对此抗议，认为阅读模式损害了广告主利益。当然，阅读模式对于普通用户来说是一种很方便实用的功能，这个无可厚非。</p>
<p>在手机上，阅读模式有两种实现方式，一种是和 Safari 的实现类似的，利用 js 去解析网页数据分析出文本，基本上手机浏览器的实现都和 Safari 类似，另外一种则是抓取网页对应的 RSS 源，解析 RSS 源中的数据格式，取出需要的文本来显示。接下来我要展开讲的就是和 Safari 类似的阅读模式的实现，且是基于 WKWebView 来实现的。</p>
<p>详细的项目代码在这： <a href="https://github.com/PerfectFreeze/PFWebViewController" target="_blank" rel="external">PFWebViewController</a></p>
<h3 id="u4E86_u89E3_Safari__u9605_u8BFB_u6A21_u5F0F_u7684_u5B9E_u73B0"><a href="#u4E86_u89E3_Safari__u9605_u8BFB_u6A21_u5F0F_u7684_u5B9E_u73B0" class="headerlink" title="了解 Safari 阅读模式的实现"></a>了解 Safari 阅读模式的实现</h3><p>关于实现，你可以先参考下面这两篇博客：</p>
<ul>
<li><a href="http://blog.csdn.net/horkychen/article/details/50959785" target="_blank" rel="external">iOS Safari阅读模式分析过程</a> </li>
<li><a href="http://blog.csdn.net/horkychen/article/details/50959771" target="_blank" rel="external">iOS Safari阅读模式研究</a></li>
</ul>
<blockquote>
<p>一定要写这篇博客的原因就是，我能查到与此相关的中文博客有且仅有这两篇，我接下来讲的会更通俗易懂一些，毕竟最后模仿系统实现出来了。上面两篇的作者最后的结论和代码并不能正常运行，但是提供的信息和资源多多少少给了我很多参考。</p>
<p>其中，第二篇中提到的 JavaScriptCore，由于 WKWebView <a href="http://stackoverflow.com/questions/25792131/how-to-get-jscontext-from-wkwebview" target="_blank" rel="external">不再支持</a>，我们会用到 WebKit 支持的发送消息的传递信息模式。核心要用到的 JavaScript 文件在这两篇博客中也有给出。</p>
</blockquote>
<p>首先，我们需要用两个 WKWebView 来实现整个流程，一个是主要的浏览窗口 ( 暂且命名为 ) <strong>MainWebView</strong>，另一个则是用于阅读模式页面显示的 <strong>ReaderWebView</strong> 。参与整个阅读模式渲染流程的文件大致有这些：</p>
<ul>
<li>index.html</li>
<li>safari-reader.js # 这个 js 负责的是内容的格式化和渲染，挂载在 <strong>ReaderWebView</strong> 上</li>
<li>safari-reader-check.js # 这个 js 负责的是内容的判断和提取，挂载在 <strong>MainWebView</strong>  上，（在最新的 Safari 中我一直没有截到这个脚本，从最后实现的效果来看，苹果可能将这部分放进原生实现了，所以这里我们就只能使用这个比较早期版本的 js 实现的内容判断，会出现一些网页最新版 Safari 会出现阅读模式的按钮而你使用它却判断无法进入阅读模式）</li>
<li>ReaderContext.h # 这就是原生实现的 C++ 代码头文件，应该是作为上面两个 js 之间的原生 Bridge，用指针插入的方法用 C++ 向 js 中插入可以直接调用的原生类和方法</li>
</ul>
<p>Safari 的基本流程就是，当 <strong>MainWebView</strong> 上的网页的 HTML 加载完成后，执行 safari-reader-check (当然后来可能执行原生代码去判断了，或者使用了更新的 js 文件) 中的 FinderJS 的函数来判断当前网页是否存在合适的 Node 来作为 Article，判断的规则大致就是根据 H 标签的个数，文本的长度之类的参数计算出权重，最后获得一个权重最高的 Node 作为 Article 对象。如果存在这个对象，则会告知浏览器显示阅读模式的按钮，反之浏览器则不会显示这个按钮。</p>
<p>当用户点击了这个按钮之后，Article 对象会被提取出来，通过 ReaderContext 传递给 safari-reader.js 处理，然后<strong>加载到 ReaderWebView 里面</strong>。在 <strong>ReaderWebView</strong> 中渲染的 HTML 是一个模板文件，阅读模式中用到的所有 CSS 样式都会在这个 HTML 里面预先定义好，我们可以通过 Safari 的控制台取到这个 HTML 文件：</p>
<p><img src="https://ooo.0o0.ooo/2016/10/13/57ff3ba696edb.png" alt=""></p>
<p>在 macOS 的 Safari 中就可以取到，Safari 中在任意有阅读模式选项的页面下点击这个按钮，然后进入页面的检查模式，你会看到 HTML 代码如下：</p>
<p><img src="https://ooo.0o0.ooo/2016/10/13/57ff3c766c7a9.png" alt=""></p>
<p>当 body 加载的时候，它会调用 <code>ReaderJS.loaded()</code> 方法，这个方法负责处理 ReaderContext 传递过来的 Article 对象并将生成的 <code>&lt;div class=&quot;page&quot;&gt;</code> 这个标签添加到 id 为 article 的标签下面。 用到的两个 js 文件都是匿名脚本，其中主要的 safari_reader.js 脚本可以通过点击空白区域添加断点来截获的（因为他实现了一个监听鼠标点击的事件）。</p>
<h3 id="u6211_u7684_u5B9E_u73B0"><a href="#u6211_u7684_u5B9E_u73B0" class="headerlink" title="我的实现"></a>我的实现</h3><p>首先，初始化两个 webView，并在 <strong>MainWebView</strong> 上加载原网页，记得：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">_webView.navigationDelegate = self<span class="comment">;</span></span><br><span class="line">_readerWebView.navigationDelegate = self<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>初始化的时候，我们需要为两个 <strong>MainWebView</strong> 挂载 safari-reader-check.js 的脚本，需要为 <strong>ReaderWebView</strong>  同时挂载 safari-reader-check.js 和 safari-reader.js 这两个脚本，初始化的时候赋给两个 webview 的 <code>WKWebViewConfiguration</code> 按照如下来定义：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">WKWebViewConfiguration</span> *)configuration &#123;</span><br><span class="line">    <span class="comment">// Load reader mode js script</span></span><br><span class="line">    <span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleForClass:[<span class="keyword">self</span> <span class="keyword">class</span>]];</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [bundle URLForResource:<span class="string">@"PFWebViewController"</span> withExtension:<span class="string">@"bundle"</span>];</span><br><span class="line">    <span class="built_in">NSBundle</span> *scriptBundle = [<span class="built_in">NSBundle</span> bundleWithURL:url];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *readerScriptFilePath = [scriptBundle pathForResource:<span class="string">@"safari-reader"</span> ofType:<span class="string">@"js"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *readerCheckScriptFilePath = [scriptBundle pathForResource:<span class="string">@"safari-reader-check"</span> ofType:<span class="string">@"js"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *indexPageFilePath = [scriptBundle pathForResource:<span class="string">@"index"</span> ofType:<span class="string">@"html"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Load HTML for reader mode</span></span><br><span class="line">    readerHTMLString = [[<span class="built_in">NSString</span> alloc] initWithContentsOfFile:indexPageFilePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *script = [[<span class="built_in">NSString</span> alloc] initWithContentsOfFile:readerScriptFilePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">WKUserScript</span> *userScript = [[<span class="built_in">WKUserScript</span> alloc] initWithSource:script injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentEnd</span> forMainFrameOnly:<span class="literal">NO</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *check_script = [[<span class="built_in">NSString</span> alloc] initWithContentsOfFile:readerCheckScriptFilePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">WKUserScript</span> *check_userScript = [[<span class="built_in">WKUserScript</span> alloc] initWithSource:check_script injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentEnd</span> forMainFrameOnly:<span class="literal">NO</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line">    [userContentController addUserScript:userScript];</span><br><span class="line">    [userContentController addUserScript:check_userScript];</span><br><span class="line">    [userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"JSController"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">    configuration.userContentController = userContentController;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以在 <code>decidePolicyForNavigationResponse</code> 这个回调中进行阅读模式的判断，这个回调发生的时机是在获得 HTML 响应但尚未根据 HTML 去加载的时候，所以是判断阅读模式的最佳时机：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationResponse:(<span class="built_in">WKNavigationResponse</span> *)navigationResponse decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationResponsePolicy</span>))decisionHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> ([webView isEqual:<span class="keyword">self</span>.readerWebView]) &#123;</span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationResponsePolicyAllow</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Set reader mode button status when navigation finished</span></span><br><span class="line">    [_webView evaluateJavaScript:<span class="string">@"var ReaderArticleFinderJS = new ReaderArticleFinder(document);"</span> completionHandler:^(<span class="keyword">id</span> _Nullable object, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [_webView evaluateJavaScript:<span class="string">@"ReaderArticleFinderJS.isReaderModeAvailable();"</span> completionHandler:^(<span class="keyword">id</span> _Nullable object, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([object integerValue] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.toolbar.readerModeBtn.enabled = <span class="literal">YES</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.toolbar.readerModeBtn.enabled = <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    decisionHandler(<span class="built_in">WKNavigationResponsePolicyAllow</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2016/10/21/5809b436031ce.jpeg" width="40%"></p>
<p>接下来就是点击阅读模式按钮的响应事件，这里我们可以不用 C++ 搭桥梁的方式传递对象指针，而直接用了一种更 tricky 的办法，将提取出来的 Article 对象以不可见的形式添加到目标的 <strong>ReaderWebView</strong> 中，然后修改获取到的 js 文件，让 safari-reader.js 在渲染完正文内容后将临时的这个不可见的节点删除。</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">_webView</span> evaluateJavaScript:@<span class="string">"var ReaderArticleFinderJS = new ReaderArticleFinder(document);"</span> completionHandler:^(<span class="name">id</span> _Nullable object, NSError * _Nullable error) &#123;</span><br><span class="line">        &#125;]<span class="comment">;</span></span><br><span class="line">[<span class="name">_webView</span> evaluateJavaScript:@<span class="string">"var article = ReaderArticleFinderJS.findArticle();"</span> completionHandler:^(<span class="name">id</span> _Nullable object, NSError * _Nullable error) &#123;</span><br><span class="line">        &#125;]<span class="comment">;</span></span><br><span class="line">[<span class="name">_webView</span> evaluateJavaScript:@<span class="string">"article.element.outerHTML"</span> completionHandler:^(<span class="name">id</span> _Nullable object, NSError * _Nullable error) &#123;</span><br><span class="line">	if ([<span class="name">object</span> isKindOfClass:[<span class="name">NSString</span> class]] &amp;&amp; isReaderMode) &#123;</span><br><span class="line">		[<span class="name">_webView</span> evaluateJavaScript:@<span class="string">"ReaderArticleFinderJS.articleTitle()"</span> completionHandler:^(<span class="name">id</span> _Nullable object_in, NSError * _Nullable error) &#123;</span><br><span class="line">                    readerArticleTitle = object_in<span class="comment">;</span></span><br><span class="line">                    </span><br><span class="line">                    NSMutableString *mut_str = [<span class="name">readerHTMLString</span> mutableCopy]<span class="comment">;</span></span><br><span class="line">                    </span><br><span class="line">                    // Replace page title with article title</span><br><span class="line">                    [<span class="name">mut_str</span> replaceOccurrencesOfString:@<span class="string">"Reader"</span> withString:readerArticleTitle options:NSLiteralSearch range:NSMakeRange(<span class="name">0</span>, <span class="number">300</span>)]<span class="comment">;</span></span><br><span class="line">                    NSRange t = [<span class="name">mut_str</span> rangeOfString:@<span class="string">"&lt;div id=\"article\" role=\"article\"&gt;"</span>]<span class="comment">;</span></span><br><span class="line">                    NSInteger location = t.location + t.length<span class="comment">;</span></span><br><span class="line">                    </span><br><span class="line">                    NSString *t_object = [<span class="name">NSString</span> stringWithFormat:@<span class="string">"&lt;div style=\"position: absolute; top: -999em\"&gt;%@&lt;/div&gt;"</span>,object]<span class="comment">;</span></span><br><span class="line">                    [<span class="name">mut_str</span> insertString:t_object atIndex:location]<span class="comment">;</span></span><br><span class="line">                    </span><br><span class="line">                    [<span class="name">_readerWebView</span> loadHTMLString:mut_str baseURL:self.url]<span class="comment">;</span></span><br><span class="line">                    _readerWebView.alpha = <span class="number">0.0</span>f<span class="comment">;</span></span><br><span class="line">                &#125;]<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]<span class="comment">;</span></span><br><span class="line">		[<span class="name">_webView</span> evaluateJavaScript:@<span class="string">"ReaderArticleFinderJS.prepareToTransitionToReader();"</span> completionHandler:^(<span class="name">id</span> _Nullable object, NSError * _Nullable error) &#123;</span><br><span class="line">     	&#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里采用的使 div 不可见的方式比较特别，因为 visibilty 或者 display 或者 height 这些参数都会被 js 排除在计算的节点之外，所以用 <strong>top: -999em</strong> 的写法。</p>
</blockquote>
<p><strong>ReaderWebView</strong> 在 load 之后就会调用挂载在上面的 safari-reader.js 中的 loaded 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loaded: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ReaderArticleFinderJS || <span class="keyword">this</span>._shouldSkipActivationWhenPageLoads())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.loadArticle(), ReaderAppearanceJS.initialize(), ReadingPositionStabilizerJS.initialize(), <span class="keyword">this</span>._shouldRestoreScrollPositionFromOriginalPageAtActivation) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (e &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">document</span>.body.scrollTop = e;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">"safari-reader-element-marker"</span>);</span><br><span class="line">            <span class="keyword">if</span> (t) &#123;</span><br><span class="line">                <span class="keyword">var</span> n = <span class="built_in">parseFloat</span>(t.style.top) / <span class="number">100</span>,</span><br><span class="line">                i = t.parentElement,</span><br><span class="line">                a = i.getBoundingClientRect();</span><br><span class="line">                <span class="built_in">document</span>.body.scrollTop = <span class="built_in">window</span>.scrollY + a.top + a.height * n, i.removeChild(t)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._clickingOutsideOfPaperRectangleDismissesReader &amp;&amp; (<span class="built_in">document</span>.documentElement.addEventListener(<span class="string">"mousedown"</span>, monitorMouseDownForPotentialDeactivation), <span class="built_in">document</span>.documentElement.addEventListener(<span class="string">"click"</span>, deactivateIfEventIsOutsideOfPaperContainer));</span><br><span class="line">    <span class="keyword">var</span> o = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setUserVisibleWidth(<span class="keyword">this</span>.lastKnownUserVisibleWidth)</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, o, !<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> article_node = <span class="built_in">document</span>.getElementById(<span class="string">"article"</span>);</span><br><span class="line">    article_node.firstChild.remove();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> message = &#123; <span class="string">'code'</span> : <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">window</span>.webkit.messageHandlers.JSController.postMessage(message);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后几行先是移除了 article 这个节点之下的第一个子节点，也就是我们添加上去的不可见的临时节点。然后通过 <code>WKWebView</code> 新的 js 交互方式发送消息，向原生的 Controller 发送一个加载完成的信号，我们可以在原生的 Controller 里面获取这个信息，然后随即开始阅读模式页面切换的动画：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (<span class="selector-tag">void</span>)<span class="selector-tag">userContentController</span><span class="selector-pseudo">:(WKUserContentController</span> *)<span class="selector-tag">userContentController</span></span><br><span class="line">      <span class="selector-tag">didReceiveScriptMessage</span><span class="selector-pseudo">:(WKScriptMessage</span> *)<span class="selector-tag">message</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了 loaded 方法，safari-reader.js 还有许多代码需要修改，最终可用的版本请参考项目仓库中的文件。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2016/10/21/5809b43604002.jpeg" width="40%"></p>
<h3 id="u4E00_u4E2A_u591A_u4F59_u7684_u95EE_u9898_u8BB0_u5F55_-__u300C_u5728_u5FAE_u4FE1_u4E2D_u6253_u5F00_u300D_u6309_u94AE_u70B9_u51FB_u5931_u6548"><a href="#u4E00_u4E2A_u591A_u4F59_u7684_u95EE_u9898_u8BB0_u5F55_-__u300C_u5728_u5FAE_u4FE1_u4E2D_u6253_u5F00_u300D_u6309_u94AE_u70B9_u51FB_u5931_u6548" class="headerlink" title="一个多余的问题记录 - 「在微信中打开」按钮点击失效"></a>一个多余的问题记录 - 「在微信中打开」按钮点击失效</h3><p>在 <code>WKWebView</code> 中，比如微信网页有一个 「在微信中打开」的按钮会失效。这是因为微信网页的 HTML 写法是直接在 a 标签的 href 里面写上了 <code>weixin://</code> 这样开头的链接，对于 <code>WKWebView</code> 来说会作为一个普通的 URL 打开，从而无响应，不会有弹框。</p>
<p><strong>解决办法</strong>就是拦截非 Http:// 和 Https:// 开头的请求，转成应用内跳转：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> (![navigationAction.request.URL.absoluteString containsString:<span class="string">@"http://"</span>] &amp;&amp; ![navigationAction.request.URL.absoluteString containsString:<span class="string">@"https://"</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UIApplication</span> *application = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line"><span class="meta">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 100000</span></span><br><span class="line">        <span class="keyword">if</span> ([application respondsToSelector:<span class="keyword">@selector</span>(openURL:options:completionHandler:)]) 		&#123;</span><br><span class="line">            [application openURL:navigationAction.request.URL options:@&#123;&#125; completionHandler:<span class="literal">nil</span>];</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [application openURL:navigationAction.request.URL];</span><br><span class="line">         &#125;</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">        [application openURL:navigationAction.request.URL];</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h3><p>最后说一句，当然，毕竟这样抓取苹果的脚本来做和系统一样的效果是很 tricky 的办法，但是：</p>
<ul>
<li><p>审核是能过的，但是不保证能不能一定过</p>
</li>
<li><p>有一些网页可能最新的 Safari 支持阅读模式，然而通过上述实现的浏览器却没法支持</p>
</li>
<li>如果遇到了 2 的问题，你可以选择使用苹果官方封装的更好的 SafariWebViewController，绝对原生的效果，当然就是自定义程度更低了</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在浏览器中，阅读模式通常是一个很有用的功能，有人说这是读小说神器，有些人则认为阅读模式可以改善新闻网站的阅读体验，而有些广告商则对此抗议，认为阅读模式损害了广告主利益。当然，]]>
    </summary>
    
      <category term="Safari 阅读模式" scheme="http://sergiochan.github.io/tags/Safari-%E9%98%85%E8%AF%BB%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="WKWebView" scheme="http://sergiochan.github.io/tags/WKWebView/"/>
    
      <category term="WebKit" scheme="http://sergiochan.github.io/tags/WebKit/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016-09-05 基督山伯爵]]></title>
    <link href="http://sergiochan.github.io/2016/09/05/2016-09-05-%E5%9F%BA%E7%9D%A3%E5%B1%B1%E4%BC%AF%E7%88%B5/"/>
    <id>http://sergiochan.github.io/2016/09/05/2016-09-05-基督山伯爵/</id>
    <published>2016-09-05T07:11:17.000Z</published>
    <updated>2016-09-05T07:13:19.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天去潘家园的旧书市场淘了一圈，带回了一本老旧的《基督山伯爵》。曾经在我高三那段时光里成为我最爱的佳作之一。</p>
<blockquote>
<p>“要开发深藏在人类智慧里的神秘宝藏，就需要遭遇不幸；要想引爆炸药，就需要压力。”   — 《基督山伯爵》</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天去潘家园的旧书市场淘了一圈，带回了一本老旧的《基督山伯爵》。曾经在我高三那段时光里成为我最爱的佳作之一。</p>
<blockquote>
<p>“要开发深藏在人类智慧里]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Airplay 中的 Airtunes Server 服务协议和机制详解以及 Android Demo 的实现]]></title>
    <link href="http://sergiochan.github.io/2016/08/29/iOS-Airplay-%E4%B8%AD%E7%9A%84-Airtunes-Server-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A-Android-Demo-%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sergiochan.github.io/2016/08/29/iOS-Airplay-中的-Airtunes-Server-服务协议和机制详解以及-Android-Demo-的实现/</id>
    <published>2016-08-29T02:03:22.000Z</published>
    <updated>2016-08-30T07:02:11.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 Android 设备上搭建一个 Airplay Server 其实是一件很浩大的工程，因为这需要逆向苹果的 Airplay 协议流程啊格式啊什么的，万幸这件事情已经由许许多多国外的大神们帮我们做好了，因此我们只要基于他们逆向出来的 Airplay 协议来搭建一个服务就可以了。话虽如此，整个过程中的工作量和需要掌握的知识点还是非常非常多的。</p>
<p>在局域网中实现流媒体传输的主流协议有两种，一种是苹果封闭的 Airplay 协议，一种是 DLNA 。</p>
<blockquote>
<p><strong>D</strong>IGITAL <strong>L</strong>IVING <strong>N</strong>ETWORK <strong>A</strong>LLIANCE 数字生活网络联盟，是索尼、英特尔、微软等发起的一套 PC、移动设备、消费电器之间互联互通的协议。它们的宗旨是“随时随地享受音乐、照片和视频”。据说苹果当时也是 DLNA 联盟的成员，而后来退出了并自立门户。</p>
</blockquote>
<p>对于 iOS 系统来说，对用户最友好且体验最好的方式自然还是通过 Airplay 协议了（其实我是不太喜欢在每个单独的视频或者音乐播放器里面去找到 DLNA 或者 Airplay 的按钮然后切换模式，系统级的服务体验还是更好一些，因此我更倾向使用 Airplay）。因此在很多场景下，你需要让你的<strong>安卓硬件</strong>或者<strong>设备</strong>支持 Airplay 服务，本文就是通过一步步解释和分析这个基于 DroidPlay 改出的稳定可用的 Airtunes 服务，给大家展示一个比较清晰的 Airplay 中的 Airtunes 的机制和服务流程。</p>
<blockquote>
<p>代码在 GitHub 上开放给大家学习和改动。地址在<a href="https://github.com/SergioChan/Android-Airplay-Server" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h2 id="u9996_u5148_uFF0C_u5982_u4F55_u8BA9_iOS__u8BBE_u5907_u53D1_u73B0_u4F60"><a href="#u9996_u5148_uFF0C_u5982_u4F55_u8BA9_iOS__u8BBE_u5907_u53D1_u73B0_u4F60" class="headerlink" title="首先，如何让 iOS 设备发现你"></a>首先，如何让 iOS 设备发现你</h2><p>这是万事开头的第一步：你需要让自己的安卓设备出现在 iOS 设备 Airplay 的设备列表中。由于 Airplay 是基于局域网的，苹果设备会在当前局域网里搜寻支持 Airplay 服务的设备，因此在这里你就需要通过 mDNS 服务向局域网发送一个组播来让 iOS 设备能够在内网中发现你。在 Android 上你可以使用 <strong>jmDNS</strong> 库来实现这个功能:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">final <span class="keyword">JmDNS </span><span class="keyword">jmDNS </span>= <span class="keyword">JmDNS.create(addr, </span>hostName + <span class="string">"-jmdns"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jmDNSInstances.add(jmDNS);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">/* Publish RAOP service */</span><br><span class="line">final ServiceInfo airTunesServiceInfo = ServiceInfo.create(</span><br><span class="line">AIR_TUNES_SERVICE_TYPE,</span><br><span class="line">hardwareAddressString + <span class="string">"@"</span> + hostName,</span><br><span class="line">getRtspPort(),</span><br><span class="line"><span class="number">0</span> <span class="comment">/* weight */</span>, <span class="number">0</span> <span class="comment">/* priority */</span>,</span><br><span class="line">AIRTUNES_SERVICE_PROPERTIES</span><br><span class="line">)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jmDNS.registerService(airTunesServiceInfo);</span></span><br></pre></td></tr></table></figure>
<p>这个注册的服务类型和参数都是固定的，服务类型为 <code>_raop._tcp.local.</code>，参数列表如下:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"txtvers"</span>, <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"tp"</span>, <span class="string">"UDP"</span>,</span><br><span class="line"><span class="string">"ch"</span>, <span class="string">"2"</span>,</span><br><span class="line"><span class="string">"ss"</span>, <span class="string">"16"</span>,</span><br><span class="line"><span class="string">"sr"</span>, <span class="string">"44100"</span>,</span><br><span class="line"><span class="string">"pw"</span>, <span class="string">"false"</span>,</span><br><span class="line"><span class="string">"sm"</span>, <span class="string">"false"</span>,</span><br><span class="line"><span class="string">"sv"</span>, <span class="string">"false"</span>,</span><br><span class="line"><span class="string">"ek"</span>, <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"et"</span>, <span class="string">"0,1"</span>,</span><br><span class="line"><span class="string">"cn"</span>, <span class="string">"0,1"</span>,</span><br><span class="line"><span class="string">"vn"</span>, <span class="string">"3"</span></span><br></pre></td></tr></table></figure>
<p>通过注册上这个 mDNS 服务，现在你应该可以在你的 iOS 设备上的 Airplay 列表里看到一个名字为你设置的 <code>hostName</code> 的设备了。当然，现在点击连接应该是没有任何反应的，因为接下来需要进行好几次的  RTSP 请求来进行校验和连接，我们要做的也主要就是接下来这几个步骤了。</p>
<blockquote>
<p><strong>Airplay 连接一开始的延迟貌似是没有办法解决的</strong>。参考这篇<a href="http://stackoverflow.com/questions/9997882/detecting-the-airplay-latency" target="_blank" rel="external">SO回答</a>，里面明确指出，Airplay 连接的延迟来源于发送方需要多次 RTSP 请求握手，大概在<strong>两秒左右</strong>，当然，如果你在客户端层面去做自己的传输协议当然是没有问题的，但是你并不能按照 Airplay 的包格式来实现系统级的 Airplay 到其他不论是原生的 iOS 设备还是支持了 Airplay 的 Android 设备上去，这会被苹果 Reject。所以如果在之后的开发中最后遇到了一点几秒的延迟没法解决的时候，记住不要钻进坑里了。实际测试中延迟大概在 1.6 秒左右。</p>
</blockquote>
<h2 id="u5F00_u542F_u4F60_u7684_u670D_u52A1_u7AEF"><a href="#u5F00_u542F_u4F60_u7684_u670D_u52A1_u7AEF" class="headerlink" title="开启你的服务端"></a>开启你的服务端</h2><p>告知了 iOS 设备你的端口信息之后，接下来就是在指定的端口开启你的服务端等候 iOS 设备传来的包了。在这里我们使用的是 Netty 库的 bootstrap 来搭建一个服务器，关于 Netty 你可以在百度和谷歌上找到更多介绍。总之它的机制是每一个新的 TCP 连接都会建立一个子的 channel 然后每一个 channel 的处理都是一个 pipeline 的处理模式，接收到消息的时候消息会在 pipeline 中流动，直到不再往下流动，发送消息反之亦然。</p>
<p>苹果的 Airplay 协议主要是通过 RTSP 协议的 Header 中的几个参数来进行身份的验证和包的校验，所以为了满足苹果自己需要的校验规则，我们需要在 pipeline 中加上这几个处理校验的 Handler：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">pipeline.addLast(<span class="string">"challengeResponse"</span>, <span class="keyword">new</span> <span class="type">RaopRtspChallengeResponseHandler</span>(NetworkUtils.getInstance().getHardwareAddress()));</span><br><span class="line">pipeline.addLast(<span class="string">"header"</span>, <span class="keyword">new</span> <span class="type">RaopRtspHeaderHandler</span>());</span><br><span class="line">pipeline.addLast(<span class="string">"options"</span>, <span class="keyword">new</span> <span class="type">RaopRtspOptionsHandler</span>());</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>由 iOS 设备向 Android 设备发送的 Request 的 Header 中 （注意这里你的 Android 是作为服务端的）包含一个叫做 <code>Apple-Challenge</code> 的字段，它的值需要经过 Base64 解密之后获得一个凭证，这个凭证是要在每一次的 Response 中使用到的。</li>
<li>由 Android 设备向 iOS 设备发送的 Response 的 Header 中需要包含一个叫做 <code>Apple-Response</code> 的字段，它的值需要经过一层 RSA 加密和一层 Base64 加密，原始数据则是 16 位 <code>Apple-Challenge</code> 解密后的凭证 + 16位 InetAddress.getAddress() 获取到的 byte 数组 + 6 位 硬件地址。分别是从 Request 中，<code>InetAddress.getAddress()</code> 和下面这段代码中的 <code>NetworkInterface</code> 来获得硬件地址。带有 <code>Apple-Challenge</code> Header 的包只会在 RTSP 连接建立的时候发送一次，因此稍微判断一下是否需要返回 <code>Apple-Response</code> 的 Header 就可以了。另外，在这里的 RSA 加密中用到的秘钥是一个私钥，也就是双方提前约定好的一个串，这个串会不定期的更新，破解的事情应该只有少数大神才做的了吧……对于我们主要还是从国外的一些博客和网站上经常去关注是否有私钥更新比较靠谱。这个私钥在所有的 RSA 解密操作中都要用到。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">final</span> NetworkInterface iface: Collections.list(NetworkInterface.getNetworkInterfaces())) &#123;</span><br><span class="line"><span class="keyword">if</span> (iface.isLoopback())&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (iface.isPointToPoint())&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> byte[] ifaceMacAddress = iface.getHardwareAddress();</span><br><span class="line"><span class="keyword">if</span> ((ifaceMacAddress != <span class="literal">null</span>) &amp;&amp; (ifaceMacAddress.length == <span class="number">6</span>) &amp;&amp; !isBlockedHardwareAddress(ifaceMacAddress)) &#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.copyOfRange(ifaceMacAddress, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">final</span> Throwable e) &#123;</span><br><span class="line"><span class="comment">/* Ignore */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于 RTSP Header 的处理，每个 RTSP 包都会带有 <code>CSeq</code> 的头，这个头需要在 Response 和 Request 中保持一致。它指定了 RTSP 请求回应对的序列号，在每个请求或回应中都必须包括这个头字段。对每个包含一个给定序列号的请求消息，都会有一个相同序列号的回应消息。</li>
<li>每个 RTSP Header 还要带上一个值为 <code>connected; type=analog</code> 的头 <code>Audio-Jack-Status</code>。</li>
<li>你还要响应 RTSP 的 OPTION 请求，这个请求是由客户端向服务端发起，要求服务端告知支持的所有请求类型，因此这里我们需要将所有的 RTSP 请求方法带在 Response 中返回给客户端。</li>
</ul>
<h2 id="u63A5_u6536_u5E76_u5904_u7406_u4F60_u7684_u6570_u636E_u6D41"><a href="#u63A5_u6536_u5E76_u5904_u7406_u4F60_u7684_u6570_u636E_u6D41" class="headerlink" title="接收并处理你的数据流"></a>接收并处理你的数据流</h2><p>当请求经过了上面几层 Handler 还在往下传递的时候，这个时候数据包应该就到了 RTSP 的正常处理流程中了。而这些所有的关于 RTSP 的处理都是在 <code>AudioHandler</code> 中来完成的。我们会收到下面这几种请求</p>
<ul>
<li>ANNOUNCE 初始化步骤，传输媒体信息，编码和加密秘钥</li>
<li>SETUP 连接步骤</li>
<li>RECORD 不需要做什么，在这里所有的工作都在前两步里面完成了</li>
<li>FLUSH 当客户端终止了 Airtunes 传输的时候发送，用来清空数据队列</li>
<li>TEARDOWN 直接关闭连接</li>
</ul>
<h3 id="ANNOUNCE"><a href="#ANNOUNCE" class="headerlink" title="ANNOUNCE"></a>ANNOUNCE</h3><p>ANNOUNCE 中主要是带来了一些 RTP 数据的参数，Android 可以根据这些参数来初始化相应的 <strong>RTP 处理队列</strong>，<strong>ALAC Decoder</strong> 和 <strong>AES 解密处理器</strong>（注意所有之后的 RTP 包都是 AES 加密过的，需要用这里初始化的解密处理器解一遍，但是 RTSP 包不是 ）。ANNOUNCE 在传输的时候遵循 <strong>SDP 描述格式</strong>来传输媒体信息：</p>
<blockquote>
<p><strong>关于 SDP</strong></p>
<p>SDP 是一种会话描述格式，它不属于传输协议。</p>
<p>SDP协议是基于文本的协议，这样就能保证协议的可扩展性比较强。SDP 不支持会话内容或媒体编码的协商，所以在流媒体中只用来描述媒体信息。</p>
<p>SDP描述由许多文本行组成，文本行的格式为:</p>
<p><strong>类型 = 值</strong></p>
<p>其中，类型是一个字母，值是结构化的文本串，其格式依类型而定。</p>
<p><strong>sdp的格式:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> v=&lt;version&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> o=&lt;username&gt; &lt;session id&gt; &lt;version&gt; &lt;network <span class="built_in">type</span>&gt; &lt;address <span class="built_in">type</span>&gt; &lt;address&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> s=&lt;session name&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> i=&lt;session description&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> u=&lt;URI&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> e=&lt;email address&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> p=&lt;phone number&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> c=&lt;network <span class="built_in">type</span>&gt; &lt;address <span class="built_in">type</span>&gt; &lt;connection address&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> b=&lt;modifier&gt;:&lt;bandwidth-value&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> t=&lt;start time&gt; &lt;stop time&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> r=&lt;repeat interval&gt; &lt;active duration&gt; &lt;list of offsets from start-time&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> z=&lt;adjustment time&gt; &lt;offset&gt; &lt;adjustment time&gt; &lt;offset&gt; ....</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> k=&lt;method&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> k=&lt;method&gt;:&lt;encryption key&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> a=&lt;attribute&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> a=&lt;attribute&gt;:&lt;value&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> m=&lt;media&gt; &lt;port&gt; &lt;transport&gt; &lt;fmt list&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> v = (协议版本)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> o = (所有者/创建者和会话标识符)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> s = (会话名称)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> i = * (会话信息)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> u = * (URI 描述)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> e = * (Email 地址)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> p = * (电话号码)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> c = * (连接信息)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> b = * (带宽信息)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> z = * (时间区域调整)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> k = * (加密密钥)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> a = * (0 个或多个会话属性行)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 时间描述: </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> t = (会话活动时间)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> r = * (0或多次重复次数)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 媒体描述: </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> m = (媒体名称和传输地址)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> i = * (媒体标题)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> c = * (连接信息 — 如果包含在会话层则该字段可选)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> b = * (带宽信息)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> k = * (加密密钥)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> a = * (0 个或多个媒体属性行)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>Airplay 服务所定义的 ANNOUNCE 包的 SDP 格式如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Sample sdp content:</span><br><span class="line">* </span><br><span class="line">v=0</span><br><span class="line">o=iTunes 3413821438 0 IN IP4 fe80::217:f2ff:fe0f:e0f6</span><br><span class="line">s=iTunes</span><br><span class="line">c=IN IP4 fe80::5a55:caff:fe1a:e187</span><br><span class="line">t=0 0</span><br><span class="line">m=audio 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 AppleLossless</span><br><span class="line">a=fmtp:96 352 0 16 40 10 14 2 255 0 0 44100</span><br><span class="line">a=fpaeskey:RlBMWQECAQAAAAA8AAAAAPFOnNe+zWb5/n4L5KZkE2AAAAAQlDx69reTdwHF9LaNmhiRURTAbcL4brYAceAkZ49YirXm62N4</span><br><span class="line">a=aesiv:5b+YZi9Ikb845BmNhaVo+Q</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>根据样例格式我们可以解析出 AES 解密的<strong>秘钥</strong>和<strong>初始化矩阵IV</strong>以及流的数据格式，从而初始化 <strong>ALAC Decoder</strong>。其中，参数 m 的最后一个值和 rtpmap 的第一个值需要保持一致，rtpmap 的第一个值和 fmtp 的第一个值需要保持一致，他们都是 <strong>payload type</strong> 的值，因此在解析完包的数据之后要进行校验。fmtp 第一个参数之后的所有参数表示的都是媒体格式的指定参数。我们用这些参数来初始化 ALAC Decoder。<em>关于 SDP 的详细参数描述你可以在谷歌上找到更多</em>。</p>
<blockquote>
<p>a=fmtp:<format> <format specific="" parameters=""><br>​       This attribute allows parameters that are specific to a particular format to be conveyed in a way that SDP doesn’t have to understand them.  The format must be one of the formats specified for the media.  Format-specific parameters may be any set of parameters required to be conveyed by SDP and given unchanged to the media tool that will use this format.</format></format></p>
<p>​       It is a media attribute, and is not dependent on charset.</p>
</blockquote>
<p>接下来是 AES 解密的秘钥和初始化矩阵 IV：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"rsaaeskey"</span>.<span class="keyword">equals</span>(key)) &#123;</span><br><span class="line"><span class="comment">/* Sets the AES key required to decrypt the audio data. The key is</span></span><br><span class="line"><span class="comment">* encrypted wih the AirTunes private key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">byte</span>[] aesKeyRaw;</span><br><span class="line"></span><br><span class="line">rsaPkCS1OaepCipher.init(Cipher.DECRYPT_MODE, AirTunesCryptography.PrivateKey);</span><br><span class="line">aesKeyRaw = rsaPkCS1OaepCipher.doFinal(Base64.decodeUnpadded(<span class="keyword">value</span>));</span><br><span class="line"></span><br><span class="line">aesKey = <span class="keyword">new</span> SecretKeySpec(aesKeyRaw, <span class="string">"AES"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"aesiv"</span>.<span class="keyword">equals</span>(key)) &#123;</span><br><span class="line"><span class="comment">/* Sets the AES initialization vector */</span></span><br><span class="line">aesIv = <span class="keyword">new</span> IvParameterSpec(Base64.decodeUnpadded(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个值都是用 Base64 加密过的，所以我们要先 Base64 解密得到原始数据，然后 <strong>AES Key</strong> 需要再通过 Airtunes 的秘钥来 RSA 解密，最后得到 AES 解密需要的 Key。</p>
<h3 id="SETUP"><a href="#SETUP" class="headerlink" title="SETUP"></a>SETUP</h3><p>在 ANNOUNCE 中我们主要是得到了数据格式，数据解密的方法参数这些基本信息，那么 SETUP 的时候客户端就是在和我们交换一些连接信息：主要也就是三个 port 的信息，对应三个 channel，分别是 <strong>control port -&gt; control channel</strong>，<strong>timing port -&gt; timing channel</strong> 和 <strong>server port -&gt; audio channel</strong>，这是三个 <strong>UDP 连接</strong>的端口。这也是整个 Airtunes 服务结构中最重要的部分了：</p>
<ul>
<li><strong>control port</strong> 是用来发送 resendTransmitRequest 的 channel，也就是当 Android 这边发现我收到的音乐流数据包中有丢失帧的时候，可以通过 control port 发送 resendTransmit 的 request 给 iOS 设备，设备收到后会将帧在 response 中补发回来</li>
<li><strong>timing port</strong> 用来传输 Airplay 的时间同步包，同时也可以主动向 iOS 设备请求当前的时间戳来校准流的时间戳</li>
<li><strong>server port</strong> 则是用来传输最主要的音乐流数据包</li>
</ul>
<blockquote>
<p>在这里我们将 control 和 timing 的包统一 reroute 到 audio 的 channel 上来处理。接收到的 UpStream 将包从 control 和 timing 集中到 audio 来处理，而发送出去的 DownStream 则是将指定类型的包从 audio 分发到 control 和 timing 去发送和接收 response。下面会详细展开。</p>
</blockquote>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Split Transport header into individual options and prepare response options list */</span></span><br><span class="line"><span class="keyword">final</span> Deque&lt;<span class="keyword">String</span>&gt; requestOptions = <span class="keyword">new</span> java.util.LinkedList&lt;<span class="keyword">String</span>&gt;(Arrays.asList(req.getHeader(HEADER_TRANSPORT).<span class="built_in">split</span>(<span class="string">";"</span>)));</span><br><span class="line"><span class="keyword">final</span> List&lt;<span class="keyword">String</span>&gt; responseOptions = <span class="keyword">new</span> java.util.LinkedList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Transport header. Protocol must be RTP/AVP/UDP */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> requestProtocol = requestOptions.removeFirst();</span><br><span class="line"><span class="keyword">if</span> ( ! <span class="string">"RTP/AVP/UDP"</span>.equals(requestProtocol))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Transport protocol must be RTP/AVP/UDP, but was "</span> + requestProtocol);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">responseOptions.<span class="built_in">add</span>(requestProtocol);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HEADER 中 key 为 <strong>Transport</strong> 的字段值必须为 <code>RTP/AVP/UDP</code> 。</p>
</blockquote>
<p>首先对 SETUP 的参数列表进行解析，解出来的 <code>requestOptions</code> 仍然是用正则匹配的形式获取到 key - value 对：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Parse incoming transport options and build response options */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">final</span> <span class="keyword">String</span> requestOption: requestOptions) &#123;</span><br><span class="line"><span class="comment">/* Split option into key and value */</span></span><br><span class="line"><span class="keyword">final</span> Matcher transportOption = PATTERN_TRANSPORT_OPTION.matcher(requestOption);</span><br><span class="line"><span class="keyword">if</span> ( ! transportOption.matches() )&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Cannot parse Transport option "</span> + requestOption);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> <span class="built_in">key</span> = transportOption.group(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> value = transportOption.group(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>其中我们只要对指定几个 key 进行 response 就可以了，其中，除了 <code>interleaved</code> 和 <code>mode</code> 返回的参数是固定的之外，<code>control_port</code> 和 <code>timing_port</code> 在 request 中所对应的 value 是客户端的端口，而 response 中需要带上服务端的端口。同时，这两个 UDP 连接由服务端发起去连接客户端对应的端口。最后再告知客户端 <code>server_port</code> 的端口。</p>
<p><strong>interleaved</strong> 指的是由于这条 TCP 连接 RTP 和 RTCP 都要使用，因此两个连接的数据包会交叉传输在同一个 TCP 连接上，每个包都会再加一层标识，而标识 Channel 的值就由这里的 interleaved 后面的值 0-1 来决定，表示有 0 和 1 两种交叉混用的 Channel 类型。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Probably means that two channels are interleaved in the stream. Included in the response options */</span></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="string">"0-1"</span>.<span class="keyword">equals</span>(<span class="keyword">value</span>))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Unsupported Transport option, interleaved must be 0-1 but was "</span> + <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">responseOptions.<span class="keyword">add</span>(<span class="string">"interleaved=0-1"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>mode</strong> 则是校验客户端要求我们做的事情，这是 RTSP 协议中规定的一部分，在 Airplay 中，Server 永远承担的是接收数据的工作，因此 mode 的值也应当保持为 <strong>record</strong> 。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Means the we're supposed to receive audio data, not send it. Included in the response options */</span></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="string">"record"</span>.<span class="keyword">equals</span>(<span class="keyword">value</span>))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Unsupported Transport option, mode must be record but was "</span> + <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">responseOptions.<span class="keyword">add</span>(<span class="string">"mode=record"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>control_port</strong> 是 control channel 对应的客户端的端口号，而我们返回的 response 中需要改成服务端的端口号。可以随便分配一个比较大的端口号就行。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Port number of the client's control socket. Response includes port number of *our* control port */</span></span><br><span class="line">final int clientControlPort = Integer.valueOf(value)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">controlChannel = createRtpChannel(</span><br><span class="line"><span class="keyword">substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(), </span><span class="number">53670</span>),</span><br><span class="line"><span class="keyword">substitutePort((InetSocketAddress)ctx.getChannel().getRemoteAddress(), </span>clientControlPort),</span><br><span class="line">RaopRtpChannelType.Control</span><br><span class="line">)<span class="comment">;</span></span><br><span class="line">responseOptions.<span class="keyword">add("control_port=" </span>+ ((InetSocketAddress)controlChannel.getLocalAddress()).getPort())<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>timing_port</strong> 则是 timing channel 对应的客户端的端口号。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Port number of the client's timing socket. Response includes port number of *our* timing port */</span></span><br><span class="line">final int clientTimingPort = Integer.valueOf(value)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">timingChannel = createRtpChannel(</span><br><span class="line"><span class="keyword">substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(), </span><span class="number">53669</span>),</span><br><span class="line"><span class="keyword">substitutePort((InetSocketAddress)ctx.getChannel().getRemoteAddress(), </span>clientTimingPort),</span><br><span class="line">RaopRtpChannelType.Timing</span><br><span class="line">)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">responseOptions.<span class="keyword">add("timing_port=" </span>+ ((InetSocketAddress)timingChannel.getLocalAddress()).getPort())<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>server_port</strong> 这个 key 并不在 SETUP 的参数列表中，但是你需要在 response 中带上，告知客户端你在哪个端口打开了你的 audio 数据接收。因此它不需要主动去连接客户端的端口。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Create audio socket and include it's port in our response */</span></span><br><span class="line">audioChannel = createRtpChannel(</span><br><span class="line"><span class="keyword">substitutePort((InetSocketAddress)ctx.getChannel().getLocalAddress(), </span><span class="number">53671</span>),</span><br><span class="line">null,</span><br><span class="line">RaopRtpChannelType.Audio</span><br><span class="line">)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">responseOptions.<span class="keyword">add("server_port=" </span>+ ((InetSocketAddress)audioChannel.getLocalAddress()).getPort())<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>其中的 <code>createRtpChannel</code> 方法中，我们同样也为每一个端口新建一个 bootstrap 实例，添加 pipeline Handler，然后将 timing 和 control 两个 port 连接到 SETUP 包带来的 iOS 客户端端口上去。连接成功后 SETUP 也就处理完毕了。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Set pipeline factory for the RTP channel */</span></span><br><span class="line"><span class="keyword">bootstrap.setPipelineFactory(new </span>ChannelPipelineFactory() &#123;</span><br><span class="line">@Override</span><br><span class="line">public ChannelPipeline getPipeline() throws Exception &#123;</span><br><span class="line">final ChannelPipeline pipeline = Channels.pipeline()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">final AirPlayServer airPlayServer = AirPlayServer.getIstance()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">pipeline.<span class="keyword">addLast("executionHandler", </span>airPlayServer.getChannelExecutionHandler())<span class="comment">;</span></span><br><span class="line">pipeline.<span class="keyword">addLast("exceptionLogger", </span>exceptionLoggingHandler)<span class="comment">;</span></span><br><span class="line">pipeline.<span class="keyword">addLast("decoder", </span>decodeHandler)<span class="comment">;</span></span><br><span class="line">pipeline.<span class="keyword">addLast("encoder", </span>encodeHandler)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* We pretend that all communication takes place on the audio channel,</span></span><br><span class="line"><span class="comment">* and simply re-route packets from and to the control and timing channels</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">if ( ! channelType.equals(RaopRtpChannelType.Audio)) &#123;</span><br><span class="line">pipeline.<span class="keyword">addLast("inputToAudioRouter", </span>inputToAudioRouterDownstreamHandler)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Must come *after* the router, otherwise incoming packets are logged twice */</span></span><br><span class="line">pipeline.<span class="keyword">addLast("packetLogger", </span>packetLoggingHandler)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line"><span class="comment">/* Must come *before* the router, otherwise outgoing packets are logged twice */</span></span><br><span class="line">pipeline.<span class="keyword">addLast("packetLogger", </span>packetLoggingHandler)<span class="comment">;</span></span><br><span class="line">pipeline.<span class="keyword">addLast("audioToOutputRouter", </span>audioToOutputRouterUpstreamHandler)<span class="comment">;</span></span><br><span class="line">pipeline.<span class="keyword">addLast("timing", </span>timingHandler)<span class="comment">;</span></span><br><span class="line">pipeline.<span class="keyword">addLast("resendRequester", </span>resendRequestHandler)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if (decryptionHandler != null)&#123;</span><br><span class="line">pipeline.<span class="keyword">addLast("decrypt", </span>decryptionHandler)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (audioDecodeHandler != null)&#123;</span><br><span class="line">pipeline.<span class="keyword">addLast("audioDecode", </span>audioDecodeHandler)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pipeline.<span class="keyword">addLast("enqueue", </span>audioEnqueueHandler)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return pipeline<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这里的 pipeline 模型如图，也是三个 channel 处理流程的结构图，接下来的小节会展开说明：</p>
<p><img src="https://ooo.0o0.ooo/2016/08/28/57c300b59b89e.png" alt=""></p>
<h2 id="Audio_Pipeline__u548C__u4E09_u4E2A_Channel__u4E4B_u95F4_u7684_u5173_u7CFB"><a href="#Audio_Pipeline__u548C__u4E09_u4E2A_Channel__u4E4B_u95F4_u7684_u5173_u7CFB" class="headerlink" title="Audio Pipeline 和 三个 Channel 之间的关系"></a>Audio Pipeline 和 三个 Channel 之间的关系</h2><p>SETUP 结束之后就会开始收到 Audio 的数据包了。那么正式的处理就要开始了。</p>
<p>根据上面这张我总结出来的流程图，Airplay Service 可以根据 bootstrap 的 pipeline 的特性可以分为 <code>Up Stream</code> 和 <code>Down Stream</code>，一个是从客户端向服务端传递的消息，一个是从服务端向客户端传递的消息。</p>
<h5 id="Up_Stream"><a href="#Up_Stream" class="headerlink" title="Up Stream"></a>Up Stream</h5><p>首先不论是 Up 还是 Down Stream，都要先经过一个 Executor Handler，这个 Handler 中包括了一个线程池 Executor，当收到新的 UpStream 的数据包的时候，都会交给这个线程池来分配线程处理，在这里声明的线程池是一个 <code>OrderedMemoryAwareThreadPoolExecutor</code>。至于为什么在 Netty 的 pipeline 处理中要用到线程池来分配任务，可以参考<a href="http://www.techv5.com/topic/85/" target="_blank" rel="external">这篇文章</a>。简要地说就是由于 Handler 处理的工作量很大，为了不堵塞线程，Netty 会开好几个线程来处理，并且 <code>OrderedMemoryAwareThreadPoolExecutor</code> 能够保证处理的事件流的顺序，所以这里要加这一层。</p>
<p>数据进入 pipeline 之后，先是按照 RTP Packet 的格式进行 decode。在 Airplay 协议中，总共有如下几种 Packet Type：</p>
<ul>
<li>TimingRequest</li>
<li>TimingResponse</li>
<li>Sync</li>
<li>RetransmitRequest</li>
<li>AudioRetransmit</li>
<li>AudioTransmit</li>
</ul>
<p>其中 <code>TimingRequest</code>，<code>TimingResponse</code> 和 <code>Sync</code> 三种包类型都是属于 timing channel的，<code>RetransmitRequest</code> 是由 control channel 发起的对丢失包重传的请求，而 <code>AudioRetransmit</code> 和 <code>AudioTransmit</code> 都是由 audio channel 处理的包含了音乐数据的包。</p>
<p>消息继续往下传递，过了 Logger 之后就到了 router。router 维护了 audio channel 和另外两个 channel 之间的关系：router 将另外两个 channel 应该处理的包发送给对应的 Handler 去处理。</p>
<p>timing channel 不仅处理 Sync 数据包，同时在 channel 启动的时候也会启动一个单独的线程，每三秒钟执行一次 timing request，来确认本地时钟和客户端时钟的同步。而 control channel 做的事情则是在<strong>每收到一个</strong>新的 audio 数据包的时候都会<strong>确认一次数据包的 sequence number 是否和当前的是连续的</strong>，如果不是连续的，则将中间缺失的 number 标记为 missing 的数据包，并且向客户端发送一个 resend 的请求。当客户端发来了 <code>AudioRetransmit</code> 类型的数据包后，它的内容其实也是由 audio channel 接收的，control channcel 只是负责将刚才标记为 missing 的 sequence number 清除掉。</p>
<p>这两个 channel 在发送 request 的时候，也会发回到 audio channel 的 Handler 上来，通过 audio channel 这边的 encode 之后再发送出去。</p>
<p>而音乐数据包，则需要经过 AES 解密，这个解密器我们已经在 ANNOUNCE 的时候初始化好了，再经过 ALACDecoder，也是在 ANNOUNCE 的时候根据获得的媒体信息初始化的音频解码器，最后在 EnqueueHandler 中决定是否进入音频输出队列。</p>
<h5 id="Down_Stream"><a href="#Down_Stream" class="headerlink" title="Down Stream"></a>Down Stream</h5><p>往客户端发送的信息主要就是 timine 和 control 两个 channel 发起的一些请求了，audio channel 没有参与 down stream 的传递。</p>
<h2 id="EnqueueHandler__u97F3_u4E50_u6570_u636E_u961F_u5217_Handler"><a href="#EnqueueHandler__u97F3_u4E50_u6570_u636E_u961F_u5217_Handler" class="headerlink" title="EnqueueHandler 音乐数据队列 Handler"></a>EnqueueHandler 音乐数据队列 Handler</h2><p>当一个数据包经过层层解密和解析进入队列 Handler 之后，还要进行一大堆的时间戳合法性校验。<strong>每一个数据包都包含了很多帧，每一个帧都包含了一个帧序号，而每一个包也都有一个开始的帧序号。</strong>这里涉及到好几个地方的时间和与时间相对应的帧序列：</p>
<ul>
<li>Android 上  Audio Track 当前的 time</li>
<li>服务端队列中当前的 frame time</li>
<li>audio channel 中客户端传来的数据包中的 frame time</li>
<li>timing channel 中客户端传来的 Sync 和 timing response 包中的 frame time</li>
</ul>
<p>首先，我们允许一定范围的延迟，因为数据的传输，最开始的握手包括 iOS 端 Airplay 的机制都可能导致一定的延迟，因此 <strong>timing channel 最重要的作用之一就是维护和当前主队列最新 frame time的 offset</strong>。在每一个 timing response 的包中，我可以知道当前客户端的帧序号和服务端已经播放到的帧序号的 offset，在每解析一个数据包的时候，都要使用当前的 offset 来将客户端的帧序号转换成服务端的帧序号。每个包所带的 frame time 都可能有下面三种情况：</p>
<ul>
<li><strong>太迟了</strong></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/08/29/57c42046195f6.png" alt=""></p>
<p>太迟了的情况如图所示，Line Time 这条轴就是 Audio Track ，<strong>Now Time</strong> 指的是当前音乐数据已经播放到什么时间了，这时候服务端接收到的一个 Packet，在包中的开始帧序列为 frame time，将这个帧序列转换为本地 Audio Track 对应的 Line Time，加上整个 Packet 包含的帧数，这个值与 Now Time 的差距<strong>转化成时间</strong>就是它的 Delay，当这个 delay 大于一个包长度的时候，由于它已经是播放过的时间线了，因此当一个包迟到了一个包的长度以上，它就不再被需要了，这时候这个包也就不会被加进 queue 了。</p>
<ul>
<li><strong>太早</strong></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/08/29/57c42030293f6.png" alt=""></p>
<p>太早的情况如图所示。有别于迟到的包，提前来的包其实是件好事，但是提前来的太早的包也不一定是件好事，它很可能要么是个错误的包，要么是个传输错误的包。因此对于提前到来的包一般都有一个时间长度的阈值，提前了大于多少秒到来的包才会被认定是 too early 然后被丢掉。在这个项目中这个阈值为 10 秒。</p>
<ul>
<li><strong>正正好，还行</strong></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/08/29/57c42013d2672.png" alt=""></p>
<p>正正好的情况如图所示。当一个数据包上述两种情况都不满足的时候，那就说明这个包的时间戳和帧序列是我们可以接受的，于是我们将这个包加进最后的音频处理队列。</p>
<p>进入了队列之后，我们还要将数据从这个队列中按顺序写到 Audio Track 上去。首先确保 Audio Track 的模式为 <strong>MODE_STREAM</strong> ，然后按照先进先出的顺序处理队列。其实在这里的处理中对于每一个包的开始帧的序列号又做了一次校验，类似上面对于 Delay 的做法，在这里又会从队列中再次筛选掉一些无用帧。接下去在将帧最后添加到 Audio Track 上去的时候，由于我们添加到队列中的包只是上面的<strong>正正好，还行</strong>的情况，很有可能会出现下一个包的开始和当前 Audio Track 的 Line Time 无法完全吻合的情况出现，这时候我们就需要在缺少帧的地方补上空帧，在多余帧的地方等待一会直到帧的序号完全对上，然后再将帧写入 Audio Track，这样能够保证最终播放的帧一定是序列正确的。</p>
<h2 id="u66F4_u591A"><a href="#u66F4_u591A" class="headerlink" title="更多"></a>更多</h2><p>其实这篇博客没有涉及太多安卓相关的东西，说白了也只是 Airplay Server 的一种 Java 实现。在实现的基础上，掌握了 Airplay 实现的原理的话，在不论是什么平台上都可以按照相应的原理来实现一个 Airplay Server。用这个将你闲置废弃的安卓手机变成你的无线音箱吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在 Android 设备上搭建一个 Airplay Server 其实是一件很浩大的工程，因为这需要逆向苹果的 Airplay 协议流程啊格式啊什么的，万幸这件事情已经由许许]]>
    </summary>
    
      <category term="Airplay" scheme="http://sergiochan.github.io/tags/Airplay/"/>
    
      <category term="Android" scheme="http://sergiochan.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="http://sergiochan.github.io/tags/iOS/"/>
    
      <category term="细心写的技术博客" scheme="http://sergiochan.github.io/categories/%E7%BB%86%E5%BF%83%E5%86%99%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leetcode - Database 刷题记录]]></title>
    <link href="http://sergiochan.github.io/2016/08/26/Leetcode-Database-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://sergiochan.github.io/2016/08/26/Leetcode-Database-刷题记录/</id>
    <published>2016-08-26T07:50:59.000Z</published>
    <updated>2016-08-26T09:16:34.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>偶然被 Cee 酱吸引打开了 Leetcode，这个大一的时候觉得自己一辈子都不会去做的事情……居然。发现 OJ 竟然有 Database 模块了，想当年大学学数据库的时候最想有的就是一个和 OJ 一样的 SQL 在线运行平台，不然数据库上机只会教你安装 SQL Server = = 想想都想哭，时间都浪费在那了。而且做了之后发现好多自己在生产环境都不会遇到的神奇的坑……因此抽着空闲做了大部分，留下此篇笔记。</p>
<p>浮生若梦。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li><a href="#175_-_Combine_Two_Tables">175 . Combine Two Tables</a></li>
<li><a href="#177_-_Nth_Highest_Salary">177 . Nth Highest Salary</a></li>
<li><a href="#181_-_Employees_Earning_More_Than_Their_Managers">181 . Employees Earning More Than Their Managers</a></li>
<li><a href="#182_-_Duplicate_Emails">182 . Duplicate Emails</a></li>
<li><a href="#183_-_Customers_Who_Never_Order">183 . Customers Who Never Order</a></li>
<li><a href="#185_-_Department_Top_Three_Salaries">185 . Department Top Three Salaries</a></li>
<li><a href="#196_-_Delete_Duplicate_Emails">196 . Delete Duplicate Emails</a></li>
<li><a href="#197_-_Rising_Temperature">197 . Rising Temperature</a></li>
</ul>
<h3 id="175_-_Combine_Two_Tables"><a href="#175_-_Combine_Two_Tables" class="headerlink" title="175 . Combine Two Tables"></a>175 . Combine Two Tables</h3><p>Table: <code>Person</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line">| LastName    | varchar |</span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">PersonId is the primary key column for this table.</span><br></pre></td></tr></table></figure>
<p>Table: <code>Address</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line">| State       | varchar |</span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">AddressId is the primary key column for this table.</span><br></pre></td></tr></table></figure>
<p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">FirstName,</span> LastName, City, State</span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A"><a href="#SQL__3A" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT Person.FirstName AS FirstName ,Person.LastName AS LastName ,Address.City AS City,Address.State AS State</span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line">LEFT JOIN<span class="built_in"> Address </span>ON (Person.PersonId = Address.PersonId)</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A"><a href="#Comment__3A" class="headerlink" title="Comment :"></a>Comment :</h4><p>其实这题看起来很简单，但是要注意一个是用 <strong>LEFT JOIN</strong>，这样即使没有地址的 Person 也会被选出来，另一个是在 Select 的时候要按照它的要求命名选出来的列（由于这题老是遇到 Internal Error，相同的语句运行三遍通过一遍有两遍都是 Internal Error，因此并不是特别明白这个是不是必须的）但是 <strong>LEFT JOIN</strong> 是一定要有的，用 where 连接两个表的话也要特别注意到不存在的情况，因此本题还是用 JOIN 做连接好过用 where 做多表连接</p>
<h3 id="177_-_Nth_Highest_Salary"><a href="#177_-_Nth_Highest_Salary" class="headerlink" title="177 . Nth Highest Salary"></a>177 . Nth Highest Salary</h3><p>Write a SQL query to get the <em>n</em>th highest salary from the <code>Employee</code> table.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line"><span class="code">+----+</span>--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line"><span class="code">+----+</span>--------+</span><br></pre></td></tr></table></figure>
<p>For example, given the above Employee table, the <em>n</em>th highest salary where <em>n</em> = 2 is <code>200</code>. If there is no <em>n</em>th highest salary, then the query should return <code>null</code>.</p>
<h4 id="SQL__3A-1"><a href="#SQL__3A-1" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">CREATE <span class="keyword">FUNCTION</span> getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  <span class="keyword">DECLARE</span> l INT;</span><br><span class="line">  <span class="keyword">DECLARE</span> r INT;</span><br><span class="line">  <span class="keyword">DECLARE</span> c INT;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SET</span> l = N<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> COUNT(<span class="keyword">DISTINCT</span>(Salary)) <span class="keyword">INTO</span> c <span class="keyword">FROM</span> Employee;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">IF</span> N &gt; c <span class="keyword">THEN</span> </span><br><span class="line">    <span class="keyword">RETURN</span> (null);</span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SELECT</span> Salary <span class="keyword">INTO</span> r <span class="keyword">FROM</span> Employee <span class="keyword">GROUP</span> <span class="keyword">BY</span> Salary <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary DESC LIMIT l, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">RETURN</span> (r);</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-1"><a href="#Comment__3A-1" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题简直变态。</p>
<p><img src="https://ooo.0o0.ooo/2016/08/26/57bfebf246fe0.png" alt=""></p>
<p>有这时间不如用 Python 什么的取出想要的数据在内存里排个序就完事了，非得整个 SQL Function，简直不知道说什么好。之前也写过 Function，但是主要是在 SQL 的 Procedure 编程里面会用到，而且基本不会写到复杂的逻辑 = = 复杂逻辑写个脚本什么的不好么……言归正传，这题考察了 Function 中的多个基本语法，包括 <strong>DECLARE</strong>, <strong>SET</strong>, <strong>SELECT 的结果赋值</strong>，<strong>IF…THEN…ELSE…END IF 逻辑</strong>。（这里其实题目没交代清楚，懒得吐槽了）如果遇到相同 Salary 的数据怎么办，其实题目的意思是如果两个人的 Salary 都为 200，一个人 Salary 为 300，那就只有第一 300 第二 200 而没有第三，他最后需要你返回的也只是 Salary 的值，因此我们需要先去重一遍得到 DISTINCT 的 Salary 值的数量，如果要获取的第 N 位并不存在，则返回 null，如果存在则用 <strong>GROUP BY 套 ORDER BY 套 LIMIT</strong> 来获取分组排序后的第 N - 1 位，记住要获取的第 N 位的 index 是 N - 1，所以这儿才要重新 DECLARE 一个 l 。</p>
<h3 id="181_-_Employees_Earning_More_Than_Their_Managers"><a href="#181_-_Employees_Earning_More_Than_Their_Managers" class="headerlink" title="181 . Employees Earning More Than Their Managers"></a>181 . Employees Earning More Than Their Managers</h3><p>The <code>Employee</code> table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> Name  </span>|<span class="string"> Salary </span>|<span class="string"> ManagerId </span>|</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string"> Joe   </span>|<span class="string"> 70000  </span>|<span class="string"> 3         </span>|</span><br><span class="line">|<span class="string"> 2  </span>|<span class="string"> Henry </span>|<span class="string"> 80000  </span>|<span class="string"> 4         </span>|</span><br><span class="line">|<span class="string"> 3  </span>|<span class="string"> Sam   </span>|<span class="string"> 60000  </span>|<span class="string"> NULL      </span>|</span><br><span class="line">|<span class="string"> 4  </span>|<span class="string"> Max   </span>|<span class="string"> 90000  </span>|<span class="string"> NULL      </span>|</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure>
<p>Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----------+</span></span><br><span class="line">| Employee |</span><br><span class="line"><span class="code">+----------+</span></span><br><span class="line">| Joe      |</span><br><span class="line"><span class="code">+----------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-2"><a href="#SQL__3A-2" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.Name <span class="keyword">as</span> Employee </span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> a </span><br><span class="line"><span class="keyword">WHERE</span> a.ManagerId <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">NULL</span> <span class="keyword">AND</span> a.Salary &gt; </span><br><span class="line">(<span class="keyword">SELECT</span> b.Salary </span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">WHERE</span> b.Id = a.ManagerId);</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-2"><a href="#Comment__3A-2" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题简单，不多解释。有 JOIN 的解法应该也行。</p>
<h3 id="182_-_Duplicate_Emails"><a href="#182_-_Duplicate_Emails" class="headerlink" title="182 . Duplicate Emails"></a>182 . Duplicate Emails</h3><p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line"><span class="code">+----+</span>---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line"><span class="code">+----+</span>---------+</span><br></pre></td></tr></table></figure>
<p>For example, your query should return the following for the above table:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+---------+</span></span><br><span class="line">| Email   |</span><br><span class="line"><span class="code">+---------+</span></span><br><span class="line">| a@b.com |</span><br><span class="line"><span class="code">+---------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-3"><a href="#SQL__3A-3" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT Person.Email </span><br><span class="line"><span class="keyword">FROM</span> Person </span><br><span class="line">GROUP BY Person.Email </span><br><span class="line">HAVING COUNT(Person.Id) &gt; 1;</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-3"><a href="#Comment__3A-3" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题简单的不能再简单了，然而还是有一个蛋疼的坑：<strong>COUNT 的用法</strong>。这题如果你在 <strong>having COUNT()</strong> 括号中写 * 号，是不能通过的，原因就在于 <strong>COUNT(*)</strong> 统计的是表中数据的总条数，而 <strong>COUNT(Person.Id)</strong> 统计的则是除去表中 Id 不等于 NULL 的记录的总条数。因此很可能它有某个 testcase 中有 NULL 的数据来考察对于 COUNT 的理解吧。</p>
<h3 id="183_-_Customers_Who_Never_Order"><a href="#183_-_Customers_Who_Never_Order" class="headerlink" title="183 . Customers Who Never Order"></a>183 . Customers Who Never Order</h3><p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>
<p>Table: <code>Customers</code>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>-------+</span><br><span class="line">| Id | Name  |</span><br><span class="line"><span class="code">+----+</span>-------+</span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line"><span class="code">+----+</span>-------+</span><br></pre></td></tr></table></figure>
<p>Table: <code>Orders</code>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------------+</span><br><span class="line">| Id | CustomerId |</span><br><span class="line"><span class="code">+----+</span>------------+</span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line"><span class="code">+----+</span>------------+</span><br></pre></td></tr></table></figure>
<p>Using the above tables as example, return the following:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-----------+</span></span><br><span class="line">| Customers |</span><br><span class="line"><span class="code">+-----------+</span></span><br><span class="line">| Henry     |</span><br><span class="line">| Max       |</span><br><span class="line"><span class="code">+-----------+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-4"><a href="#SQL__3A-4" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.Name <span class="keyword">AS</span> Customers </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> a </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders <span class="keyword">AS</span> b </span><br><span class="line"><span class="keyword">ON</span> (a.Id = b.CustomerId) </span><br><span class="line"><span class="keyword">WHERE</span> a.Id <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> b.CustomerId <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-4"><a href="#Comment__3A-4" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题如果不用 Left Join 而用 Not in 的话也是可以的，只是效率方面 Not in 的话运行时间是排在百分之八十多，如果用了上面的 Left Join 则会好一些 （ runtime 每次运行会有微妙的差距，可能几十毫秒就是百分之几十的差距）。</p>
<p><img src="https://ooo.0o0.ooo/2016/08/26/57bfeb47b9186.png" alt=""></p>
<h3 id="185_-_Department_Top_Three_Salaries"><a href="#185_-_Department_Top_Three_Salaries" class="headerlink" title="185 . Department Top Three Salaries"></a>185 . Department Top Three Salaries</h3><p>The <code>Employee</code> table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">|<span class="string"> Id </span>|<span class="string"> Name  </span>|<span class="string"> Salary </span>|<span class="string"> DepartmentId </span>|</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string"> Joe   </span>|<span class="string"> 70000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">|<span class="string"> 2  </span>|<span class="string"> Henry </span>|<span class="string"> 80000  </span>|<span class="string"> 2            </span>|</span><br><span class="line">|<span class="string"> 3  </span>|<span class="string"> Sam   </span>|<span class="string"> 60000  </span>|<span class="string"> 2            </span>|</span><br><span class="line">|<span class="string"> 4  </span>|<span class="string"> Max   </span>|<span class="string"> 90000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">|<span class="string"> 5  </span>|<span class="string"> Janet </span>|<span class="string"> 69000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">|<span class="string"> 6  </span>|<span class="string"> Randy </span>|<span class="string"> 85000  </span>|<span class="string"> 1            </span>|</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure>
<p>The <code>Department</code> table holds all departments of the company.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line"><span class="code">+----+</span>----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line"><span class="code">+----+</span>----------+</span><br></pre></td></tr></table></figure>
<p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows.</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">|<span class="string"> Department </span>|<span class="string"> Employee </span>|<span class="string"> Salary </span>|</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">|<span class="string"> IT         </span>|<span class="string"> Max      </span>|<span class="string"> 90000  </span>|</span><br><span class="line">|<span class="string"> IT         </span>|<span class="string"> Randy    </span>|<span class="string"> 85000  </span>|</span><br><span class="line">|<span class="string"> IT         </span>|<span class="string"> Joe      </span>|<span class="string"> 70000  </span>|</span><br><span class="line">|<span class="string"> Sales      </span>|<span class="string"> Henry    </span>|<span class="string"> 80000  </span>|</span><br><span class="line">|<span class="string"> Sales      </span>|<span class="string"> Sam      </span>|<span class="string"> 60000  </span>|</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-5"><a href="#SQL__3A-5" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name <span class="keyword">as</span> Department, a.Name <span class="keyword">as</span> Employee, a.Salary <span class="keyword">as</span> Salary </span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">as</span> a,Department <span class="keyword">as</span> d </span><br><span class="line"><span class="keyword">where</span> (<span class="keyword">select</span> <span class="built_in">count</span>(b.Salary) </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">e</span>.Salary <span class="keyword">as</span> Salary,<span class="built_in">e</span>.DepartmentId <span class="keyword">as</span> DepartmentId </span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">as</span> <span class="built_in">e</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="built_in">e</span>.Salary,<span class="built_in">e</span>.DepartmentId) <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">where</span> b.Salary &gt; a.Salary <span class="keyword">and</span> b.DepartmentId = a.DepartmentId) &lt;= <span class="number">2</span> <span class="keyword">and</span> d.Id = a.DepartmentId </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.DepartmentId,a.Salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-5"><a href="#Comment__3A-5" class="headerlink" title="Comment :"></a>Comment :</h4><p>变态。这道题无愧是 Hard。上面这个解法虽然套了三层 Select ，但是它的运行时间都能排在前 15%</p>
<p><img src="https://ooo.0o0.ooo/2016/08/26/57bfea0296548.jpeg" alt=""></p>
<p>可见这题本来就是计算量很大的一次查询。主要考察了 <strong>group by  的用法</strong>，group by 的用法其实比较特殊，比如 Salary 相同但其他列不同的情况下，如果 group by Salary，那就只能 select salary，否则 salary 相同的项目会无法合并。（当然在你自己的 MySQL 环境下你可以配一个 full group mode 参数来强制允许 MySQL 能够执行这样的语句）因此在最中间我们先是将用户分组排序过后的数据分进一个单独的表 b ，这里的数据由于 group by Salary 和 DepartmentId，因此同部门相同 Salary 的数据已经被合并到一项去了，那么接着就确认当前同部门的工资比自己高的等级是否小于 3 个，如果是的话就取出来。</p>
<p><em>PS . 这句 SQL 主要就是长长长，其实也没什么 = =</em></p>
<h3 id="196_-_Delete_Duplicate_Emails"><a href="#196_-_Delete_Duplicate_Emails" class="headerlink" title="196 . Delete Duplicate Emails"></a>196 . Delete Duplicate Emails</h3><p>Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its <em>smallest</em> <strong>Id</strong>.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line">Id is the primary key column for this table.</span><br></pre></td></tr></table></figure>
<p>For example, after running your query, the above <code>Person</code> table should have the following rows:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line"><span class="code">+----+</span>------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line"><span class="code">+----+</span>------------------+</span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-6"><a href="#SQL__3A-6" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Person <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ( </span><br><span class="line"><span class="keyword">select</span> b.Id</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> Person) <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line"><span class="keyword">select</span> d.* </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> Person) <span class="keyword">as</span> d </span><br><span class="line"><span class="keyword">where</span> d.Id &lt; b.Id <span class="keyword">and</span> b.Email = d.Email)) <span class="keyword">as</span> <span class="keyword">test</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-6"><a href="#Comment__3A-6" class="headerlink" title="Comment :"></a>Comment :</h4><p>这题考察的是 <strong>delete + where + in</strong> 的套路。delete where in 后面跟着的 select 里面的表不能是 delete 的 target，这个规则 delete 和 update 同理，要在 delete where in 后面加上 target 表的查询，你就需要套一层 select * … as … 就可以了。效率略低，但是实用。</p>
<h3 id="197_-_Rising_Temperature"><a href="#197_-_Rising_Temperature" class="headerlink" title="197 . Rising Temperature"></a>197 . Rising Temperature</h3><p>Given a <code>Weather</code> table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+---------+</span>------------<span class="code">+------------------+</span></span><br><span class="line">| Id(INT) | Date(DATE) | Temperature(INT) |</span><br><span class="line"><span class="code">+---------+</span>------------<span class="code">+------------------+</span></span><br><span class="line">|       1 | 2015-01-01 |               10 |</span><br><span class="line">|       2 | 2015-01-02 |               25 |</span><br><span class="line">|       3 | 2015-01-03 |               20 |</span><br><span class="line">|       4 | 2015-01-04 |               30 |</span><br><span class="line"><span class="code">+---------+</span>------------<span class="code">+------------------+</span></span><br></pre></td></tr></table></figure>
<p>For example, return the following Ids for the above Weather table:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span></span><br><span class="line">| Id |</span><br><span class="line"><span class="code">+----+</span></span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line"><span class="code">+----+</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL__3A-7"><a href="#SQL__3A-7" class="headerlink" title="SQL :"></a>SQL :</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.Id </span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">AS</span> a </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> b.Temperature </span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">AS</span> b </span><br><span class="line"><span class="keyword">WHERE</span> b.Date = <span class="keyword">SUBDATE</span>(a.Date,<span class="number">1</span>) <span class="keyword">and</span> b.Temperature &lt; a.Temperature);</span><br></pre></td></tr></table></figure>
<h4 id="Comment__3A-7"><a href="#Comment__3A-7" class="headerlink" title="Comment :"></a>Comment :</h4><p>此题又是看起来简单的不能再简单了。然而坑就在 Date 类型的数据操作上，第一，几乎少有人在实际生产环境中用 Date 这种不靠谱的数据格式，我还没见过谁生产环境不用时间戳的 = =，第二，这个坑谁知道啊…… Date 提供了加减的操作，看起来你好像可以直接 update 一个 date + 1 等于第二天的日期，然而碰到月份的边界这个加减就挂了啊（黑人问号.jpg） 碰到 01-01，减 1 之后等于 01-00，因此其实 SQL 是有日期操作<strong>函数</strong>的， SUBDATE(DATE, INTERVAL) 就可以实现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>偶然被 Cee 酱吸引打开了 Leetcode，这个大一的时候觉得自己一辈子都不会去做的事情……居然。发现 OJ 竟然有 Database 模块了，想当年大学学数据库的时候最]]>
    </summary>
    
      <category term="Leetcode" scheme="http://sergiochan.github.io/tags/Leetcode/"/>
    
      <category term="MySQL" scheme="http://sergiochan.github.io/tags/MySQL/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Photon 在 Unity 里快速搭建一个多人联机游戏]]></title>
    <link href="http://sergiochan.github.io/2016/08/18/%E4%BD%BF%E7%94%A8-Photon-%E5%9C%A8-Unity-%E9%87%8C%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E8%81%94%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    <id>http://sergiochan.github.io/2016/08/18/使用-Photon-在-Unity-里快速搭建一个多人联机游戏/</id>
    <published>2016-08-18T08:17:02.000Z</published>
    <updated>2016-08-24T15:39:42.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>如何最快的搭建一个 Unity 上的多人游戏？答案也许是自己搭建一个游戏服务器，也许是 LAN 解决方案，但是最快的解决方案还是使用成熟的第三方后端服务，我找到了 <a href="https://www.photonengine.com/en-US/Photon" target="_blank" rel="external">Photon</a>，一个看起来不错最后证实也挺靠谱的游戏后端解决方案。</p>
<p>一个游戏服务器，最主要的就是对不同参与者的事件同步和世界状态的同步，所以根本还是在于和服务器的长连接上，至于游戏中的用户体系，积分体系，货币体系这些，就是属于大后端的范畴了，也是可以独立于游戏同步服务器存在的系统。</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>首先你需要集成 <strong>Photon SDK For Unity</strong>，下载地址在<a href="https://www.photonengine.com/en-US/Realtime/Download" target="_blank" rel="external">这里</a>。</p>
<p><img src="/image/photon_1.png" alt="图1"> </p>
<p>你需要将下载下来的 <code>PhotoAssets</code> 中的所有文件都拖到你的项目的 <code>Assets</code> 文件夹里面，注意在 <code>Plugins</code> 里面有两个 <code>Photon3Unity3D.dll</code>，需要将 <code>Metro</code> 文件夹删掉，保留一个，否则在 Unity 编译的时候会报错。</p>
<p>拖进去之后只要 Unity 中 Compile 没有问题那第一步就大功告成了。</p>
<h3 id="u811A_u672C_u521B_u5EFA"><a href="#u811A_u672C_u521B_u5EFA" class="headerlink" title="脚本创建"></a>脚本创建</h3><p>创建一个你用来维护游戏网络逻辑的脚本，例如命名为 <code>GameNetworkClient.cs</code>，然后你需要在头部加上这几个引用：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> ExitGames.<span class="built_in">Client</span>.Photon;</span><br><span class="line"><span class="keyword">using</span> ExitGames.<span class="built_in">Client</span>.Photon.LoadBalancing;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> Hashtable = ExitGames.<span class="built_in">Client</span>.Photon.Hashtable;</span><br></pre></td></tr></table></figure>
<p>接着声明一个私有的 <code>LoadBalancingClient</code>对象，你的脚本中的所有网络逻辑都会通过这个 <code>client</code> 对象来发起和回调。我们这样在 Start 中初始化 <code>client</code> 对象：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">client</span> = <span class="keyword">new</span> LoadBalancingClient();</span><br><span class="line"><span class="keyword">client</span>.AppId = <span class="string">"&#123;你的 App_id&#125;"</span>;  </span><br><span class="line"><span class="keyword">client</span>.OnStateChangeAction += <span class="keyword">this</span>.OnStateChanged;</span><br><span class="line"><span class="keyword">client</span>.OnOpResponseAction += <span class="keyword">this</span>.OnRespAction;</span><br><span class="line"><span class="keyword">client</span>.OnEventAction += <span class="keyword">this</span>.OnEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">client</span>.ConnectToRegionMaster(<span class="string">"asia"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你的 App_id 可以在 Photon 官网注册完免费账户后在账户详情页获取，免费的账户拥有 <strong>20</strong> 个同时在线人数的限额，对于小范围好友间的游戏和测试足够了。</p>
</blockquote>
<p>其中，最后一行代码就是 <code>client</code> 去连接 MasterServer 的方法，这里面传入的参数要根据你的游戏所在地区来确定， Photon 在全球有很多分散的数据中心，因此支持很多区域的连接，具体支持的地区和代码如下：</p>
<table>
<thead>
<tr>
<th>Region</th>
<th>Hosted in</th>
<th>Token</th>
</tr>
</thead>
<tbody>
<tr>
<td>Asia</td>
<td>Singapore</td>
<td>asia</td>
</tr>
<tr>
<td>Australia</td>
<td>Melbourne</td>
<td>au</td>
</tr>
<tr>
<td>Canada, East</td>
<td>Montreal</td>
<td>cae</td>
</tr>
<tr>
<td>Europe</td>
<td>Amsterdam</td>
<td>eu</td>
</tr>
<tr>
<td>Japan</td>
<td>Tokyo</td>
<td>jp</td>
</tr>
<tr>
<td>South America</td>
<td>Sao Paulo</td>
<td>sa</td>
</tr>
<tr>
<td>USA, East</td>
<td>Washington</td>
<td>us</td>
</tr>
<tr>
<td>USA, West</td>
<td>San José</td>
<td>usw</td>
</tr>
</tbody>
</table>
<p>所以在这里我改成了 <code>asia</code>，事实证明新加坡的服务器是比较稳定的。</p>
<h3 id="u72B6_u6001_u7EF4_u62A4"><a href="#u72B6_u6001_u7EF4_u62A4" class="headerlink" title="状态维护"></a>状态维护</h3><p><code>client</code> 的状态主要就是根据上面初始化的时候给的三个 Action 来维护的，你需要在你的脚本里为这三个 Action 都加上你自己的 Handler。当然，如果你想按照他的 demo 里示范的那样去继承 <code>client</code> 并且 override 这三个 Action 的回调都是可以的。</p>
<h4 id="OnStateChanged"><a href="#OnStateChanged" class="headerlink" title="OnStateChanged"></a>OnStateChanged</h4><p>返回的是一个 <code>ClientState</code> 枚举值，主要就是一些 client 状态的值，例如</p>
<p> <code>connecting</code>，<code>connected</code>，<code>joining</code>之类的。</p>
<h4 id="OnRespAction"><a href="#OnRespAction" class="headerlink" title="OnRespAction"></a>OnRespAction</h4><p>返回的是一个 <code>OperationResponse</code> 对象，它会在每次你用 <code>client</code> 对象调用一些方法并且获得 response 之后调用，分别有下面这些类型的 Operation:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OperationCode</span> &#123;</span><br><span class="line">        [<span class="meta">Obsolete(<span class="meta-string">"Exchanging encrpytion keys is done internally in the lib now. Don't expect this operation-result."</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> ExchangeKeysForEncryption = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(255) Code for OpJoin, to get into a room.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Join = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(230) Authenticates this peer and connects to a virtual application<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Authenticate = <span class="number">230</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(229) Joins lobby (on master)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> JoinLobby = <span class="number">229</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(228) Leaves lobby (on master)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> LeaveLobby = <span class="number">228</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(227) Creates a game (or fails if name exists)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> CreateGame = <span class="number">227</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(226) Join game (by name)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> JoinGame = <span class="number">226</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(225) Joins random game (on master)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> JoinRandomGame = <span class="number">225</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public const byte CancelJoinRandom = 224; // obsolete, cause JoinRandom no longer is a "process". now provides result immediately</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(254) Code for OpLeave, to get out of a room.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Leave = (<span class="keyword">byte</span>)<span class="number">254</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(253) Raise event (in a room, for other actors/players)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> RaiseEvent = (<span class="keyword">byte</span>)<span class="number">253</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(252) Set Properties (of room or actor/player)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> SetProperties = (<span class="keyword">byte</span>)<span class="number">252</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(251) Get Properties<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GetProperties = (<span class="keyword">byte</span>)<span class="number">251</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(248) Operation code to change interest groups in Rooms (Lite application and extending ones).<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> ChangeGroups = (<span class="keyword">byte</span>)<span class="number">248</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(222) Request the rooms and online status for a list of friends (by name, which should be unique).<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> FindFriends = <span class="number">222</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(221) Request statistics about a specific list of lobbies (their user and game count).<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GetLobbyStats = <span class="number">221</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(220) Get list of regional servers from a NameServer.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GetRegions = <span class="number">220</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(219) WebRpc Operation.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> WebRpc = <span class="number">219</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，例如 <code>rasieEvent</code>，<code>setProperties</code> 或者加入离开游戏这些请求都是会有服务器的 response 的，你可以根据返回对象的 <code>ReturnCode</code> 来判断请求是否成功并且是否执行一些错误后的处理，<code>ReturnCode</code> 为 0 成功，不为 0 则失败，如果需要也可以从 <code>DebugMessage</code> 中获取错误提示信息。</p>
<h4 id="OnEventAction"><a href="#OnEventAction" class="headerlink" title="OnEventAction"></a><strong>OnEventAction</strong></h4><p>返回的是一个 <code>EventData</code> 对象，它会在每次 <code>client</code> 接收到新的 Event 的时候调用，具体的 Event 类型根据<code>EventData</code> 的 <code>EventCode</code> 来确定，分别有下面这些类型的 <code>EventCode</code>:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventCode</span> &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(230) Initial list of RoomInfos (in lobby on Master)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GameList = <span class="number">230</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(229) Update of RoomInfos to be merged into "initial" list (in lobby on Master)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> GameListUpdate = <span class="number">229</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(228) Currently not used. State of queueing in case of server-full<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> QueueState = <span class="number">228</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(227) Currently not used. Event for matchmaking<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Match = <span class="number">227</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(226) Event with stats about this application (players, rooms, etc)<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> AppStats = <span class="number">226</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(224) This event provides a list of lobbies with their player and game counts.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> LobbyStats = <span class="number">224</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(210) Internally used in case of hosting by Azure<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Obsolete(<span class="meta-string">"TCP routing was removed after becoming obsolete."</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> AzureNodeInfo = <span class="number">210</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(255) Event Join: someone joined the game. The new actorNumber is provided as well as the properties of that actor (if set in OpJoin).<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Join = (<span class="keyword">byte</span>)<span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(254) Event Leave: The player who left the game can be identified by the actorNumber.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> Leave = (<span class="keyword">byte</span>)<span class="number">254</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(253) When you call OpSetProperties with the broadcast option "on", this event is fired. It contains the properties being set.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> PropertiesChanged = (<span class="keyword">byte</span>)<span class="number">253</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(253) When you call OpSetProperties with the broadcast option "on", this event is fired. It contains the properties being set.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Obsolete(<span class="meta-string">"Use PropertiesChanged now."</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> SetProperties = (<span class="keyword">byte</span>)<span class="number">253</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(252) When player left game unexpected and the room has a playerTtl &gt; 0, this event is fired to let everyone know about the timeout.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Obsolete. Replaced by Leave. public const byte Disconnect = LiteEventCode.Disconnect;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(251) Sent by Photon Cloud when a plugin-call or webhook-call failed. Usually, the execution on the server continues, despite the issue. Contains: ParameterCode.Info.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;seealso cref="https://doc.photonengine.com/en/realtime/current/reference/webhooks"/&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> ErrorInfo = <span class="number">251</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>(250) Sent by Photon whent he event cache slice was changed. Done by OpRaiseEvent.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">byte</span> CacheSliceChanged = <span class="number">250</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>EventCode</code> 你是可以自己定义的，这个 code 是个 <strong>byte 类型的整数</strong>，因此不能大于255，Photon 将从 0 开始的一大段值域都留给开发者用来自定义事件了。Photon 默认提供了 <code>GameList</code>，或者说 RoomList 的功能，你可以创建 <code>Room</code> 并且加入，<code>Room</code> 也有他自己的 Option，可以作为 Lobby，也就是所有人默认进入的 <code>Room</code>，当然也可以根据各种条件来查找 <code>Room</code>。</p>
<p>这里的 <strong>253 PropertiesChanged</strong> 是一个非常重要的 Event，在上面我提到过，联机游戏的后端最重要的部分之一就是世界状态的同步，在这里也就是<strong>房间的状态 Room Properties</strong>，因此在 Photon SDK 中，当你调用 <code>client</code> 对当前加入的 <code>Room</code> 的某个属性做出了改变，这就会产生一个事件通知到整个 <code>Room</code> 里的所有玩家，这通常用来同步一些全局的属性，例如光线，地形，怪物的血量之类的。</p>
<p>当然，你还可以自定义 Event，在我实现的 demo 中我就是用到了自定义 Event 来告知其他玩家我的状态。比如，整个地图 （可以看做就是一个 <code>Room</code>）中的玩家列表和位置是可以用全局状态来同步的，但是例如单个玩家的一些事件（使用物品，使用技能之类的）可能就需要由发起的用户向全 <code>Room</code> 的其他玩家发送一个同步事件。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte </span>eventCode = <span class="number">1</span><span class="comment">; </span></span><br><span class="line">Hashtable evData = new Hashtable ()<span class="comment">; </span></span><br><span class="line">evData.<span class="keyword">Add </span>(<span class="string">"player_id"</span>, random_playerid)<span class="comment">;</span></span><br><span class="line">evData.<span class="keyword">Add </span>(<span class="string">"pos_x"</span>, position.x)<span class="comment">;</span></span><br><span class="line">evData.<span class="keyword">Add </span>(<span class="string">"pos_y"</span>, position.y)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool </span>sendReliable = true<span class="comment">; </span></span><br><span class="line">if (isConnected) &#123;</span><br><span class="line">	client.OpRaiseEvent (eventCode, evData, sendReliable, RaiseEventOptions.Default)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后这个事件就会在除了发送者自己的其他玩家的客户端被回调。</p>
</blockquote>
<p><strong>这个时候收到的数据包怎么解出来呢？</strong></p>
<p>最后再说说坑了我半天的 <code>EventData</code> 中的数据抽取，在 <code>EventData</code> 中的数据格式十分蛋疼，例如上面这段代码里发送的数据，当你在其他客户端收到的时候，它的数据其实是存在 <code>EventData</code> 的 <code>Parameters</code> 这个属性变量里面，这是一个 <code>Dictionary&lt;byte,object&gt;</code> 类型的对象，通过 <code>ParameterCode.Data</code> 这个 key 将 data 取出来之后，里面才是我们传入的 Hashtable ，然而现在已经变成了一个 <code>Dictionary&lt;object,object&gt;</code> 对象了。在没有仔细查看源码的情况下，它的官方 demo 和文档并没有提及如何解包 <code>EventData</code> ,因此我是通过 Debug 的方式才最终摸清了里面的数据格式。当然后来又看了下它的头文件，才看到 <code>ParameterCode.Data</code> 😂。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>如何最快的搭建一个 Unity 上的多人游戏？答案也许是自己搭建一个游戏服务器，也许是 LAN 解决方案，但是最快的解决方案还是使用成熟的第三方后端服务，我找到了 <a hr]]>
    </summary>
    
      <category term="Photon" scheme="http://sergiochan.github.io/tags/Photon/"/>
    
      <category term="Unity" scheme="http://sergiochan.github.io/tags/Unity/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AVAudioPlayer的几个细节]]></title>
    <link href="http://sergiochan.github.io/2016/08/13/AVAudioPlayer%E7%9A%84%E5%87%A0%E4%B8%AA%E7%BB%86%E8%8A%82/"/>
    <id>http://sergiochan.github.io/2016/08/13/AVAudioPlayer的几个细节/</id>
    <published>2016-08-13T01:24:52.000Z</published>
    <updated>2016-08-13T01:25:39.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天在做 iOS 上的声波传输的时候，倒是遇到了几个和  AVAudioPlayer 有关的有趣问题，这种问题一般情况下我们都注意不到，只要踩过了才知道。</p>
<h3 id="u5173_u4E8E_PCM_Data"><a href="#u5173_u4E8E_PCM_Data" class="headerlink" title="关于 PCM Data"></a>关于 PCM Data</h3><p><code>AVAudioPlayer</code> 有一个初始化方法 <code>initWithData:error:</code>，这个方法的 API 说明是</p>
<blockquote>
<p>/<em> all data must be in the form of an audio file understood by CoreAudio </em>/</p>
</blockquote>
<p>在苹果的文档里，我们看到 AVAudioPlayer并不能支持 Stream 播放，它支持的文件格式有下面这些：</p>
<table>
<thead>
<tr>
<th>Format name</th>
<th>Format filename extensions</th>
</tr>
</thead>
<tbody>
<tr>
<td>AIFF</td>
<td><code>.aif</code>, <code>.aiff</code></td>
</tr>
<tr>
<td>CAF</td>
<td><code>.caf</code></td>
</tr>
<tr>
<td>MPEG-1, layer 3</td>
<td><code>.mp3</code></td>
</tr>
<tr>
<td>MPEG-2 or MPEG-4 ADTS</td>
<td><code>.aac</code></td>
</tr>
<tr>
<td>MPEG-4</td>
<td><code>.m4a</code>, <code>.mp4</code></td>
</tr>
<tr>
<td>WAV</td>
<td><code>.wav</code></td>
</tr>
</tbody>
</table>
<p>Stream 类型的音乐流只能被 AudioQueue 或者 AudioUnit 支持。因此要用 <code>AVAudioPlayer</code> 来播放 PCM 数据的话，注意要为这个 PCM 包加上 WAV 的 HEADER，然后将完整的 NSData 传给它。</p>
<h3 id="u5173_u4E8E_Play"><a href="#u5173_u4E8E_Play" class="headerlink" title="关于 Play"></a>关于 Play</h3><p><code>AVAudioPlayer</code> 还有个有趣的现象，我暂时没有找到官方文档的证据，那就是它的 <code>play</code> 不会对自身有一个引用来保持自己是活着的。<strong>只要它的父类之上有一个对象被释放了，那它也就被一起释放掉了</strong>。因此无论你是在第一层直接声明 self.audioPlayer play 还是 self.A.audioPlayer.play ，它的最上层父类必须有一个和 VC 相关或者全局相关的强引用，否则就会在 play 的时候就已经被释放掉了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天在做 iOS 上的声波传输的时候，倒是遇到了几个和  AVAudioPlayer 有关的有趣问题，这种问题一般情况下我们都注意不到，只要踩过了才知道。</p>
<h3 i]]>
    </summary>
    
      <category term="AVAudioPlayer" scheme="http://sergiochan.github.io/tags/AVAudioPlayer/"/>
    
      <category term="AVFoundation" scheme="http://sergiochan.github.io/tags/AVFoundation/"/>
    
      <category term="iOS菜鸟心得" scheme="http://sergiochan.github.io/categories/iOS%E8%8F%9C%E9%B8%9F%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的 GayHub - 2016]]></title>
    <link href="http://sergiochan.github.io/2016/07/14/%E6%88%91%E7%9A%84-GayHub-2016/"/>
    <id>http://sergiochan.github.io/2016/07/14/我的-GayHub-2016/</id>
    <published>2016-07-14T11:05:27.000Z</published>
    <updated>2016-07-14T11:08:08.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>As the number of my repos keeps increasing, I have to create this new repo in order to create some kinds of <strong>index</strong> for all the repos that I have written.</p>
</blockquote>
<p><img src="/image/2016-gayhub.png" alt=""></p>
<h1 id="Get_to_know_me"><a href="#Get_to_know_me" class="headerlink" title="Get to know me"></a>Get to know me</h1><p>Sergio Chan, Born Hacker, Currently works at <em>RavenTech. Inc</em> as a Researcher and Hacker</p>
<p><a href="http://sergiochan.xyz" target="_blank" rel="external">My blog</a>  |  <a href="https://cn.linkedin.com/pub/sergio-chan/42/14b/a6" target="_blank" rel="external">Linkedin</a> | <a href="http://weibo.com/3089081773/profile?topnav=1&amp;wvr=6" target="_blank" rel="external">Weibo</a> </p>
<h1 id="Below__08is_the_list_of_most_of_my_repos"><a href="#Below__08is_the_list_of_most_of_my_repos" class="headerlink" title="Below is the list of most of my repos"></a>Below is the list of most of my repos</h1><blockquote>
<p>下面是我大部分的个人仓库的分类列表</p>
</blockquote>
<h3 id="Algorithm_Test__u7B97_u6CD5_u6D4B_u8BD5_u5B9E_u73B0_u7C7B"><a href="#Algorithm_Test__u7B97_u6CD5_u6D4B_u8BD5_u5B9E_u73B0_u7C7B" class="headerlink" title="Algorithm Test 算法测试实现类"></a>Algorithm Test 算法测试实现类</h3><ul>
<li><a href="https://github.com/SergioChan/Monty-Hall-Problem-Swift" target="_blank" rel="external">Monty-Hall-Problem</a> 三门问题的Swift验证演示Playground</li>
<li><a href="https://github.com/SergioChan/LinkedListSwift" target="_blank" rel="external">LinkedListSwift</a> Swift写的链表实现和各种基本操作</li>
<li><a href="https://github.com/SergioChan/SCPythonSudoku" target="_blank" rel="external">SCPythonSudoku</a> A Python Sudoku solved program. Python写的深度优先搜索解数独程序</li>
</ul>
<h3 id="Kit_or_Framework_for_iOS__u5B9E_u7528_u63A7_u4EF6_u7C7B"><a href="#Kit_or_Framework_for_iOS__u5B9E_u7528_u63A7_u4EF6_u7C7B" class="headerlink" title="Kit or Framework for iOS 实用控件类"></a>Kit or Framework for iOS 实用控件类</h3><ul>
<li><a href="https://github.com/SergioChan/SCBlueToothKit" target="_blank" rel="external">SCBlueToothKit</a> Blue Tooth Kit based on Core BlueTooth brings you to fly dealing with Blue Tooth development</li>
<li><a href="https://github.com/SergioChan/SCAwesomeNetworking" target="_blank" rel="external">SCAwesomeNetworking</a> An optimized networking framework based on AFNetworking and ProtoBuffer</li>
<li><a href="https://github.com/SergioChan/ImagePicker" target="_blank" rel="external">SCImagePicker</a> A highly encapsulated and fully functional open-source image picker written in Objc based on Photokit. Including album list, asset list, selection preview, camera and short video taking</li>
<li><a href="https://github.com/SergioChan/SCTableViewCell" target="_blank" rel="external">SCTableViewCell</a> Swipe-to-Delete Effects like iOS Native Mail App。一个模仿iOS8中的邮箱里面的cell删除动效以及滑动右侧菜单按钮效果的开源库</li>
<li><a href="https://github.com/SergioChan/SCNavigationControlCenter" target="_blank" rel="external">SCNavigationControlCenter</a> This is an advanced navigation control center on iOS that can allow you to navigate to whichever view controller you want. iOS上的改进的导航栏控制中心。</li>
<li><a href="https://github.com/SergioChan/SCActivityIndicatorView" target="_blank" rel="external">SCActivityIndicatorView</a> An indicator view providing you more freedom to control and customize it.一个魔性的菊花控件，助你摆脱系统菊花的各种烦恼</li>
<li><a href="https://github.com/SergioChan/SCRealm2SQLORM" target="_blank" rel="external">SCRealm2SQLORM</a> A realm ORM kit transferring realm usage to traditional SQLite usage. Just for learning and practicing.这是一个简单的realm的类似sqlite的数据库接口库。可以给熟悉sql语法，新入门realm的新手参考</li>
<li><a href="https://github.com/SergioChan/SCTagWriteView" target="_blank" rel="external">SCTagWriteView</a> An input custom view providing you ability to add and remove tags</li>
<li><a href="https://github.com/SergioChan/TUCalender" target="_blank" rel="external">TUCalender</a> 根据业务需要基于JTCalendar改写的日历控件</li>
<li><a href="https://github.com/SergioChan/UILabel-AttributedText" target="_blank" rel="external">UILabel-AttributedText</a> This is a solution category for UILabel to deal with the issue about special chracters.</li>
</ul>
<h3 id="Test_on_iOS_Basic_Frameworks_iOS_u57FA_u7840_u6846_u67B6_u7684_u6D4B_u8BD5_u5B9E_u73B0_u7C7B"><a href="#Test_on_iOS_Basic_Frameworks_iOS_u57FA_u7840_u6846_u67B6_u7684_u6D4B_u8BD5_u5B9E_u73B0_u7C7B" class="headerlink" title="Test on iOS Basic Frameworks iOS基础框架的测试实现类"></a>Test on iOS Basic Frameworks iOS基础框架的测试实现类</h3><ul>
<li><a href="https://github.com/SergioChan/RunloopTest" target="_blank" rel="external">RunloopTest</a>  This is a demo project for one of my blogs</li>
<li><a href="https://github.com/SergioChan/id-NSObjectDemo" target="_blank" rel="external">id-NSObjectDemo</a> This is a demo project for one of my blogs</li>
</ul>
<h3 id="Animations_on_iOS__u52A8_u753B_u7C7B"><a href="#Animations_on_iOS__u52A8_u753B_u7C7B" class="headerlink" title="Animations on iOS 动画类"></a>Animations on iOS 动画类</h3><ul>
<li><a href="https://github.com/SergioChan/SCTrelloNavigation" target="_blank" rel="external">SCTrelloNavigation</a> An iOS native implementation of a Trello Animated Navagation. iOS上类似trello的导航动效控件实现。</li>
<li><a href="https://github.com/SergioChan/SCCatWaitingHUD" target="_blank" rel="external">SCCatWaitingHUD</a> This is a cute and simple loading HUD on iOS :-P 这是一个可爱清新简单的加载HUD控件</li>
<li><a href="https://github.com/SergioChan/SCCinemaAnimation" target="_blank" rel="external">SCCinemaAnimation</a>  An iOS native implementation of a Cinema Animation Application. iOS上电影购票的动效实现</li>
</ul>
<h3 id="Apps__u72EC_u7ACB_u5E94_u7528_u7C7B"><a href="#Apps__u72EC_u7ACB_u5E94_u7528_u7C7B" class="headerlink" title="Apps 独立应用类"></a>Apps 独立应用类</h3><ul>
<li><a href="https://github.com/SergioChan/SCSelfAgile" target="_blank" rel="external">SCSelfAgile</a> A Project for my daily life and well…obviously for fun.<strong>(未上架)</strong></li>
<li><a href="https://github.com/SergioChan/PasswordTerminator" target="_blank" rel="external">PasswordTerminator</a> Simple random password generator and manager. <strong>(已上架)</strong></li>
<li><a href="https://github.com/SergioChan/MorningHorn" target="_blank" rel="external">MorningHorn</a>  This is a warm and simple Alarm App.<strong>(已上架)</strong></li>
</ul>
<h3 id="Others__u5176_u4ED6_u7C7B"><a href="#Others__u5176_u4ED6_u7C7B" class="headerlink" title="Others 其他类"></a>Others 其他类</h3><ul>
<li><a href="https://github.com/SergioChan/SCTornadoTCP" target="_blank" rel="external">SCTornadoTCP</a> A TCP Server and Client based on tornado</li>
</ul>
<h1 id="Organizations"><a href="#Organizations" class="headerlink" title="Organizations"></a>Organizations</h1><blockquote>
<p>参与和发起的一些组织和信息</p>
</blockquote>
<h3 id="hACKbUSTER"><a href="#hACKbUSTER" class="headerlink" title="hACKbUSTER"></a><a href="https://github.com/hACKbUSTER" target="_blank" rel="external">hACKbUSTER</a></h3><p>A hack team for hackathons, consists of the best hackers and designers. Top requirement, top idea, top tech level.</p>
<ul>
<li><a href="https://github.com/hACKbUSTER/FixPlusPlus" target="_blank" rel="external">FixPlusPlus</a>  First Prize For SegmentFault Hackathon Beijing. FIX++ (FixPlusPlus) is a professional display solution for future guidelines and instruction manuals. 更专业的拆解拼装展示方案，可应用于乐高玩具，宜家家具，苹果电脑等领域。</li>
<li><a href="https://github.com/hACKbUSTER/Renaissance" target="_blank" rel="external">Renaissance</a> First Prize for Art Hackathon 2015 China, Data becomes music. 数据听觉化的尝试。</li>
<li><a href="https://github.com/hACKbUSTER/UberGuide-iOS" target="_blank" rel="external">UberGuide</a> Third Prize for Uber Hackathon China 2016. Source code for iOS client of UberGuide Project. 用Uber API 让背包客通过Uber探索新的城市和文化。</li>
<li><a href="https://github.com/hACKbUSTER/ProjectDaVinci" target="_blank" rel="external">ProjectDaVinci</a> First Prize of SegmentFault ✖️ AngelHack Shenzhen Hackathon 2016</li>
<li><a href="https://github.com/hACKbUSTER/ProjectM-SafariExtension" target="_blank" rel="external">ProjectM</a> First Prize of SegmentFault ✖️ AngelHack Beijing Hackathon 2016</li>
</ul>
<h3 id="Animatious"><a href="#Animatious" class="headerlink" title="Animatious"></a><a href="https://github.com/Animatious" target="_blank" rel="external">Animatious</a></h3><ul>
<li><a href="https://github.com/Animatious/awesome-animation" target="_blank" rel="external">awesome-animation</a> A great list of open sourced UI Motion Library produced by Animatious Group.</li>
</ul>
<h3 id="@Conf"><a href="#@Conf" class="headerlink" title="@Conf"></a><a href="https://github.com/atConf" target="_blank" rel="external">@Conf</a></h3><p>@Conf 团队，做开发者自己的技术大会</p>
<ul>
<li><a href="https://github.com/atConf/atswift-2016-resources" target="_blank" rel="external">atswift-2016</a> Resource files for atswift conference 2016, including keynote, pdf, source projects or playgrounds. 2016中国Swift开发者大会</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>As the number of my repos keeps increasing, I have to create this new repo]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[“人工智能”邪教]]></title>
    <link href="http://sergiochan.github.io/2016/05/28/%E2%80%9C%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E2%80%9D%E9%82%AA%E6%95%99/"/>
    <id>http://sergiochan.github.io/2016/05/28/“人工智能”邪教/</id>
    <published>2016-05-28T07:06:50.000Z</published>
    <updated>2016-08-25T01:51:20.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我觉得现在的不论是全社会还是整个互联网圈，都弥漫着一股对于人工智能的狂热崇拜，就像是一种人工智能邪教一样，深深地蛊惑着每一个圈外人或者是无知者的心智。大家都觉得，人工智能好牛逼啊，人工智能可以比人还聪明，人工智能可以做到一切。Excuse me？作为一个微小的人类你却妄想把自己幻想中的，注意是幻想中的造物主创造出来，Excuse me？这是一些算法能解决的吗？充其量，造出来的不过是深蓝，不过是Alpha Go这种在我看来<strong>只能定义为机器的所谓“智能”</strong>。</p>
<blockquote>
<p>这里你可以移步<a href="http://baike.baidu.com/link?url=EP2EGmEI_HCXGn-iz4sLNr8dtbOsZ-eL_tSmQSk_4GCmdw5yiS-gkmJgSyJtJi5HEKSna62nvccqNG98RL-e1xE-PZBWqT9QAmH00609Ho_" target="_blank" rel="external">百度百科</a>来看看什么是智能：</p>
<p>从感觉到记忆到思维这一过程，称为“智慧”，智慧的结果就产生了行为和语言，将行为和语言的表达过程称为“能力”，两者合称“智能”，将<strong>感觉、记忆、回忆、思维、语言、行为的整个过程称为智能过程</strong>，它是智力和能力的表现。它们分别又可以用“智商”和“能商”来描述其在个体中发挥智能的程度。“情商”可以调整智商和能商的正确发挥，或控制二者恰到好处地发挥它们的作用。</p>
<p>它的定义是：</p>
<p>智能及智能的本质是古今中外许多哲学家、脑科学家一直在努力探索和研究的问题，但至今仍然没有完全了解，以致智能的发生与物质的本质、宇宙的起源、生命的本质一起被列为自然界四大奥秘。</p>
<p>近些年来，随着脑科学、神经心理学等研究的进展，人们对人脑的结构和功能有了初步认识，但对整个神经系统的内部结构和作用机制，特别是脑的功能原理还没有认识清楚，有待进一步的探索。因此，<strong>很难对智能给出确切的定义</strong>。而在仿生和模拟、超级计算机方面也有其特定含义。</p>
</blockquote>
<p>我们先来想想人类和机器所不同的地方在哪，以及我们为什么莫名其妙会产生这种对于人工智能的狂热崇拜。首先，<strong>机器需要规范的输入</strong>，机器只会根据输入去得到输出，对，无论是工厂里的生产机器，亦或是计算机，说白了都是机器，他需要对应的输入来产生输出，因此，当输入不对的时候，机器就炸了。就像你不能把一盘菜端到Alpha Go面前让他尝尝是什么味道一样，所以它充其量就是个机器。那么什么是智能呢？可以这么说，<strong>就目前的人类认知来说，整个宇宙里，唯一具有智能的生物或者是物体，只有人类</strong>。因为<strong>智能包括了很复杂的语言，情感，道德认知体系</strong>，我们可以根据任意的输入，或者进一步说，我们的感官能够接受的全部格式，来理解，转化为我们甚至都不能理解的输入，最后产生输出。这种输入我们现在所能了解到的就是，他可能是一种激素，也可能是一种神经电流，最后的输出也是非常复杂多样化的，具体表现为<strong>行为</strong>，例如我可以现在在电脑上写下这些文字，这就是我的智能的一种输出。正是因为智能的高级，所以才产生了复杂的社会结构和科学体系，正是因为智能，才有了我们，才有了我们存在的意义。</p>
<p>那么，我们接下去理解这件事情。我们其实是在<strong>试图创造一个否定自己存在意义的事物</strong>。这无关造物主不造物主的事情，毕竟造物主只是个比喻，只是说，<strong>我们的存在正是由我们的智能自我定义的</strong>，但是当更高级的智能存在之后，世界会以“他们”的定义而存在，那么我们的存在的意义就不复存在了，这是一种很矛盾的悖论。当然，简易起来理解，就是一些科学家所担心的，既然有了“他们”，那我们就没有存在的必要了，“他们”迟早会把我们从这个世界上抹去。然而这也并不会构成什么实质性的威胁，就像蚂蚁在地球上不也活的好好的 =。= 我这么理解自然是更加的以我们人类自我出发的视角去思考的。</p>
<p>这里我忽然想到前几天和哥们聊到的一个非常有意思的新闻，讲的是俄罗斯还是哪有一个小伙因为大脑里某个运动控制中枢坏掉了，导致了下半身瘫痪还是什么，决定接受换头手术。我记得我也在百度新闻里看到过这个雷人的新闻，还说接受的那颗头来自于中国什么的。在这里我们不去考究新闻的真实性，我们就单纯的来思考，如果有一个人因为大脑的病变导致全身都不听使唤了，这时候他要接受换头手术，假设换了一个健康的头之后他的身体能够被新的头所控制，那么这个行为本身是不是二？<strong>我们的存在不是由我们的身体来定义的</strong>，医学上定义一个人的死亡也是以脑死亡，即意识的活动来判定一个“人”的死亡，所以这下就有趣了，我们忽然发现我们的存在是由我们的大脑来决定的，我们身体上的任何一个部件都可以更换，唯独大脑不能更换，即使你长得和之前一模一样，一旦换了脑袋，你也不存在了。所以我从这联想到了上一段我提到的否定自身存在意义的想法，这是类似的，我们可以更换眼睛，鼻子，身体的各个部位，用机器来代替，但是如果用人工智能来替代了大脑，那你就不存在了，因为<strong>他会以他的存在来定义你的存在</strong>。当然，这里我只是想进一步证明我们的大脑或者说我们的智能才是我们存在的意义，而非肉身。<strong>我们的存在正是因为我们的存在而定义的</strong>，所以这个问题才会没有答案。</p>
<p>回到实际，刨除玄学问题来说，虽然我们对于人工智能的实现有了一定把握，我们通过对大脑运行机制的“猜测”来设计出了神经网络，就像 Alpha Go 所实现的那样，通过不断地深度学习来让智能自我进化。但是，表面上一路坦途，语义理解，语音识别，光学识别，模式识别 blahblah，各种算法都有各种团队在不断的创新，然而，(也可能因为我是个在这方面的悲观主义者)，我认为我们离真正的研究透彻差了十万八千里，甚至我们的方向就不对。我可以随便举几个例子，用光学识别来实现各种面部识别，手势识别，且不说光线的问题，就说干扰源的问题，你怎么解决，我戴上人皮面具，我拿来几个仿真手的模型来混淆你，没有几家公司哪几个算法能做到这种地步的……因为人都会判断错误的东西，你妄想机器能够判断对，也就是说，我们总是觉得，我们一定要造出比自己牛逼的事物，对，没错，但是我们永远造不出识别能力比人类牛逼的事物，为什么？因为我们本身的认知就十分有限，我们受自身条件的限制，只能通过我们有限的感官来感知世界。我会展开解释这一点。当然，这里为了防止被喷，我需要加上一个先提条件，那就是在<strong>有限样本量的情况下，机器算法通过大量训练是可以超过人类的识别能力的</strong>，但是这是在有限样本量的情况下，现实生活中，除非你把世界上每一个人都算进样本里，否则你的算法只要稍微用在一个特征远离你的样本库的人身上，算法识别能力就会远低于人类。</p>
<p>其实当你仔细思考，你就会明白，人类对于人工智能的狂热其实是来自千百年以来人类对于自身各种感官和器官限制的一种恐惧或者说是对于更强的个体的一种追求。当我们发现所谓的进化在几千年里并没有让人们进化出一双火眼金睛，其实现在的人类对于自身的进化速度是十分的怀疑和担忧的。且不论生物学界对于进化论的不断质疑，如果你不承认对于整个种族的怀疑，你会发现几乎全部的围绕人工智能的讨论，都是集中在如何创造一个进化速度是我们人类的几千几万倍的智能。所以说，我们如今所看见和了解的几乎所有人工智能，无一例外都是对于人体一些机能和感官的加强，例如远场识别麦克风，满足了人们千里耳的生理限制；计算机，满足了人脑记忆机制的缺陷和运算能力的缺陷；还有各种红外，高清，全景摄像头，满足了人们视觉上的局限性，能够同时识别更多物体。（虽然在嗅觉和味觉上人类并没有什么不满足的，这是极其有趣的一点，人类反而对这两种感官十分的自得其乐 =。=）这里提到了计算机，我想你应该会承认，人脑的运算速度远没有计算机快，对吧？但那仅仅是局限于计算，人脑的可贵和重要之处在于理解和识别，而这一点正是现在所有的人工智能所欠缺的。几乎所有的看起来名气挺大的人工智能，拉出来，涉及到最核心的人脑中执行理解的这块区域，基本上都是在打哈哈。</p>
<p>从Siri，到Cortana，到谷歌前段时间推出的人工智能，再到亚马逊的Echo，他们无一例外都扮演着助理的角色，或者说，在有限的场景下做出有限的反应执行有限的操作，你会很经常的遇到Siri用奇怪的口气告诉你她在互联网上为你查到以下信息，这其实只是一个语音搜索，这只是在弥补人脑对于信息获取途径的缺乏以及信息的存储缺陷。如果有一天你的大脑能够连上互联网，你能够在你的思维里通过搜索引擎去搜索信息，我想，这些“人工智能“就已经可以去吃土了。所以问题的根源是在于我们对于信息获取的途径，在于我们对信息的存储。</p>
<p>除了所谓“快速”的信息获取，如今这些大厂搞出来的人工智能还有一些或多或少方便到人们的功能，对，这些都只能算是功能。例如可以控制智能家居，控制播放器，控制blahblah，给你定闹钟，也有一些格式比较规范的内容他们可以为你梳理，例如音乐，新闻，比赛的实时比分，这些内容在互联网上大多数都是以一些固定的格式存在，因此他可以实时的为你从互联网上去抓取这些信息。然而正是由于功能的固定，和语义理解的局限，目前的，我敢说所有，所有这类人工智能，其实<strong>都相当于一个语音输入的DOS机</strong>，而且这也是我为什么反感过多的炒作人工智能的原因之首。  </p>
<p>由于人类的表达方式是没有办法被穷举的，这个先提条件我们必须先达成一致，所以当你只是在用一个有限的指令集去实现这个所谓的智能，或者说在我们可以预见的未来都没有办法摆脱一个大的句式库或者语法库的形式，那么这个指令集其实就是DOS指令一样，是需要用户去学习的。你也许会说，任何交互都有学习成本，只不过现在的交互在不断演进罢了，所以学习成本不应该作为首要考虑的因素。确实，现在的语音助理类软件有非常多，我暂且不称呼他们为人工智能，用户接触他们的时间也已经挺长的了，我们也在慢慢发现我们适应了他们的局限性，我们会按照Siri能听懂的格式告诉他 几点几分给谁谁谁发短信，然后他问你要发送什么，然后你就一个字一个字的把你要发的短信读给她听。这种情况下，当你的所谓智能真正带来了一些方便的时候，用户其实是愿意也自动的会去付出这个学习成本的。但是，第一，这仍然不能称之为智能，第二，我们可能陷入了和DOS时代类似的误区。  </p>
<p>我到过一些在中国可以算得上三四线的城市，那么更别说中亚，非洲大片大片的地区了，这些地方的人口，虽然一直在享受着计算机时代带来的红利，但是同时他们也没办法过多的接触计算机。仔细想想，其实在讨论，追求和渴望，甚至去创造人工智能的人群里，基本上大多数人所从事的行业都和计算机相关，或者说日常较为频繁的接触计算机。这类人群确实已经在图形操作系统的时代里完成了进化。但是如果我们放眼整个人类文明，这个进程仍然是非常缓慢的，根本原因一个是在于早先的计算机硬件成本，一个还是在于图形界面操作系统的学习成本仍然存在（你敢说Windows的学习成本低我跟你急，如果你是个学计算机的，你被多少人找你重装过系统了？）。图形操作系统的普及很大意义上就是因为当时的世界上只有极少极少数的极客会将一整张DOS命令表背的滚瓜烂熟轻车熟路然后完全通过指令来控制整个系统，这些人封闭在自己的世界里，认为自己正在创造新世界，认为自己很酷，不可否认，对于开发者来说，命令行是非常方便和高效的一个方法，然而对于消费者，对于Entire Human Species，这无疑是一个封闭，自我的群体。而我认为由于互联网浪潮的兴起，现在的整个社会正有这个趋势，而且由于如今互联网能够在其他行业看来更轻而易举的融资，这个原本是负面的效应反而被钱洗了个脸，成为了一个新的社会生产力。我们封闭的有理，我们酷的有理，因为我们更有钱，而且，更重要的是，技术这个事情，相比于传统行业，更容易白手起家，这对于社会阶层流动等等等等都是有积极作用的（这里如果是经济学家应该能分析出个长篇大论吧），因此种种外界因素作用之下，使得我见过很多代码狂人，整天就是写代码研究算法，并且觉得自己非常屌。<strong>这个社会在助长他们的封闭性。</strong></p>
<p>可以说，乔布斯热衷于图形操作系统，是希望解放人类的创造力和生产力，然而如今？我们需要新的突破。现在的操作系统，完全可以和Flow一样存在于云端，而客户端，也就是过去意义上的电脑，只有显示的设备和网络连接的设备，以及一个麦克风，它的成本可以做到极低，这在硬件的实现上已经没有了理论障碍。然而在软件层面，这仍然是一个没有解开的坎。</p>
<p>当然，在这里我并不是认为类似Siri，Cortana或者Echo，Rokit之流没有什么意义，相反，他们在这个时代是一个勇敢的先驱者，只不过他们的意义没有那么夸张罢了。我所认为的下一个时代，也就是未来的时代，<strong>现在还没有到来</strong>。可以肯定的是<strong>下一个时代的来临不是光靠一群程序员天天写着什么O2O什么打车软件就可以创造出来的，也不是一群程序员今天写个电商网站明天写个论坛就能创造出来的</strong>，这些都只是商业模式，都只是创造财富的一种手段，做的极少数顶尖的独角兽和巨头也不过就是在或多或少的改变人类生活，却并不足以成为推动人类文明进化的重要力量（Ps. 写完之后校对的时候发现这句话也许有些过激，然而却是真真的反映了当下互联网时代缺乏真正的革命性创新的现状，读者不必太过较真）。所以，程序员们，有些时候不要老是被大家在做什么或者大公司在做什么所蒙蔽了双眼，有些时候冷静下来好好思考一下自己所处的时代，也许你会明白其实我们还有更大的使命去完成，更伟大的事情等着被创造。也许你就会明白，大部分人不过都是在重复别人走过的路，如果可以为整个人类去踩出一条新路，那岂不是此生无憾了？</p>
<p>当我们用代码，算法，想去实现一个所谓的人工智能的时候，其实这和造物主创造我们是一样的过程。我们尚且无法明白人类是如何被创造出来的，我们尚且只能用基因进化论来搪塞，但是不能否认的是，生物学界并无法定义人类的意识是什么时候，什么条件下，具体又是如何产生的。尼安德特人？得了吧。所以我们的基因，我们的造物主为我们写下的基因，其实就和我们现在写的代码一样，都是去定义一个物体，并且教会它各种基本的方法，例如我们人类的肌肉运动，看，听，吃，拉屎，就相当于一个程序里的基本方法加减乘除开方等等。当有了这些之后，基因又继续教会了我们去思考，去学习，去识别，从而诞生了人类，而现在我们教会了我们要创造的这个“事物”去学习，但是还没有人能够真正教会它去思考和识别（当然如果那样一天已经到来了现在的世界可能就面目全非了）。所以我觉得，想要真正的，或者说最正确最合理的去创造一个人工智能的方式，如果你真的想要这么做的话，不是从你的行为出发，也不是从你想要它帮你放一首歌会如何说的话出发，而应该从我们的大脑和基因出发，去理解和反编译我们自己的代码，去明白我们的基因是如何变成控制我们成长，控制我们生老病死七情六欲的代码，这才是让我感觉真正热血沸腾的事情。当然，如果有一天这个技术能够获得突破，那就真的算是人类文明进化的一大步了吧。</p>
<p>最后声明：<strong>通篇扯淡，说的都是废话，不要相信，仅博一乐</strong>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我觉得现在的不论是全社会还是整个互联网圈，都弥漫着一股对于人工智能的狂热崇拜，就像是一种人工智能邪教一样，深深地蛊惑着每一个圈外人或者是无知者的心智。大家都觉得，人工智能好牛]]>
    </summary>
    
      <category term="哲学" scheme="http://sergiochan.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="扯淡" scheme="http://sergiochan.github.io/tags/%E6%89%AF%E6%B7%A1/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016-04-11 去战斗]]></title>
    <link href="http://sergiochan.github.io/2016/04/11/2016-04-11-%E5%8E%BB%E6%88%98%E6%96%97/"/>
    <id>http://sergiochan.github.io/2016/04/11/2016-04-11-去战斗/</id>
    <published>2016-04-11T08:55:11.000Z</published>
    <updated>2016-08-19T06:35:03.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>遇到的挑战越大，获得的快感也越强</p>
<p>– 著名黑客凯文·米特尼克（Kevin Mitnick）</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>遇到的挑战越大，获得的快感也越强</p>
<p>– 著名黑客凯文·米特尼克（Kevin Mitnick）</p>
</blockquote>
]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我是怎么踩过在 OSX 上录屏的坑的]]></title>
    <link href="http://sergiochan.github.io/2016/03/23/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E8%B8%A9%E8%BF%87%E5%9C%A8-OSX-%E4%B8%8A%E5%BD%95%E5%B1%8F%E7%9A%84%E5%9D%91%E7%9A%84/"/>
    <id>http://sergiochan.github.io/2016/03/23/我是怎么踩过在-OSX-上录屏的坑的/</id>
    <published>2016-03-23T15:55:44.000Z</published>
    <updated>2016-03-23T16:03:40.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天开始在研究 OSX 上的屏幕录制并且实时获取视频流或图像帧的实现。遇到了非常大的阻力，各种问题，昨晚纠结了一整晚，终于在小萌的启发下慢慢找到了解决办法，把谷歌和 stackoverflow 都翻了个底朝天，最后的解决有点意外，中间还是有一些细节需要求证，然而除了 Apple Doc 已经没有任何参考文献了，而有些机制 Apple Doc 中都不会涉及。所以此刻迫不及待的想要写一篇博客，来纪念万里长征的第一步。</p>
<p>要实现录屏，有两种途径，一种是通过 <code>Core Graphic</code>， 一种是通过 <code>AVFoundation</code>。 <code>Core Graphic</code> 的话，你可以找到苹果官方的一份 <a href="https://developer.apple.com/library/mac/samplecode/SonOfGrab/Introduction/Intro.html" target="_blank" rel="external">SampleCode</a>，如果使用了 </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> screenShot = <span class="built_in">CGWindowListCreateImage</span>(<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, [<span class="keyword">self</span> screenRect].size.width, [<span class="keyword">self</span> screenRect].size.height), kCGWindowListOptionOnScreenOnly, kCGNullWindowID, kCGWindowImageDefault |kCGWindowImageNominalResolution);</span><br></pre></td></tr></table></figure>
<p>它的优点在于你可以根据 <code>WindowID</code> 来获取<strong>指定窗口</strong>的图像，并且可以通过 <code>ListOption</code> 来设定各种包括桌面图标，去除桌面图标，去除桌面，这些七七八八的设置，所以微信 Mac 端的截屏功能应该就是使用了上面这行代码。<strong>所以我们也可以设置一个 NSTimer， 来按照六十分之一秒一帧的速度来获取截图，并且形成一个流。</strong> 实践表明性能还不错，对于录屏这种事情烧一烧 CPU 是常有的事情，毕竟你需要按帧来计算像素，而且对于 Mac 而言，CPU 并不是什么特别大的问题 =。= 因此这种办法是<strong>可行的</strong>，然而我觉得不够优雅。</p>
<p>同样，Core Graphic 中还有一种实现办法：<code>CGDisplayCreateImage</code>：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> Ref = <span class="built_in">CGDisplayCreateImage</span>(display);</span><br><span class="line"><span class="comment">//NSData *data = (NSData *)CFBridgingRelease(CGDataProviderCopyData(CGImageGetDataProvider(Ref)));</span></span><br><span class="line">screenImg = [[<span class="built_in">NSImage</span> alloc] initWithCGImage:Ref size:<span class="built_in">CGDisplayScreenSize</span>(display)];</span><br><span class="line"><span class="comment">//screenImg = [image mutableCopy];</span></span><br><span class="line"><span class="built_in">CGImageRelease</span>(Ref);</span><br><span class="line"><span class="built_in">CGDisplayRelease</span> (display);</span><br></pre></td></tr></table></figure>
<p>这种实现的机制和上述的是一致的，实现出来的效果和性能也都不错，但是同样的还是觉得不够优雅。</p>
<p>所以此刻就要转向 <code>AVFoundation</code> 了。在 <code>AVFoundation</code> 中，有一个 input 类叫做 <code>AVCaptureScreenInput</code> 这个 input 直接可以获得到当前屏幕的视频输入。这时候我想起两年前我做过视频追踪人脸的 sdk，简单地说就是通过 <code>AVDeviceCapture</code> 来获取相机的 input 然后打开一个 <code>AVSession</code>， 然后再将 input 里面的 buffer 读出来，对每一帧进行人脸检测的运算。然后我按照苹果官方的一个录屏的例子和一个 Github 上存在不多的这方面的仓库实现了简单的录屏，使用了 <code>AVCaptureMovieFileOutput</code> 作为 output。到这里的时候，一切都很顺利，输出到 mov 文件的录屏都是正常的。然后我开始了从缓冲区读取 buffer 的工作，简单来说，从缓冲区读帧是根据 <code>AVCaptureFileOutputDelegate</code> 里面的一个回调 </p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>captureOutput:<span class="params">(AVCaptureFileOutput *)</span>captureOutput didOutputSampleBuffer:<span class="params">(CMSampleBufferRef)</span>sampleBuffer fromConnection:<span class="params">(AVCaptureConnection *)</span>connection;</span><br></pre></td></tr></table></figure>
<p>来实现的。这里的 <code>CMSampleBuffers</code> 是一个 <code>Core Foundation</code> 的对象，它包含了零个或多个压缩或未压缩过的特定媒体类型的抽样，通常被用来传递媒体数据。一个 <code>CMSampleBuffers</code> 可以包含：</p>
<ul>
<li><code>CMBlockBuffer</code>, 可能包含一个或多个的 sample (话说 sample 可以翻译为帧么？还是取样的意思……)</li>
<li><code>CVImageBuffer</code> 包含了 buffer 层级的附件和 sample 层级的附件，还包括了包含的所有 sample 的格式，大小和时间信息</li>
</ul>
<p>按照 Apple Doc， 一个 <code>CMSampleBuffers</code> 就是这两种 buffer 之一的一个 wrapper， 因此每一个 <code>CMSampleBuffers</code> 只会包含其中之一。你需要用不同的方法来取出里面的数据。所以我就很正常的按照最正常的写法来取 buffer 了：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">CVImageBufferRef imageBuffer = <span class="built_in">CMSampleBufferGetImageBuffer</span>(sampleBuffer);</span><br><span class="line">CVPixelBufferLockBaseAddress(imageBuffer,<span class="number">0</span>);        <span class="comment">// Lock the image buffer</span></span><br><span class="line">        </span><br><span class="line">uint8_t *baseAddress = (uint8_t *)CVPixelBufferGetBaseAddressOfPlane(imageBuffer, <span class="number">0</span>);   <span class="comment">// Get information of the image</span></span><br><span class="line">size_t bytesPerRow = CVPixelBufferGetBytesPerRow(imageBuffer);</span><br><span class="line">size_t width = CVPixelBufferGetWidth(imageBuffer);</span><br><span class="line">size_t height = CVPixelBufferGetHeight(imageBuffer);</span><br><span class="line"><span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGContextRef</span> newContext = <span class="built_in">CGBitmapContextCreate</span>(baseAddress, width, height, <span class="number">8</span>, bytesPerRow, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst);</span><br><span class="line"><span class="built_in">CGImageRef</span> newImage = <span class="built_in">CGBitmapContextCreateImage</span>(newContext);</span><br><span class="line"><span class="built_in">CGContextRelease</span>(newContext);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">CVPixelBufferUnlockBaseAddress(imageBuffer,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>然而这个时候出了个小岔子，这里获取的 <code>CMSampleBuffers</code> 里面包的是 <code>CMBlockBuffer</code>！于是我开始查各种 stackoverflow， 无解， 一开始以为是视频格式的问题，需要按照 H264 的编码来解析，但是怎么可能呢…… 百思不得其解，即使我将 <code>CMBlockBuffer</code> 里面的 Data 读取了出来，也无法转换成 <code>NSImage</code>， 说明这个 Data 不是正常的 data。 那么有没有可能一帧被拆成多个 samples 来传输了呢…… 有可能，然而我尝试了仍然无果。</p>
<p>这时候我回头看看，发现我这里并没有将视频导出到文件的需求，有没有其他 output 来替代。偏巧我在 stackoverflow 上看到了<a href="http://stackoverflow.com/questions/15916808/capturing-blank-stills-from-a-avcapturescreeninput" target="_blank" rel="external">这个问题</a>，于是就用 <code>AVCaptureVideoDataOutput</code> 来尝试。尝试之前我已经有强烈预感了 - - 毕竟上一个 output 是直接输出到文件，而这个 output 明显是直接输出成 data。于是你只要这样给一个 output 就可以恢复正常了：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">self.output  = [[AVCaptureVideoDataOutput alloc] init];</span><br><span class="line">[((AVCaptureVideoDataOutput *)self.output) setVideoSettings:[NSDictionary dictionaryWithObjectsAndKeys:@(kCVPixelFormatType_32BGRA),kCVPixelBufferPixelFormatTypeKey, <span class="literal">nil</span>]];</span><br><span class="line">dispatch_queue_t<span class="built_in"> queue </span>= dispatch_queue_create(<span class="string">"com.sergio.chan"</span>, 0);</span><br><span class="line">[(AVCaptureVideoDataOutput *)self.output setSampleBufferDelegate:self queue:queue];</span><br></pre></td></tr></table></figure>
<p>这时候的 sampleBuffer 已经可以正常按帧解析出来了，这里有两个问题，一个是在上面那段代码获取到一个 <code>CGImageRef</code> 的 <code>newImage</code> 对象后需要每一次都对 newImage 进行一次release，否则内存溢出就要爆炸了，一个是线程安全问题，在上面的代码里可以看出这个新的 <code>AVCaptureVideoDataOutputSampleBufferDelegate</code> 其实是在一个独立的线程上接收回调的，因此如果你要在这个 delegate 中进行 UI 操作的话，记得回到主线程操作 =。=</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@try</span> &#123;</span><br><span class="line">    CVImageBufferRef imageBuffer = <span class="built_in">CMSampleBufferGetImageBuffer</span>(sampleBuffer);</span><br><span class="line">    CVPixelBufferLockBaseAddress(imageBuffer,<span class="number">0</span>);        <span class="comment">// Lock the image buffer</span></span><br><span class="line">    </span><br><span class="line">    uint8_t *baseAddress = (uint8_t *)CVPixelBufferGetBaseAddressOfPlane(imageBuffer, <span class="number">0</span>);   <span class="comment">// Get information of the image</span></span><br><span class="line">    size_t bytesPerRow = CVPixelBufferGetBytesPerRow(imageBuffer);</span><br><span class="line">    size_t width = CVPixelBufferGetWidth(imageBuffer);</span><br><span class="line">    size_t height = CVPixelBufferGetHeight(imageBuffer);</span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextRef</span> newContext = <span class="built_in">CGBitmapContextCreate</span>(baseAddress, width, height, <span class="number">8</span>, bytesPerRow, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst);</span><br><span class="line">    <span class="built_in">CGImageRef</span> newImage = <span class="built_in">CGBitmapContextCreateImage</span>(newContext);</span><br><span class="line">    <span class="built_in">CGContextRelease</span>(newContext);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">    CVPixelBufferUnlockBaseAddress(imageBuffer,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSImage</span> *image = [[<span class="built_in">NSImage</span> alloc] initWithCGImage:newImage size:[<span class="keyword">self</span> screenRect].size];</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(newImage);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>.imageView) &#123;</span><br><span class="line">            <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Error at %@"</span>,exception.debugDescription);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS. Cocoa 中获取 ScreenRect 的方法如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- (NSRect)<span class="keyword">screenRect</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"> </span>   NSRect <span class="keyword">screenRect;</span></span><br><span class="line"><span class="keyword"> </span>   NSArray *<span class="keyword">screenArray </span>= [NSScreen <span class="keyword">screens];</span></span><br><span class="line"><span class="keyword"> </span>   NSScreen *<span class="keyword">screen </span>= [<span class="keyword">screenArray </span>objectAtIndex: <span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">screenRect </span>= [<span class="keyword">screen </span>frame]<span class="comment">;//[screen visibleFrame];</span></span><br><span class="line">    </span><br><span class="line">    return <span class="keyword">screenRect;</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里后来又遇到一个小坑。如果使用的是 visibleFrame， 那么如果你的窗口处于全屏模式，获取 visibleFrame 的时候其实会把上面状态栏的那部分区域给省略了，因为计算 visibleFrame 的时候估计不考虑状态栏是否隐藏吧，所以这里用 frame 更好。</p>
</blockquote>
<p>这里从 delegate 中获取到每一帧的数据之后就可以对每一帧进行压缩，并且以 Data 的形式进行传输了。差点忘记最后介绍一下 <code>AVCaptureScreenInput</code> 的一些特性了：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.input.capturesMouseClicks = <span class="literal">YES</span>;</span><br><span class="line"><span class="keyword">self</span>.input.minFrameDuration = <span class="built_in">CMTimeMake</span>(<span class="number">1</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">self</span>.input.scaleFactor = <span class="number">0.5</span>f;</span><br><span class="line"><span class="keyword">self</span>.input.cropRect = [<span class="keyword">self</span> screenRect];</span><br></pre></td></tr></table></figure>
<p>首先 <code>AVCaptureScreenInput</code> 可以记录下鼠标移动的轨迹，还可以记录鼠标的点击事件（自行体验），第二个属性设置的是最大帧率，也就是60帧一秒。第三个和第四个属性顾名思义分别是缩放的比例和最后输出的裁剪区域，设置这两个属性可以减少每一帧的大小，也就是说在输入的时候就已经限制过大小了，然后你再可以进行一些压缩什么的。最后其实 <code>AVCaptureScreenInput</code> 还有一个关键的属性，但是现在已经被废弃了，因为苹果已经把这个属性内置成系统默认了😂 <strong>重复帧会被自动取消</strong>，这在以前的版本是可以通过一个属性设置的，现在已经被默认采用了。</p>
<p>多余的说几点：</p>
<ul>
<li>其实 Core Media 那层有很多知识点，但是苦于文档太少，研究的人也太少，因此实在是举步维艰，感兴趣的朋友可以参考一下<a href="https://developer.apple.com/library/mac/documentation/CoreMedia/Reference/CMSampleBuffer/" target="_blank" rel="external">苹果的 Reference </a>看下这块的内容。</li>
<li>其实可能有些人知道在 <code>AVFoundation</code> 下面，<code>Core Media</code>之上还有一层叫做 <code>Video ToolBox</code>，这在2012年那会儿都是只有越狱的设备才能调用到的 Private API，但是2014年的 WWDC 苹果将这一层开放出来了，因此你可以在 <code>AVFoundation</code> 更深入的层次去做视频编码解码和流处理，这块的知识我这次只看了个大概，留下了一些资料出处：<a href="https://github.com/McZonk/VideoToolboxPlus" target="_blank" rel="external">Github</a>  <a href="https://developer.apple.com/videos/play/wwdc2014/513/" target="_blank" rel="external">WWDC</a></li>
</ul>
<p>最后，最重要的是！代码已经整理成开源库放在 <a href="https://github.com/RavenTech-GrowthHacker/RTScreenRecorder" target="_blank" rel="external">Github</a> 上了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天开始在研究 OSX 上的屏幕录制并且实时获取视频流或图像帧的实现。遇到了非常大的阻力，各种问题，昨晚纠结了一整晚，终于在小萌的启发下慢慢找到了解决办法，把谷歌和 stac]]>
    </summary>
    
      <category term="AVFoundation" scheme="http://sergiochan.github.io/tags/AVFoundation/"/>
    
      <category term="Cocoa" scheme="http://sergiochan.github.io/tags/Cocoa/"/>
    
      <category term="Cocoa入门？" scheme="http://sergiochan.github.io/categories/Cocoa%E5%85%A5%E9%97%A8%EF%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016.03.15]]></title>
    <link href="http://sergiochan.github.io/2016/03/15/2016-03-15/"/>
    <id>http://sergiochan.github.io/2016/03/15/2016-03-15/</id>
    <published>2016-03-15T09:59:28.000Z</published>
    <updated>2016-03-15T10:02:50.000Z</updated>
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>宠辱不惊。<br>努力去尝试吧，既然你能够有机会去改变世界了！</p>
<p>一步步脚踏实地走下去。<br>种下汗水。</p>
]]></content>
    <summary type="html">
    <![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>宠辱不惊。<br>努力去尝试吧，既然你能够有机会去改变世界了！</p>
<p>一步步脚踏实地走下去。<br>种下汗水。</p>
]]>
    </summary>
    
      <category term="闲言碎语" scheme="http://sergiochan.github.io/categories/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
</feed>
